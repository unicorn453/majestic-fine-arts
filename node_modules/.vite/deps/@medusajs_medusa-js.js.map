{
  "version": 3,
  "sources": ["../../@medusajs/medusa-js/node_modules/axios/lib/helpers/bind.js", "../../@medusajs/medusa-js/node_modules/axios/lib/utils.js", "../../@medusajs/medusa-js/node_modules/axios/lib/helpers/buildURL.js", "../../@medusajs/medusa-js/node_modules/axios/lib/core/InterceptorManager.js", "../../@medusajs/medusa-js/node_modules/axios/lib/helpers/normalizeHeaderName.js", "../../@medusajs/medusa-js/node_modules/axios/lib/core/enhanceError.js", "../../@medusajs/medusa-js/node_modules/axios/lib/core/createError.js", "../../@medusajs/medusa-js/node_modules/axios/lib/core/settle.js", "../../@medusajs/medusa-js/node_modules/axios/lib/helpers/cookies.js", "../../@medusajs/medusa-js/node_modules/axios/lib/helpers/isAbsoluteURL.js", "../../@medusajs/medusa-js/node_modules/axios/lib/helpers/combineURLs.js", "../../@medusajs/medusa-js/node_modules/axios/lib/core/buildFullPath.js", "../../@medusajs/medusa-js/node_modules/axios/lib/helpers/parseHeaders.js", "../../@medusajs/medusa-js/node_modules/axios/lib/helpers/isURLSameOrigin.js", "../../@medusajs/medusa-js/node_modules/axios/lib/cancel/Cancel.js", "../../@medusajs/medusa-js/node_modules/axios/lib/adapters/xhr.js", "../../@medusajs/medusa-js/node_modules/axios/lib/defaults.js", "../../@medusajs/medusa-js/node_modules/axios/lib/core/transformData.js", "../../@medusajs/medusa-js/node_modules/axios/lib/cancel/isCancel.js", "../../@medusajs/medusa-js/node_modules/axios/lib/core/dispatchRequest.js", "../../@medusajs/medusa-js/node_modules/axios/lib/core/mergeConfig.js", "../../@medusajs/medusa-js/node_modules/axios/lib/env/data.js", "../../@medusajs/medusa-js/node_modules/axios/lib/helpers/validator.js", "../../@medusajs/medusa-js/node_modules/axios/lib/core/Axios.js", "../../@medusajs/medusa-js/node_modules/axios/lib/cancel/CancelToken.js", "../../@medusajs/medusa-js/node_modules/axios/lib/helpers/spread.js", "../../@medusajs/medusa-js/node_modules/axios/lib/helpers/isAxiosError.js", "../../@medusajs/medusa-js/node_modules/axios/lib/axios.js", "../../@medusajs/medusa-js/node_modules/axios/index.js", "../../es-errors/type.js", "../../object-inspect/index.js", "../../side-channel-list/index.js", "../../es-object-atoms/index.js", "../../es-errors/index.js", "../../es-errors/eval.js", "../../es-errors/range.js", "../../es-errors/ref.js", "../../es-errors/syntax.js", "../../es-errors/uri.js", "../../math-intrinsics/abs.js", "../../math-intrinsics/floor.js", "../../math-intrinsics/max.js", "../../math-intrinsics/min.js", "../../math-intrinsics/pow.js", "../../math-intrinsics/round.js", "../../math-intrinsics/isNaN.js", "../../math-intrinsics/sign.js", "../../gopd/gOPD.js", "../../gopd/index.js", "../../es-define-property/index.js", "../../has-symbols/shams.js", "../../has-symbols/index.js", "../../get-proto/Reflect.getPrototypeOf.js", "../../get-proto/Object.getPrototypeOf.js", "../../function-bind/implementation.js", "../../function-bind/index.js", "../../call-bind-apply-helpers/functionCall.js", "../../call-bind-apply-helpers/functionApply.js", "../../call-bind-apply-helpers/reflectApply.js", "../../call-bind-apply-helpers/actualApply.js", "../../call-bind-apply-helpers/index.js", "../../dunder-proto/get.js", "../../get-proto/index.js", "../../hasown/index.js", "../../get-intrinsic/index.js", "../../call-bound/index.js", "../../side-channel-map/index.js", "../../side-channel-weakmap/index.js", "../../side-channel/index.js", "../../qs/lib/formats.js", "../../qs/lib/utils.js", "../../qs/lib/stringify.js", "../../qs/lib/parse.js", "../../qs/lib/index.js", "../../@medusajs/medusa-js/src/error.ts", "../../@medusajs/medusa-js/src/key-manager.ts", "../../@medusajs/medusa-js/src/request.ts", "../../@medusajs/medusa-js/src/jwt-token-manager.ts", "../../@medusajs/medusa-js/src/resources/base.ts", "../../@medusajs/medusa-js/src/resources/addresses.ts", "../../@medusajs/medusa-js/src/resources/auth.ts", "../../@medusajs/medusa-js/src/resources/line-items.ts", "../../@medusajs/medusa-js/src/resources/carts.ts", "../../@medusajs/medusa-js/src/resources/collections.ts", "../../@medusajs/medusa-js/src/resources/customers.ts", "../../@medusajs/medusa-js/src/resources/payment-methods.ts", "../../@medusajs/medusa-js/src/resources/gift-cards.ts", "../../@medusajs/medusa-js/src/resources/order-edits.ts", "../../@medusajs/medusa-js/src/resources/orders.ts", "../../@medusajs/medusa-js/src/resources/payment-collections.ts", "../../@medusajs/medusa-js/src/resources/product-categories.ts", "../../@medusajs/medusa-js/src/resources/product-tags.ts", "../../@medusajs/medusa-js/src/resources/product-types.ts", "../../@medusajs/medusa-js/src/resources/product-variants.ts", "../../@medusajs/medusa-js/src/resources/products.ts", "../../@medusajs/medusa-js/src/resources/regions.ts", "../../@medusajs/medusa-js/src/resources/return-reasons.ts", "../../@medusajs/medusa-js/src/resources/returns.ts", "../../@medusajs/medusa-js/src/resources/shipping-options.ts", "../../@medusajs/medusa-js/src/resources/swaps.ts", "../../@medusajs/medusa-js/src/resources/admin/auth.ts", "../../@medusajs/medusa-js/src/resources/admin/batch-jobs.ts", "../../@medusajs/medusa-js/src/utils.ts", "../../@medusajs/medusa-js/src/resources/admin/collections.ts", "../../@medusajs/medusa-js/src/resources/admin/currencies.ts", "../../@medusajs/medusa-js/src/resources/admin/custom.ts", "../../@medusajs/medusa-js/src/resources/admin/customer-groups.ts", "../../@medusajs/medusa-js/src/resources/admin/customers.ts", "../../@medusajs/medusa-js/src/resources/admin/discounts.ts", "../../@medusajs/medusa-js/src/resources/admin/draft-orders.ts", "../../@medusajs/medusa-js/src/resources/admin/gift-cards.ts", "../../@medusajs/medusa-js/src/resources/admin/inventory-item.ts", "../../@medusajs/medusa-js/src/resources/admin/invites.ts", "../../@medusajs/medusa-js/src/resources/admin/notes.ts", "../../@medusajs/medusa-js/src/resources/admin/notifications.ts", "../../@medusajs/medusa-js/src/resources/admin/order-edits.ts", "../../@medusajs/medusa-js/src/resources/admin/orders.ts", "../../@medusajs/medusa-js/src/resources/admin/payment-collections.ts", "../../@medusajs/medusa-js/src/resources/admin/payments.ts", "../../@medusajs/medusa-js/src/resources/admin/price-lists.ts", "../../@medusajs/medusa-js/src/resources/admin/product-categories.ts", "../../@medusajs/medusa-js/src/resources/admin/product-tags.ts", "../../@medusajs/medusa-js/src/resources/admin/product-types.ts", "../../@medusajs/medusa-js/src/resources/admin/products.ts", "../../@medusajs/medusa-js/src/resources/admin/publishable-api-keys.ts", "../../@medusajs/medusa-js/src/resources/admin/regions.ts", "../../@medusajs/medusa-js/src/resources/admin/reservations.ts", "../../@medusajs/medusa-js/src/resources/admin/return-reasons.ts", "../../@medusajs/medusa-js/src/resources/admin/returns.ts", "../../@medusajs/medusa-js/src/resources/admin/sales-channels.ts", "../../@medusajs/medusa-js/src/resources/admin/shipping-options.ts", "../../@medusajs/medusa-js/src/resources/admin/shipping-profiles.ts", "../../@medusajs/medusa-js/src/resources/admin/stock-locations.ts", "../../@medusajs/medusa-js/src/resources/admin/store.ts", "../../@medusajs/medusa-js/src/resources/admin/swaps.ts", "../../@medusajs/medusa-js/src/resources/admin/tax-rates.ts", "../../@medusajs/medusa-js/src/resources/admin/uploads.ts", "../../@medusajs/medusa-js/src/resources/admin/users.ts", "../../@medusajs/medusa-js/src/resources/admin/variants.ts", "../../@medusajs/medusa-js/src/resources/admin/index.ts", "../../@medusajs/medusa-js/src/index.ts", "../../retry-axios/src/index.ts", "../../uuid/dist/esm-browser/rng.js", "../../uuid/dist/esm-browser/regex.js", "../../uuid/dist/esm-browser/validate.js", "../../uuid/dist/esm-browser/stringify.js", "../../uuid/dist/esm-browser/parse.js", "../../uuid/dist/esm-browser/v35.js", "../../uuid/dist/esm-browser/md5.js", "../../uuid/dist/esm-browser/v3.js", "../../uuid/dist/esm-browser/native.js", "../../uuid/dist/esm-browser/v4.js", "../../uuid/dist/esm-browser/sha1.js", "../../uuid/dist/esm-browser/v5.js"],
  "sourcesContent": ["'use strict';\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n", "'use strict';\n\nvar bind = require('./helpers/bind');\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {Object} val The value to test\n * @return {boolean} True if value is a plain Object, otherwise false\n */\nfunction isPlainObject(val) {\n  if (toString.call(val) !== '[object Object]') {\n    return false;\n  }\n\n  var prototype = Object.getPrototypeOf(val);\n  return prototype === null || prototype === Object.prototype;\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.trim ? str.trim() : str.replace(/^\\s+|\\s+$/g, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (isPlainObject(result[key]) && isPlainObject(val)) {\n      result[key] = merge(result[key], val);\n    } else if (isPlainObject(val)) {\n      result[key] = merge({}, val);\n    } else if (isArray(val)) {\n      result[key] = val.slice();\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n * @return {string} content value without BOM\n */\nfunction stripBOM(content) {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim,\n  stripBOM: stripBOM\n};\n", "'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n", "'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected, options) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected,\n    synchronous: options ? options.synchronous : false,\n    runWhen: options ? options.runWhen : null\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n", "'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n", "'use strict';\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  };\n  return error;\n};\n", "'use strict';\n\nvar enhanceError = require('./enhanceError');\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n", "'use strict';\n\nvar createError = require('./createError');\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n", "'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n", "'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n", "'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n", "'use strict';\n\nvar isAbsoluteURL = require('../helpers/isAbsoluteURL');\nvar combineURLs = require('../helpers/combineURLs');\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n", "'use strict';\n\nvar utils = require('./../utils');\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n", "'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n", "'use strict';\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n", "'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar cookies = require('./../helpers/cookies');\nvar buildURL = require('./../helpers/buildURL');\nvar buildFullPath = require('../core/buildFullPath');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\nvar defaults = require('../defaults');\nvar Cancel = require('../cancel/Cancel');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n    var responseType = config.responseType;\n    var onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?\n        request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n      var transitional = config.transitional || defaults.transitional;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(\n        timeoutErrorMessage,\n        config,\n        transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = function(cancel) {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);\n        request.abort();\n        request = null;\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    if (!requestData) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n", "'use strict';\n\nvar utils = require('./utils');\nvar normalizeHeaderName = require('./helpers/normalizeHeaderName');\nvar enhanceError = require('./core/enhanceError');\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('./adapters/xhr');\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = require('./adapters/http');\n  }\n  return adapter;\n}\n\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nvar defaults = {\n\n  transitional: {\n    silentJSONParsing: true,\n    forcedJSONParsing: true,\n    clarifyTimeoutError: false\n  },\n\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {\n      setContentTypeIfUnset(headers, 'application/json');\n      return stringifySafely(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    var transitional = this.transitional || defaults.transitional;\n    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n\n    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw enhanceError(e, this, 'E_JSON_PARSE');\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*'\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n", "'use strict';\n\nvar utils = require('./../utils');\nvar defaults = require('./../defaults');\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  var context = this || defaults;\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(context, data, headers);\n  });\n\n  return data;\n};\n", "'use strict';\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n", "'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\nvar Cancel = require('../cancel/Cancel');\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new Cancel('canceled');\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n", "'use strict';\n\nvar utils = require('../utils');\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  function getMergedValue(target, source) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge(target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(prop) {\n    if (prop in config2) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  var mergeMap = {\n    'url': valueFromConfig2,\n    'method': valueFromConfig2,\n    'data': valueFromConfig2,\n    'baseURL': defaultToConfig2,\n    'transformRequest': defaultToConfig2,\n    'transformResponse': defaultToConfig2,\n    'paramsSerializer': defaultToConfig2,\n    'timeout': defaultToConfig2,\n    'timeoutMessage': defaultToConfig2,\n    'withCredentials': defaultToConfig2,\n    'adapter': defaultToConfig2,\n    'responseType': defaultToConfig2,\n    'xsrfCookieName': defaultToConfig2,\n    'xsrfHeaderName': defaultToConfig2,\n    'onUploadProgress': defaultToConfig2,\n    'onDownloadProgress': defaultToConfig2,\n    'decompress': defaultToConfig2,\n    'maxContentLength': defaultToConfig2,\n    'maxBodyLength': defaultToConfig2,\n    'transport': defaultToConfig2,\n    'httpAgent': defaultToConfig2,\n    'httpsAgent': defaultToConfig2,\n    'cancelToken': defaultToConfig2,\n    'socketPath': defaultToConfig2,\n    'responseEncoding': defaultToConfig2,\n    'validateStatus': mergeDirectKeys\n  };\n\n  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {\n    var merge = mergeMap[prop] || mergeDeepProperties;\n    var configValue = merge(prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n};\n", "module.exports = {\n  \"version\": \"0.24.0\"\n};", "'use strict';\n\nvar VERSION = require('../env/data').version;\n\nvar validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nvar deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return function(value, opt, opts) {\n    if (validator === false) {\n      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new TypeError('options must be an object');\n  }\n  var keys = Object.keys(options);\n  var i = keys.length;\n  while (i-- > 0) {\n    var opt = keys[i];\n    var validator = schema[opt];\n    if (validator) {\n      var value = options[opt];\n      var result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new TypeError('option ' + opt + ' must be ' + result);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw Error('Unknown option ' + opt);\n    }\n  }\n}\n\nmodule.exports = {\n  assertOptions: assertOptions,\n  validators: validators\n};\n", "'use strict';\n\nvar utils = require('./../utils');\nvar buildURL = require('../helpers/buildURL');\nvar InterceptorManager = require('./InterceptorManager');\nvar dispatchRequest = require('./dispatchRequest');\nvar mergeConfig = require('./mergeConfig');\nvar validator = require('../helpers/validator');\n\nvar validators = validator.validators;\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = arguments[1] || {};\n    config.url = arguments[0];\n  } else {\n    config = config || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  var transitional = config.transitional;\n\n  if (transitional !== undefined) {\n    validator.assertOptions(transitional, {\n      silentJSONParsing: validators.transitional(validators.boolean),\n      forcedJSONParsing: validators.transitional(validators.boolean),\n      clarifyTimeoutError: validators.transitional(validators.boolean)\n    }, false);\n  }\n\n  // filter out skipped interceptors\n  var requestInterceptorChain = [];\n  var synchronousRequestInterceptors = true;\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n      return;\n    }\n\n    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var responseInterceptorChain = [];\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var promise;\n\n  if (!synchronousRequestInterceptors) {\n    var chain = [dispatchRequest, undefined];\n\n    Array.prototype.unshift.apply(chain, requestInterceptorChain);\n    chain = chain.concat(responseInterceptorChain);\n\n    promise = Promise.resolve(config);\n    while (chain.length) {\n      promise = promise.then(chain.shift(), chain.shift());\n    }\n\n    return promise;\n  }\n\n\n  var newConfig = config;\n  while (requestInterceptorChain.length) {\n    var onFulfilled = requestInterceptorChain.shift();\n    var onRejected = requestInterceptorChain.shift();\n    try {\n      newConfig = onFulfilled(newConfig);\n    } catch (error) {\n      onRejected(error);\n      break;\n    }\n  }\n\n  try {\n    promise = dispatchRequest(newConfig);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n\n  while (responseInterceptorChain.length) {\n    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n", "'use strict';\n\nvar Cancel = require('./Cancel');\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n\n  // eslint-disable-next-line func-names\n  this.promise.then(function(cancel) {\n    if (!token._listeners) return;\n\n    var i;\n    var l = token._listeners.length;\n\n    for (i = 0; i < l; i++) {\n      token._listeners[i](cancel);\n    }\n    token._listeners = null;\n  });\n\n  // eslint-disable-next-line func-names\n  this.promise.then = function(onfulfilled) {\n    var _resolve;\n    // eslint-disable-next-line func-names\n    var promise = new Promise(function(resolve) {\n      token.subscribe(resolve);\n      _resolve = resolve;\n    }).then(onfulfilled);\n\n    promise.cancel = function reject() {\n      token.unsubscribe(_resolve);\n    };\n\n    return promise;\n  };\n\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Subscribe to the cancel signal\n */\n\nCancelToken.prototype.subscribe = function subscribe(listener) {\n  if (this.reason) {\n    listener(this.reason);\n    return;\n  }\n\n  if (this._listeners) {\n    this._listeners.push(listener);\n  } else {\n    this._listeners = [listener];\n  }\n};\n\n/**\n * Unsubscribe from the cancel signal\n */\n\nCancelToken.prototype.unsubscribe = function unsubscribe(listener) {\n  if (!this._listeners) {\n    return;\n  }\n  var index = this._listeners.indexOf(listener);\n  if (index !== -1) {\n    this._listeners.splice(index, 1);\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n", "'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n", "'use strict';\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nmodule.exports = function isAxiosError(payload) {\n  return (typeof payload === 'object') && (payload.isAxiosError === true);\n};\n", "'use strict';\n\nvar utils = require('./utils');\nvar bind = require('./helpers/bind');\nvar Axios = require('./core/Axios');\nvar mergeConfig = require('./core/mergeConfig');\nvar defaults = require('./defaults');\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.Cancel = require('./cancel/Cancel');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel');\naxios.VERSION = require('./env/data').version;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = require('./helpers/spread');\n\n// Expose isAxiosError\naxios.isAxiosError = require('./helpers/isAxiosError');\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n", "module.exports = require('./lib/axios');", "'use strict';\n\n/** @type {import('./type')} */\nmodule.exports = TypeError;\n", "var hasMap = typeof Map === 'function' && Map.prototype;\nvar mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;\nvar mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;\nvar mapForEach = hasMap && Map.prototype.forEach;\nvar hasSet = typeof Set === 'function' && Set.prototype;\nvar setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;\nvar setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;\nvar setForEach = hasSet && Set.prototype.forEach;\nvar hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;\nvar weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;\nvar hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;\nvar weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;\nvar hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;\nvar weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;\nvar booleanValueOf = Boolean.prototype.valueOf;\nvar objectToString = Object.prototype.toString;\nvar functionToString = Function.prototype.toString;\nvar $match = String.prototype.match;\nvar $slice = String.prototype.slice;\nvar $replace = String.prototype.replace;\nvar $toUpperCase = String.prototype.toUpperCase;\nvar $toLowerCase = String.prototype.toLowerCase;\nvar $test = RegExp.prototype.test;\nvar $concat = Array.prototype.concat;\nvar $join = Array.prototype.join;\nvar $arrSlice = Array.prototype.slice;\nvar $floor = Math.floor;\nvar bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;\nvar gOPS = Object.getOwnPropertySymbols;\nvar symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;\nvar hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';\n// ie, `has-tostringtag/shams\nvar toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')\n    ? Symbol.toStringTag\n    : null;\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\n\nvar gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (\n    [].__proto__ === Array.prototype // eslint-disable-line no-proto\n        ? function (O) {\n            return O.__proto__; // eslint-disable-line no-proto\n        }\n        : null\n);\n\nfunction addNumericSeparator(num, str) {\n    if (\n        num === Infinity\n        || num === -Infinity\n        || num !== num\n        || (num && num > -1000 && num < 1000)\n        || $test.call(/e/, str)\n    ) {\n        return str;\n    }\n    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;\n    if (typeof num === 'number') {\n        var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)\n        if (int !== num) {\n            var intStr = String(int);\n            var dec = $slice.call(str, intStr.length + 1);\n            return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');\n        }\n    }\n    return $replace.call(str, sepRegex, '$&_');\n}\n\nvar utilInspect = require('./util.inspect');\nvar inspectCustom = utilInspect.custom;\nvar inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;\n\nvar quotes = {\n    __proto__: null,\n    'double': '\"',\n    single: \"'\"\n};\nvar quoteREs = {\n    __proto__: null,\n    'double': /([\"\\\\])/g,\n    single: /(['\\\\])/g\n};\n\nmodule.exports = function inspect_(obj, options, depth, seen) {\n    var opts = options || {};\n\n    if (has(opts, 'quoteStyle') && !has(quotes, opts.quoteStyle)) {\n        throw new TypeError('option \"quoteStyle\" must be \"single\" or \"double\"');\n    }\n    if (\n        has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'\n            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity\n            : opts.maxStringLength !== null\n        )\n    ) {\n        throw new TypeError('option \"maxStringLength\", if provided, must be a positive integer, Infinity, or `null`');\n    }\n    var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;\n    if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {\n        throw new TypeError('option \"customInspect\", if provided, must be `true`, `false`, or `\\'symbol\\'`');\n    }\n\n    if (\n        has(opts, 'indent')\n        && opts.indent !== null\n        && opts.indent !== '\\t'\n        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)\n    ) {\n        throw new TypeError('option \"indent\" must be \"\\\\t\", an integer > 0, or `null`');\n    }\n    if (has(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {\n        throw new TypeError('option \"numericSeparator\", if provided, must be `true` or `false`');\n    }\n    var numericSeparator = opts.numericSeparator;\n\n    if (typeof obj === 'undefined') {\n        return 'undefined';\n    }\n    if (obj === null) {\n        return 'null';\n    }\n    if (typeof obj === 'boolean') {\n        return obj ? 'true' : 'false';\n    }\n\n    if (typeof obj === 'string') {\n        return inspectString(obj, opts);\n    }\n    if (typeof obj === 'number') {\n        if (obj === 0) {\n            return Infinity / obj > 0 ? '0' : '-0';\n        }\n        var str = String(obj);\n        return numericSeparator ? addNumericSeparator(obj, str) : str;\n    }\n    if (typeof obj === 'bigint') {\n        var bigIntStr = String(obj) + 'n';\n        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;\n    }\n\n    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;\n    if (typeof depth === 'undefined') { depth = 0; }\n    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {\n        return isArray(obj) ? '[Array]' : '[Object]';\n    }\n\n    var indent = getIndent(opts, depth);\n\n    if (typeof seen === 'undefined') {\n        seen = [];\n    } else if (indexOf(seen, obj) >= 0) {\n        return '[Circular]';\n    }\n\n    function inspect(value, from, noIndent) {\n        if (from) {\n            seen = $arrSlice.call(seen);\n            seen.push(from);\n        }\n        if (noIndent) {\n            var newOpts = {\n                depth: opts.depth\n            };\n            if (has(opts, 'quoteStyle')) {\n                newOpts.quoteStyle = opts.quoteStyle;\n            }\n            return inspect_(value, newOpts, depth + 1, seen);\n        }\n        return inspect_(value, opts, depth + 1, seen);\n    }\n\n    if (typeof obj === 'function' && !isRegExp(obj)) { // in older engines, regexes are callable\n        var name = nameOf(obj);\n        var keys = arrObjKeys(obj, inspect);\n        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');\n    }\n    if (isSymbol(obj)) {\n        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\\(.*\\))_[^)]*$/, '$1') : symToString.call(obj);\n        return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;\n    }\n    if (isElement(obj)) {\n        var s = '<' + $toLowerCase.call(String(obj.nodeName));\n        var attrs = obj.attributes || [];\n        for (var i = 0; i < attrs.length; i++) {\n            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);\n        }\n        s += '>';\n        if (obj.childNodes && obj.childNodes.length) { s += '...'; }\n        s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';\n        return s;\n    }\n    if (isArray(obj)) {\n        if (obj.length === 0) { return '[]'; }\n        var xs = arrObjKeys(obj, inspect);\n        if (indent && !singleLineValues(xs)) {\n            return '[' + indentedJoin(xs, indent) + ']';\n        }\n        return '[ ' + $join.call(xs, ', ') + ' ]';\n    }\n    if (isError(obj)) {\n        var parts = arrObjKeys(obj, inspect);\n        if (!('cause' in Error.prototype) && 'cause' in obj && !isEnumerable.call(obj, 'cause')) {\n            return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';\n        }\n        if (parts.length === 0) { return '[' + String(obj) + ']'; }\n        return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';\n    }\n    if (typeof obj === 'object' && customInspect) {\n        if (inspectSymbol && typeof obj[inspectSymbol] === 'function' && utilInspect) {\n            return utilInspect(obj, { depth: maxDepth - depth });\n        } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {\n            return obj.inspect();\n        }\n    }\n    if (isMap(obj)) {\n        var mapParts = [];\n        if (mapForEach) {\n            mapForEach.call(obj, function (value, key) {\n                mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));\n            });\n        }\n        return collectionOf('Map', mapSize.call(obj), mapParts, indent);\n    }\n    if (isSet(obj)) {\n        var setParts = [];\n        if (setForEach) {\n            setForEach.call(obj, function (value) {\n                setParts.push(inspect(value, obj));\n            });\n        }\n        return collectionOf('Set', setSize.call(obj), setParts, indent);\n    }\n    if (isWeakMap(obj)) {\n        return weakCollectionOf('WeakMap');\n    }\n    if (isWeakSet(obj)) {\n        return weakCollectionOf('WeakSet');\n    }\n    if (isWeakRef(obj)) {\n        return weakCollectionOf('WeakRef');\n    }\n    if (isNumber(obj)) {\n        return markBoxed(inspect(Number(obj)));\n    }\n    if (isBigInt(obj)) {\n        return markBoxed(inspect(bigIntValueOf.call(obj)));\n    }\n    if (isBoolean(obj)) {\n        return markBoxed(booleanValueOf.call(obj));\n    }\n    if (isString(obj)) {\n        return markBoxed(inspect(String(obj)));\n    }\n    // note: in IE 8, sometimes `global !== window` but both are the prototypes of each other\n    /* eslint-env browser */\n    if (typeof window !== 'undefined' && obj === window) {\n        return '{ [object Window] }';\n    }\n    if (\n        (typeof globalThis !== 'undefined' && obj === globalThis)\n        || (typeof global !== 'undefined' && obj === global)\n    ) {\n        return '{ [object globalThis] }';\n    }\n    if (!isDate(obj) && !isRegExp(obj)) {\n        var ys = arrObjKeys(obj, inspect);\n        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;\n        var protoTag = obj instanceof Object ? '' : 'null prototype';\n        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? 'Object' : '';\n        var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';\n        var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');\n        if (ys.length === 0) { return tag + '{}'; }\n        if (indent) {\n            return tag + '{' + indentedJoin(ys, indent) + '}';\n        }\n        return tag + '{ ' + $join.call(ys, ', ') + ' }';\n    }\n    return String(obj);\n};\n\nfunction wrapQuotes(s, defaultStyle, opts) {\n    var style = opts.quoteStyle || defaultStyle;\n    var quoteChar = quotes[style];\n    return quoteChar + s + quoteChar;\n}\n\nfunction quote(s) {\n    return $replace.call(String(s), /\"/g, '&quot;');\n}\n\nfunction canTrustToString(obj) {\n    return !toStringTag || !(typeof obj === 'object' && (toStringTag in obj || typeof obj[toStringTag] !== 'undefined'));\n}\nfunction isArray(obj) { return toStr(obj) === '[object Array]' && canTrustToString(obj); }\nfunction isDate(obj) { return toStr(obj) === '[object Date]' && canTrustToString(obj); }\nfunction isRegExp(obj) { return toStr(obj) === '[object RegExp]' && canTrustToString(obj); }\nfunction isError(obj) { return toStr(obj) === '[object Error]' && canTrustToString(obj); }\nfunction isString(obj) { return toStr(obj) === '[object String]' && canTrustToString(obj); }\nfunction isNumber(obj) { return toStr(obj) === '[object Number]' && canTrustToString(obj); }\nfunction isBoolean(obj) { return toStr(obj) === '[object Boolean]' && canTrustToString(obj); }\n\n// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives\nfunction isSymbol(obj) {\n    if (hasShammedSymbols) {\n        return obj && typeof obj === 'object' && obj instanceof Symbol;\n    }\n    if (typeof obj === 'symbol') {\n        return true;\n    }\n    if (!obj || typeof obj !== 'object' || !symToString) {\n        return false;\n    }\n    try {\n        symToString.call(obj);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nfunction isBigInt(obj) {\n    if (!obj || typeof obj !== 'object' || !bigIntValueOf) {\n        return false;\n    }\n    try {\n        bigIntValueOf.call(obj);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nvar hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };\nfunction has(obj, key) {\n    return hasOwn.call(obj, key);\n}\n\nfunction toStr(obj) {\n    return objectToString.call(obj);\n}\n\nfunction nameOf(f) {\n    if (f.name) { return f.name; }\n    var m = $match.call(functionToString.call(f), /^function\\s*([\\w$]+)/);\n    if (m) { return m[1]; }\n    return null;\n}\n\nfunction indexOf(xs, x) {\n    if (xs.indexOf) { return xs.indexOf(x); }\n    for (var i = 0, l = xs.length; i < l; i++) {\n        if (xs[i] === x) { return i; }\n    }\n    return -1;\n}\n\nfunction isMap(x) {\n    if (!mapSize || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        mapSize.call(x);\n        try {\n            setSize.call(x);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof Map; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakMap(x) {\n    if (!weakMapHas || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakMapHas.call(x, weakMapHas);\n        try {\n            weakSetHas.call(x, weakSetHas);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakRef(x) {\n    if (!weakRefDeref || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakRefDeref.call(x);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nfunction isSet(x) {\n    if (!setSize || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        setSize.call(x);\n        try {\n            mapSize.call(x);\n        } catch (m) {\n            return true;\n        }\n        return x instanceof Set; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakSet(x) {\n    if (!weakSetHas || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakSetHas.call(x, weakSetHas);\n        try {\n            weakMapHas.call(x, weakMapHas);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isElement(x) {\n    if (!x || typeof x !== 'object') { return false; }\n    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {\n        return true;\n    }\n    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';\n}\n\nfunction inspectString(str, opts) {\n    if (str.length > opts.maxStringLength) {\n        var remaining = str.length - opts.maxStringLength;\n        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');\n        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;\n    }\n    var quoteRE = quoteREs[opts.quoteStyle || 'single'];\n    quoteRE.lastIndex = 0;\n    // eslint-disable-next-line no-control-regex\n    var s = $replace.call($replace.call(str, quoteRE, '\\\\$1'), /[\\x00-\\x1f]/g, lowbyte);\n    return wrapQuotes(s, 'single', opts);\n}\n\nfunction lowbyte(c) {\n    var n = c.charCodeAt(0);\n    var x = {\n        8: 'b',\n        9: 't',\n        10: 'n',\n        12: 'f',\n        13: 'r'\n    }[n];\n    if (x) { return '\\\\' + x; }\n    return '\\\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));\n}\n\nfunction markBoxed(str) {\n    return 'Object(' + str + ')';\n}\n\nfunction weakCollectionOf(type) {\n    return type + ' { ? }';\n}\n\nfunction collectionOf(type, size, entries, indent) {\n    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');\n    return type + ' (' + size + ') {' + joinedEntries + '}';\n}\n\nfunction singleLineValues(xs) {\n    for (var i = 0; i < xs.length; i++) {\n        if (indexOf(xs[i], '\\n') >= 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction getIndent(opts, depth) {\n    var baseIndent;\n    if (opts.indent === '\\t') {\n        baseIndent = '\\t';\n    } else if (typeof opts.indent === 'number' && opts.indent > 0) {\n        baseIndent = $join.call(Array(opts.indent + 1), ' ');\n    } else {\n        return null;\n    }\n    return {\n        base: baseIndent,\n        prev: $join.call(Array(depth + 1), baseIndent)\n    };\n}\n\nfunction indentedJoin(xs, indent) {\n    if (xs.length === 0) { return ''; }\n    var lineJoiner = '\\n' + indent.prev + indent.base;\n    return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\\n' + indent.prev;\n}\n\nfunction arrObjKeys(obj, inspect) {\n    var isArr = isArray(obj);\n    var xs = [];\n    if (isArr) {\n        xs.length = obj.length;\n        for (var i = 0; i < obj.length; i++) {\n            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';\n        }\n    }\n    var syms = typeof gOPS === 'function' ? gOPS(obj) : [];\n    var symMap;\n    if (hasShammedSymbols) {\n        symMap = {};\n        for (var k = 0; k < syms.length; k++) {\n            symMap['$' + syms[k]] = syms[k];\n        }\n    }\n\n    for (var key in obj) { // eslint-disable-line no-restricted-syntax\n        if (!has(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue\n        if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue\n        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {\n            // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section\n            continue; // eslint-disable-line no-restricted-syntax, no-continue\n        } else if ($test.call(/[^\\w$]/, key)) {\n            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));\n        } else {\n            xs.push(key + ': ' + inspect(obj[key], obj));\n        }\n    }\n    if (typeof gOPS === 'function') {\n        for (var j = 0; j < syms.length; j++) {\n            if (isEnumerable.call(obj, syms[j])) {\n                xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));\n            }\n        }\n    }\n    return xs;\n}\n", "'use strict';\n\nvar inspect = require('object-inspect');\n\nvar $TypeError = require('es-errors/type');\n\n/*\n* This function traverses the list returning the node corresponding to the given key.\n*\n* That node is also moved to the head of the list, so that if it's accessed again we don't need to traverse the whole list.\n* By doing so, all the recently used nodes can be accessed relatively quickly.\n*/\n/** @type {import('./list.d.ts').listGetNode} */\n// eslint-disable-next-line consistent-return\nvar listGetNode = function (list, key, isDelete) {\n\t/** @type {typeof list | NonNullable<(typeof list)['next']>} */\n\tvar prev = list;\n\t/** @type {(typeof list)['next']} */\n\tvar curr;\n\t// eslint-disable-next-line eqeqeq\n\tfor (; (curr = prev.next) != null; prev = curr) {\n\t\tif (curr.key === key) {\n\t\t\tprev.next = curr.next;\n\t\t\tif (!isDelete) {\n\t\t\t\t// eslint-disable-next-line no-extra-parens\n\t\t\t\tcurr.next = /** @type {NonNullable<typeof list.next>} */ (list.next);\n\t\t\t\tlist.next = curr; // eslint-disable-line no-param-reassign\n\t\t\t}\n\t\t\treturn curr;\n\t\t}\n\t}\n};\n\n/** @type {import('./list.d.ts').listGet} */\nvar listGet = function (objects, key) {\n\tif (!objects) {\n\t\treturn void undefined;\n\t}\n\tvar node = listGetNode(objects, key);\n\treturn node && node.value;\n};\n/** @type {import('./list.d.ts').listSet} */\nvar listSet = function (objects, key, value) {\n\tvar node = listGetNode(objects, key);\n\tif (node) {\n\t\tnode.value = value;\n\t} else {\n\t\t// Prepend the new node to the beginning of the list\n\t\tobjects.next = /** @type {import('./list.d.ts').ListNode<typeof value, typeof key>} */ ({ // eslint-disable-line no-param-reassign, no-extra-parens\n\t\t\tkey: key,\n\t\t\tnext: objects.next,\n\t\t\tvalue: value\n\t\t});\n\t}\n};\n/** @type {import('./list.d.ts').listHas} */\nvar listHas = function (objects, key) {\n\tif (!objects) {\n\t\treturn false;\n\t}\n\treturn !!listGetNode(objects, key);\n};\n/** @type {import('./list.d.ts').listDelete} */\n// eslint-disable-next-line consistent-return\nvar listDelete = function (objects, key) {\n\tif (objects) {\n\t\treturn listGetNode(objects, key, true);\n\t}\n};\n\n/** @type {import('.')} */\nmodule.exports = function getSideChannelList() {\n\t/** @typedef {ReturnType<typeof getSideChannelList>} Channel */\n\t/** @typedef {Parameters<Channel['get']>[0]} K */\n\t/** @typedef {Parameters<Channel['set']>[1]} V */\n\n\t/** @type {import('./list.d.ts').RootNode<V, K> | undefined} */ var $o;\n\n\t/** @type {Channel} */\n\tvar channel = {\n\t\tassert: function (key) {\n\t\t\tif (!channel.has(key)) {\n\t\t\t\tthrow new $TypeError('Side channel does not contain ' + inspect(key));\n\t\t\t}\n\t\t},\n\t\t'delete': function (key) {\n\t\t\tvar root = $o && $o.next;\n\t\t\tvar deletedNode = listDelete($o, key);\n\t\t\tif (deletedNode && root && root === deletedNode) {\n\t\t\t\t$o = void undefined;\n\t\t\t}\n\t\t\treturn !!deletedNode;\n\t\t},\n\t\tget: function (key) {\n\t\t\treturn listGet($o, key);\n\t\t},\n\t\thas: function (key) {\n\t\t\treturn listHas($o, key);\n\t\t},\n\t\tset: function (key, value) {\n\t\t\tif (!$o) {\n\t\t\t\t// Initialize the linked list as an empty node, so that we don't have to special-case handling of the first node: we can always refer to it as (previous node).next, instead of something like (list).head\n\t\t\t\t$o = {\n\t\t\t\t\tnext: void undefined\n\t\t\t\t};\n\t\t\t}\n\t\t\t// eslint-disable-next-line no-extra-parens\n\t\t\tlistSet(/** @type {NonNullable<typeof $o>} */ ($o), key, value);\n\t\t}\n\t};\n\t// @ts-expect-error TODO: figure out why this is erroring\n\treturn channel;\n};\n", "'use strict';\n\n/** @type {import('.')} */\nmodule.exports = Object;\n", "'use strict';\n\n/** @type {import('.')} */\nmodule.exports = Error;\n", "'use strict';\n\n/** @type {import('./eval')} */\nmodule.exports = EvalError;\n", "'use strict';\n\n/** @type {import('./range')} */\nmodule.exports = RangeError;\n", "'use strict';\n\n/** @type {import('./ref')} */\nmodule.exports = ReferenceError;\n", "'use strict';\n\n/** @type {import('./syntax')} */\nmodule.exports = SyntaxError;\n", "'use strict';\n\n/** @type {import('./uri')} */\nmodule.exports = URIError;\n", "'use strict';\n\n/** @type {import('./abs')} */\nmodule.exports = Math.abs;\n", "'use strict';\n\n/** @type {import('./floor')} */\nmodule.exports = Math.floor;\n", "'use strict';\n\n/** @type {import('./max')} */\nmodule.exports = Math.max;\n", "'use strict';\n\n/** @type {import('./min')} */\nmodule.exports = Math.min;\n", "'use strict';\n\n/** @type {import('./pow')} */\nmodule.exports = Math.pow;\n", "'use strict';\n\n/** @type {import('./round')} */\nmodule.exports = Math.round;\n", "'use strict';\n\n/** @type {import('./isNaN')} */\nmodule.exports = Number.isNaN || function isNaN(a) {\n\treturn a !== a;\n};\n", "'use strict';\n\nvar $isNaN = require('./isNaN');\n\n/** @type {import('./sign')} */\nmodule.exports = function sign(number) {\n\tif ($isNaN(number) || number === 0) {\n\t\treturn number;\n\t}\n\treturn number < 0 ? -1 : +1;\n};\n", "'use strict';\n\n/** @type {import('./gOPD')} */\nmodule.exports = Object.getOwnPropertyDescriptor;\n", "'use strict';\n\n/** @type {import('.')} */\nvar $gOPD = require('./gOPD');\n\nif ($gOPD) {\n\ttry {\n\t\t$gOPD([], 'length');\n\t} catch (e) {\n\t\t// IE 8 has a broken gOPD\n\t\t$gOPD = null;\n\t}\n}\n\nmodule.exports = $gOPD;\n", "'use strict';\n\n/** @type {import('.')} */\nvar $defineProperty = Object.defineProperty || false;\nif ($defineProperty) {\n\ttry {\n\t\t$defineProperty({}, 'a', { value: 1 });\n\t} catch (e) {\n\t\t// IE 8 has a broken defineProperty\n\t\t$defineProperty = false;\n\t}\n}\n\nmodule.exports = $defineProperty;\n", "'use strict';\n\n/** @type {import('./shams')} */\n/* eslint complexity: [2, 18], max-statements: [2, 33] */\nmodule.exports = function hasSymbols() {\n\tif (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }\n\tif (typeof Symbol.iterator === 'symbol') { return true; }\n\n\t/** @type {{ [k in symbol]?: unknown }} */\n\tvar obj = {};\n\tvar sym = Symbol('test');\n\tvar symObj = Object(sym);\n\tif (typeof sym === 'string') { return false; }\n\n\tif (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }\n\tif (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }\n\n\t// temp disabled per https://github.com/ljharb/object.assign/issues/17\n\t// if (sym instanceof Symbol) { return false; }\n\t// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n\t// if (!(symObj instanceof Symbol)) { return false; }\n\n\t// if (typeof Symbol.prototype.toString !== 'function') { return false; }\n\t// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n\n\tvar symVal = 42;\n\tobj[sym] = symVal;\n\tfor (var _ in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop\n\tif (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }\n\n\tif (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }\n\n\tvar syms = Object.getOwnPropertySymbols(obj);\n\tif (syms.length !== 1 || syms[0] !== sym) { return false; }\n\n\tif (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }\n\n\tif (typeof Object.getOwnPropertyDescriptor === 'function') {\n\t\t// eslint-disable-next-line no-extra-parens\n\t\tvar descriptor = /** @type {PropertyDescriptor} */ (Object.getOwnPropertyDescriptor(obj, sym));\n\t\tif (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }\n\t}\n\n\treturn true;\n};\n", "'use strict';\n\nvar origSymbol = typeof Symbol !== 'undefined' && Symbol;\nvar hasSymbolSham = require('./shams');\n\n/** @type {import('.')} */\nmodule.exports = function hasNativeSymbols() {\n\tif (typeof origSymbol !== 'function') { return false; }\n\tif (typeof Symbol !== 'function') { return false; }\n\tif (typeof origSymbol('foo') !== 'symbol') { return false; }\n\tif (typeof Symbol('bar') !== 'symbol') { return false; }\n\n\treturn hasSymbolSham();\n};\n", "'use strict';\n\n/** @type {import('./Reflect.getPrototypeOf')} */\nmodule.exports = (typeof Reflect !== 'undefined' && Reflect.getPrototypeOf) || null;\n", "'use strict';\n\nvar $Object = require('es-object-atoms');\n\n/** @type {import('./Object.getPrototypeOf')} */\nmodule.exports = $Object.getPrototypeOf || null;\n", "'use strict';\n\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar toStr = Object.prototype.toString;\nvar max = Math.max;\nvar funcType = '[object Function]';\n\nvar concatty = function concatty(a, b) {\n    var arr = [];\n\n    for (var i = 0; i < a.length; i += 1) {\n        arr[i] = a[i];\n    }\n    for (var j = 0; j < b.length; j += 1) {\n        arr[j + a.length] = b[j];\n    }\n\n    return arr;\n};\n\nvar slicy = function slicy(arrLike, offset) {\n    var arr = [];\n    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {\n        arr[j] = arrLike[i];\n    }\n    return arr;\n};\n\nvar joiny = function (arr, joiner) {\n    var str = '';\n    for (var i = 0; i < arr.length; i += 1) {\n        str += arr[i];\n        if (i + 1 < arr.length) {\n            str += joiner;\n        }\n    }\n    return str;\n};\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slicy(arguments, 1);\n\n    var bound;\n    var binder = function () {\n        if (this instanceof bound) {\n            var result = target.apply(\n                this,\n                concatty(args, arguments)\n            );\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        }\n        return target.apply(\n            that,\n            concatty(args, arguments)\n        );\n\n    };\n\n    var boundLength = max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs[i] = '$' + i;\n    }\n\n    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n", "'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = Function.prototype.bind || implementation;\n", "'use strict';\n\n/** @type {import('./functionCall')} */\nmodule.exports = Function.prototype.call;\n", "'use strict';\n\n/** @type {import('./functionApply')} */\nmodule.exports = Function.prototype.apply;\n", "'use strict';\n\n/** @type {import('./reflectApply')} */\nmodule.exports = typeof Reflect !== 'undefined' && Reflect && Reflect.apply;\n", "'use strict';\n\nvar bind = require('function-bind');\n\nvar $apply = require('./functionApply');\nvar $call = require('./functionCall');\nvar $reflectApply = require('./reflectApply');\n\n/** @type {import('./actualApply')} */\nmodule.exports = $reflectApply || bind.call($call, $apply);\n", "'use strict';\n\nvar bind = require('function-bind');\nvar $TypeError = require('es-errors/type');\n\nvar $call = require('./functionCall');\nvar $actualApply = require('./actualApply');\n\n/** @type {(args: [Function, thisArg?: unknown, ...args: unknown[]]) => Function} TODO FIXME, find a way to use import('.') */\nmodule.exports = function callBindBasic(args) {\n\tif (args.length < 1 || typeof args[0] !== 'function') {\n\t\tthrow new $TypeError('a function is required');\n\t}\n\treturn $actualApply(bind, $call, args);\n};\n", "'use strict';\n\nvar callBind = require('call-bind-apply-helpers');\nvar gOPD = require('gopd');\n\nvar hasProtoAccessor;\ntry {\n\t// eslint-disable-next-line no-extra-parens, no-proto\n\thasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */ ([]).__proto__ === Array.prototype;\n} catch (e) {\n\tif (!e || typeof e !== 'object' || !('code' in e) || e.code !== 'ERR_PROTO_ACCESS') {\n\t\tthrow e;\n\t}\n}\n\n// eslint-disable-next-line no-extra-parens\nvar desc = !!hasProtoAccessor && gOPD && gOPD(Object.prototype, /** @type {keyof typeof Object.prototype} */ ('__proto__'));\n\nvar $Object = Object;\nvar $getPrototypeOf = $Object.getPrototypeOf;\n\n/** @type {import('./get')} */\nmodule.exports = desc && typeof desc.get === 'function'\n\t? callBind([desc.get])\n\t: typeof $getPrototypeOf === 'function'\n\t\t? /** @type {import('./get')} */ function getDunder(value) {\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\treturn $getPrototypeOf(value == null ? value : $Object(value));\n\t\t}\n\t\t: false;\n", "'use strict';\n\nvar reflectGetProto = require('./Reflect.getPrototypeOf');\nvar originalGetProto = require('./Object.getPrototypeOf');\n\nvar getDunderProto = require('dunder-proto/get');\n\n/** @type {import('.')} */\nmodule.exports = reflectGetProto\n\t? function getProto(O) {\n\t\t// @ts-expect-error TS can't narrow inside a closure, for some reason\n\t\treturn reflectGetProto(O);\n\t}\n\t: originalGetProto\n\t\t? function getProto(O) {\n\t\t\tif (!O || (typeof O !== 'object' && typeof O !== 'function')) {\n\t\t\t\tthrow new TypeError('getProto: not an object');\n\t\t\t}\n\t\t\t// @ts-expect-error TS can't narrow inside a closure, for some reason\n\t\t\treturn originalGetProto(O);\n\t\t}\n\t\t: getDunderProto\n\t\t\t? function getProto(O) {\n\t\t\t\t// @ts-expect-error TS can't narrow inside a closure, for some reason\n\t\t\t\treturn getDunderProto(O);\n\t\t\t}\n\t\t\t: null;\n", "'use strict';\n\nvar call = Function.prototype.call;\nvar $hasOwn = Object.prototype.hasOwnProperty;\nvar bind = require('function-bind');\n\n/** @type {import('.')} */\nmodule.exports = bind.call(call, $hasOwn);\n", "'use strict';\n\nvar undefined;\n\nvar $Object = require('es-object-atoms');\n\nvar $Error = require('es-errors');\nvar $EvalError = require('es-errors/eval');\nvar $RangeError = require('es-errors/range');\nvar $ReferenceError = require('es-errors/ref');\nvar $SyntaxError = require('es-errors/syntax');\nvar $TypeError = require('es-errors/type');\nvar $URIError = require('es-errors/uri');\n\nvar abs = require('math-intrinsics/abs');\nvar floor = require('math-intrinsics/floor');\nvar max = require('math-intrinsics/max');\nvar min = require('math-intrinsics/min');\nvar pow = require('math-intrinsics/pow');\nvar round = require('math-intrinsics/round');\nvar sign = require('math-intrinsics/sign');\n\nvar $Function = Function;\n\n// eslint-disable-next-line consistent-return\nvar getEvalledConstructor = function (expressionSyntax) {\n\ttry {\n\t\treturn $Function('\"use strict\"; return (' + expressionSyntax + ').constructor;')();\n\t} catch (e) {}\n};\n\nvar $gOPD = require('gopd');\nvar $defineProperty = require('es-define-property');\n\nvar throwTypeError = function () {\n\tthrow new $TypeError();\n};\nvar ThrowTypeError = $gOPD\n\t? (function () {\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties\n\t\t\targuments.callee; // IE 8 does not throw here\n\t\t\treturn throwTypeError;\n\t\t} catch (calleeThrows) {\n\t\t\ttry {\n\t\t\t\t// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')\n\t\t\t\treturn $gOPD(arguments, 'callee').get;\n\t\t\t} catch (gOPDthrows) {\n\t\t\t\treturn throwTypeError;\n\t\t\t}\n\t\t}\n\t}())\n\t: throwTypeError;\n\nvar hasSymbols = require('has-symbols')();\n\nvar getProto = require('get-proto');\nvar $ObjectGPO = require('get-proto/Object.getPrototypeOf');\nvar $ReflectGPO = require('get-proto/Reflect.getPrototypeOf');\n\nvar $apply = require('call-bind-apply-helpers/functionApply');\nvar $call = require('call-bind-apply-helpers/functionCall');\n\nvar needsEval = {};\n\nvar TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);\n\nvar INTRINSICS = {\n\t__proto__: null,\n\t'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,\n\t'%Array%': Array,\n\t'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,\n\t'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,\n\t'%AsyncFromSyncIteratorPrototype%': undefined,\n\t'%AsyncFunction%': needsEval,\n\t'%AsyncGenerator%': needsEval,\n\t'%AsyncGeneratorFunction%': needsEval,\n\t'%AsyncIteratorPrototype%': needsEval,\n\t'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,\n\t'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,\n\t'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,\n\t'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,\n\t'%Boolean%': Boolean,\n\t'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,\n\t'%Date%': Date,\n\t'%decodeURI%': decodeURI,\n\t'%decodeURIComponent%': decodeURIComponent,\n\t'%encodeURI%': encodeURI,\n\t'%encodeURIComponent%': encodeURIComponent,\n\t'%Error%': $Error,\n\t'%eval%': eval, // eslint-disable-line no-eval\n\t'%EvalError%': $EvalError,\n\t'%Float16Array%': typeof Float16Array === 'undefined' ? undefined : Float16Array,\n\t'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,\n\t'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,\n\t'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,\n\t'%Function%': $Function,\n\t'%GeneratorFunction%': needsEval,\n\t'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,\n\t'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,\n\t'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,\n\t'%isFinite%': isFinite,\n\t'%isNaN%': isNaN,\n\t'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,\n\t'%JSON%': typeof JSON === 'object' ? JSON : undefined,\n\t'%Map%': typeof Map === 'undefined' ? undefined : Map,\n\t'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),\n\t'%Math%': Math,\n\t'%Number%': Number,\n\t'%Object%': $Object,\n\t'%Object.getOwnPropertyDescriptor%': $gOPD,\n\t'%parseFloat%': parseFloat,\n\t'%parseInt%': parseInt,\n\t'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,\n\t'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,\n\t'%RangeError%': $RangeError,\n\t'%ReferenceError%': $ReferenceError,\n\t'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,\n\t'%RegExp%': RegExp,\n\t'%Set%': typeof Set === 'undefined' ? undefined : Set,\n\t'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),\n\t'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,\n\t'%String%': String,\n\t'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,\n\t'%Symbol%': hasSymbols ? Symbol : undefined,\n\t'%SyntaxError%': $SyntaxError,\n\t'%ThrowTypeError%': ThrowTypeError,\n\t'%TypedArray%': TypedArray,\n\t'%TypeError%': $TypeError,\n\t'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,\n\t'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,\n\t'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,\n\t'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,\n\t'%URIError%': $URIError,\n\t'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,\n\t'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,\n\t'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet,\n\n\t'%Function.prototype.call%': $call,\n\t'%Function.prototype.apply%': $apply,\n\t'%Object.defineProperty%': $defineProperty,\n\t'%Object.getPrototypeOf%': $ObjectGPO,\n\t'%Math.abs%': abs,\n\t'%Math.floor%': floor,\n\t'%Math.max%': max,\n\t'%Math.min%': min,\n\t'%Math.pow%': pow,\n\t'%Math.round%': round,\n\t'%Math.sign%': sign,\n\t'%Reflect.getPrototypeOf%': $ReflectGPO\n};\n\nif (getProto) {\n\ttry {\n\t\tnull.error; // eslint-disable-line no-unused-expressions\n\t} catch (e) {\n\t\t// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229\n\t\tvar errorProto = getProto(getProto(e));\n\t\tINTRINSICS['%Error.prototype%'] = errorProto;\n\t}\n}\n\nvar doEval = function doEval(name) {\n\tvar value;\n\tif (name === '%AsyncFunction%') {\n\t\tvalue = getEvalledConstructor('async function () {}');\n\t} else if (name === '%GeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('function* () {}');\n\t} else if (name === '%AsyncGeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('async function* () {}');\n\t} else if (name === '%AsyncGenerator%') {\n\t\tvar fn = doEval('%AsyncGeneratorFunction%');\n\t\tif (fn) {\n\t\t\tvalue = fn.prototype;\n\t\t}\n\t} else if (name === '%AsyncIteratorPrototype%') {\n\t\tvar gen = doEval('%AsyncGenerator%');\n\t\tif (gen && getProto) {\n\t\t\tvalue = getProto(gen.prototype);\n\t\t}\n\t}\n\n\tINTRINSICS[name] = value;\n\n\treturn value;\n};\n\nvar LEGACY_ALIASES = {\n\t__proto__: null,\n\t'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],\n\t'%ArrayPrototype%': ['Array', 'prototype'],\n\t'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],\n\t'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],\n\t'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],\n\t'%ArrayProto_values%': ['Array', 'prototype', 'values'],\n\t'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],\n\t'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],\n\t'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],\n\t'%BooleanPrototype%': ['Boolean', 'prototype'],\n\t'%DataViewPrototype%': ['DataView', 'prototype'],\n\t'%DatePrototype%': ['Date', 'prototype'],\n\t'%ErrorPrototype%': ['Error', 'prototype'],\n\t'%EvalErrorPrototype%': ['EvalError', 'prototype'],\n\t'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],\n\t'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],\n\t'%FunctionPrototype%': ['Function', 'prototype'],\n\t'%Generator%': ['GeneratorFunction', 'prototype'],\n\t'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],\n\t'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],\n\t'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],\n\t'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],\n\t'%JSONParse%': ['JSON', 'parse'],\n\t'%JSONStringify%': ['JSON', 'stringify'],\n\t'%MapPrototype%': ['Map', 'prototype'],\n\t'%NumberPrototype%': ['Number', 'prototype'],\n\t'%ObjectPrototype%': ['Object', 'prototype'],\n\t'%ObjProto_toString%': ['Object', 'prototype', 'toString'],\n\t'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],\n\t'%PromisePrototype%': ['Promise', 'prototype'],\n\t'%PromiseProto_then%': ['Promise', 'prototype', 'then'],\n\t'%Promise_all%': ['Promise', 'all'],\n\t'%Promise_reject%': ['Promise', 'reject'],\n\t'%Promise_resolve%': ['Promise', 'resolve'],\n\t'%RangeErrorPrototype%': ['RangeError', 'prototype'],\n\t'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],\n\t'%RegExpPrototype%': ['RegExp', 'prototype'],\n\t'%SetPrototype%': ['Set', 'prototype'],\n\t'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],\n\t'%StringPrototype%': ['String', 'prototype'],\n\t'%SymbolPrototype%': ['Symbol', 'prototype'],\n\t'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],\n\t'%TypedArrayPrototype%': ['TypedArray', 'prototype'],\n\t'%TypeErrorPrototype%': ['TypeError', 'prototype'],\n\t'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],\n\t'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],\n\t'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],\n\t'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],\n\t'%URIErrorPrototype%': ['URIError', 'prototype'],\n\t'%WeakMapPrototype%': ['WeakMap', 'prototype'],\n\t'%WeakSetPrototype%': ['WeakSet', 'prototype']\n};\n\nvar bind = require('function-bind');\nvar hasOwn = require('hasown');\nvar $concat = bind.call($call, Array.prototype.concat);\nvar $spliceApply = bind.call($apply, Array.prototype.splice);\nvar $replace = bind.call($call, String.prototype.replace);\nvar $strSlice = bind.call($call, String.prototype.slice);\nvar $exec = bind.call($call, RegExp.prototype.exec);\n\n/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */\nvar rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\nvar reEscapeChar = /\\\\(\\\\)?/g; /** Used to match backslashes in property paths. */\nvar stringToPath = function stringToPath(string) {\n\tvar first = $strSlice(string, 0, 1);\n\tvar last = $strSlice(string, -1);\n\tif (first === '%' && last !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected closing `%`');\n\t} else if (last === '%' && first !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected opening `%`');\n\t}\n\tvar result = [];\n\t$replace(string, rePropName, function (match, number, quote, subString) {\n\t\tresult[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;\n\t});\n\treturn result;\n};\n/* end adaptation */\n\nvar getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {\n\tvar intrinsicName = name;\n\tvar alias;\n\tif (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n\t\talias = LEGACY_ALIASES[intrinsicName];\n\t\tintrinsicName = '%' + alias[0] + '%';\n\t}\n\n\tif (hasOwn(INTRINSICS, intrinsicName)) {\n\t\tvar value = INTRINSICS[intrinsicName];\n\t\tif (value === needsEval) {\n\t\t\tvalue = doEval(intrinsicName);\n\t\t}\n\t\tif (typeof value === 'undefined' && !allowMissing) {\n\t\t\tthrow new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');\n\t\t}\n\n\t\treturn {\n\t\t\talias: alias,\n\t\t\tname: intrinsicName,\n\t\t\tvalue: value\n\t\t};\n\t}\n\n\tthrow new $SyntaxError('intrinsic ' + name + ' does not exist!');\n};\n\nmodule.exports = function GetIntrinsic(name, allowMissing) {\n\tif (typeof name !== 'string' || name.length === 0) {\n\t\tthrow new $TypeError('intrinsic name must be a non-empty string');\n\t}\n\tif (arguments.length > 1 && typeof allowMissing !== 'boolean') {\n\t\tthrow new $TypeError('\"allowMissing\" argument must be a boolean');\n\t}\n\n\tif ($exec(/^%?[^%]*%?$/, name) === null) {\n\t\tthrow new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');\n\t}\n\tvar parts = stringToPath(name);\n\tvar intrinsicBaseName = parts.length > 0 ? parts[0] : '';\n\n\tvar intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);\n\tvar intrinsicRealName = intrinsic.name;\n\tvar value = intrinsic.value;\n\tvar skipFurtherCaching = false;\n\n\tvar alias = intrinsic.alias;\n\tif (alias) {\n\t\tintrinsicBaseName = alias[0];\n\t\t$spliceApply(parts, $concat([0, 1], alias));\n\t}\n\n\tfor (var i = 1, isOwn = true; i < parts.length; i += 1) {\n\t\tvar part = parts[i];\n\t\tvar first = $strSlice(part, 0, 1);\n\t\tvar last = $strSlice(part, -1);\n\t\tif (\n\t\t\t(\n\t\t\t\t(first === '\"' || first === \"'\" || first === '`')\n\t\t\t\t|| (last === '\"' || last === \"'\" || last === '`')\n\t\t\t)\n\t\t\t&& first !== last\n\t\t) {\n\t\t\tthrow new $SyntaxError('property names with quotes must have matching quotes');\n\t\t}\n\t\tif (part === 'constructor' || !isOwn) {\n\t\t\tskipFurtherCaching = true;\n\t\t}\n\n\t\tintrinsicBaseName += '.' + part;\n\t\tintrinsicRealName = '%' + intrinsicBaseName + '%';\n\n\t\tif (hasOwn(INTRINSICS, intrinsicRealName)) {\n\t\t\tvalue = INTRINSICS[intrinsicRealName];\n\t\t} else if (value != null) {\n\t\t\tif (!(part in value)) {\n\t\t\t\tif (!allowMissing) {\n\t\t\t\t\tthrow new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');\n\t\t\t\t}\n\t\t\t\treturn void undefined;\n\t\t\t}\n\t\t\tif ($gOPD && (i + 1) >= parts.length) {\n\t\t\t\tvar desc = $gOPD(value, part);\n\t\t\t\tisOwn = !!desc;\n\n\t\t\t\t// By convention, when a data property is converted to an accessor\n\t\t\t\t// property to emulate a data property that does not suffer from\n\t\t\t\t// the override mistake, that accessor's getter is marked with\n\t\t\t\t// an `originalValue` property. Here, when we detect this, we\n\t\t\t\t// uphold the illusion by pretending to see that original data\n\t\t\t\t// property, i.e., returning the value rather than the getter\n\t\t\t\t// itself.\n\t\t\t\tif (isOwn && 'get' in desc && !('originalValue' in desc.get)) {\n\t\t\t\t\tvalue = desc.get;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = value[part];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tisOwn = hasOwn(value, part);\n\t\t\t\tvalue = value[part];\n\t\t\t}\n\n\t\t\tif (isOwn && !skipFurtherCaching) {\n\t\t\t\tINTRINSICS[intrinsicRealName] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn value;\n};\n", "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBindBasic = require('call-bind-apply-helpers');\n\n/** @type {(thisArg: string, searchString: string, position?: number) => number} */\nvar $indexOf = callBindBasic([GetIntrinsic('%String.prototype.indexOf%')]);\n\n/** @type {import('.')} */\nmodule.exports = function callBoundIntrinsic(name, allowMissing) {\n\t/* eslint no-extra-parens: 0 */\n\n\tvar intrinsic = /** @type {(this: unknown, ...args: unknown[]) => unknown} */ (GetIntrinsic(name, !!allowMissing));\n\tif (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {\n\t\treturn callBindBasic(/** @type {const} */ ([intrinsic]));\n\t}\n\treturn intrinsic;\n};\n", "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bound');\nvar inspect = require('object-inspect');\n\nvar $TypeError = require('es-errors/type');\nvar $Map = GetIntrinsic('%Map%', true);\n\n/** @type {<K, V>(thisArg: Map<K, V>, key: K) => V} */\nvar $mapGet = callBound('Map.prototype.get', true);\n/** @type {<K, V>(thisArg: Map<K, V>, key: K, value: V) => void} */\nvar $mapSet = callBound('Map.prototype.set', true);\n/** @type {<K, V>(thisArg: Map<K, V>, key: K) => boolean} */\nvar $mapHas = callBound('Map.prototype.has', true);\n/** @type {<K, V>(thisArg: Map<K, V>, key: K) => boolean} */\nvar $mapDelete = callBound('Map.prototype.delete', true);\n/** @type {<K, V>(thisArg: Map<K, V>) => number} */\nvar $mapSize = callBound('Map.prototype.size', true);\n\n/** @type {import('.')} */\nmodule.exports = !!$Map && /** @type {Exclude<import('.'), false>} */ function getSideChannelMap() {\n\t/** @typedef {ReturnType<typeof getSideChannelMap>} Channel */\n\t/** @typedef {Parameters<Channel['get']>[0]} K */\n\t/** @typedef {Parameters<Channel['set']>[1]} V */\n\n\t/** @type {Map<K, V> | undefined} */ var $m;\n\n\t/** @type {Channel} */\n\tvar channel = {\n\t\tassert: function (key) {\n\t\t\tif (!channel.has(key)) {\n\t\t\t\tthrow new $TypeError('Side channel does not contain ' + inspect(key));\n\t\t\t}\n\t\t},\n\t\t'delete': function (key) {\n\t\t\tif ($m) {\n\t\t\t\tvar result = $mapDelete($m, key);\n\t\t\t\tif ($mapSize($m) === 0) {\n\t\t\t\t\t$m = void undefined;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tget: function (key) { // eslint-disable-line consistent-return\n\t\t\tif ($m) {\n\t\t\t\treturn $mapGet($m, key);\n\t\t\t}\n\t\t},\n\t\thas: function (key) {\n\t\t\tif ($m) {\n\t\t\t\treturn $mapHas($m, key);\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tset: function (key, value) {\n\t\t\tif (!$m) {\n\t\t\t\t// @ts-expect-error TS can't handle narrowing a variable inside a closure\n\t\t\t\t$m = new $Map();\n\t\t\t}\n\t\t\t$mapSet($m, key, value);\n\t\t}\n\t};\n\n\t// @ts-expect-error TODO: figure out why TS is erroring here\n\treturn channel;\n};\n", "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bound');\nvar inspect = require('object-inspect');\nvar getSideChannelMap = require('side-channel-map');\n\nvar $TypeError = require('es-errors/type');\nvar $WeakMap = GetIntrinsic('%WeakMap%', true);\n\n/** @type {<K extends object, V>(thisArg: WeakMap<K, V>, key: K) => V} */\nvar $weakMapGet = callBound('WeakMap.prototype.get', true);\n/** @type {<K extends object, V>(thisArg: WeakMap<K, V>, key: K, value: V) => void} */\nvar $weakMapSet = callBound('WeakMap.prototype.set', true);\n/** @type {<K extends object, V>(thisArg: WeakMap<K, V>, key: K) => boolean} */\nvar $weakMapHas = callBound('WeakMap.prototype.has', true);\n/** @type {<K extends object, V>(thisArg: WeakMap<K, V>, key: K) => boolean} */\nvar $weakMapDelete = callBound('WeakMap.prototype.delete', true);\n\n/** @type {import('.')} */\nmodule.exports = $WeakMap\n\t? /** @type {Exclude<import('.'), false>} */ function getSideChannelWeakMap() {\n\t\t/** @typedef {ReturnType<typeof getSideChannelWeakMap>} Channel */\n\t\t/** @typedef {Parameters<Channel['get']>[0]} K */\n\t\t/** @typedef {Parameters<Channel['set']>[1]} V */\n\n\t\t/** @type {WeakMap<K & object, V> | undefined} */ var $wm;\n\t\t/** @type {Channel | undefined} */ var $m;\n\n\t\t/** @type {Channel} */\n\t\tvar channel = {\n\t\t\tassert: function (key) {\n\t\t\t\tif (!channel.has(key)) {\n\t\t\t\t\tthrow new $TypeError('Side channel does not contain ' + inspect(key));\n\t\t\t\t}\n\t\t\t},\n\t\t\t'delete': function (key) {\n\t\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\t\tif ($wm) {\n\t\t\t\t\t\treturn $weakMapDelete($wm, key);\n\t\t\t\t\t}\n\t\t\t\t} else if (getSideChannelMap) {\n\t\t\t\t\tif ($m) {\n\t\t\t\t\t\treturn $m['delete'](key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tget: function (key) {\n\t\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\t\tif ($wm) {\n\t\t\t\t\t\treturn $weakMapGet($wm, key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn $m && $m.get(key);\n\t\t\t},\n\t\t\thas: function (key) {\n\t\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\t\tif ($wm) {\n\t\t\t\t\t\treturn $weakMapHas($wm, key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn !!$m && $m.has(key);\n\t\t\t},\n\t\t\tset: function (key, value) {\n\t\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\t\tif (!$wm) {\n\t\t\t\t\t\t$wm = new $WeakMap();\n\t\t\t\t\t}\n\t\t\t\t\t$weakMapSet($wm, key, value);\n\t\t\t\t} else if (getSideChannelMap) {\n\t\t\t\t\tif (!$m) {\n\t\t\t\t\t\t$m = getSideChannelMap();\n\t\t\t\t\t}\n\t\t\t\t\t// eslint-disable-next-line no-extra-parens\n\t\t\t\t\t/** @type {NonNullable<typeof $m>} */ ($m).set(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// @ts-expect-error TODO: figure out why this is erroring\n\t\treturn channel;\n\t}\n\t: getSideChannelMap;\n", "'use strict';\n\nvar $TypeError = require('es-errors/type');\nvar inspect = require('object-inspect');\nvar getSideChannelList = require('side-channel-list');\nvar getSideChannelMap = require('side-channel-map');\nvar getSideChannelWeakMap = require('side-channel-weakmap');\n\nvar makeChannel = getSideChannelWeakMap || getSideChannelMap || getSideChannelList;\n\n/** @type {import('.')} */\nmodule.exports = function getSideChannel() {\n\t/** @typedef {ReturnType<typeof getSideChannel>} Channel */\n\n\t/** @type {Channel | undefined} */ var $channelData;\n\n\t/** @type {Channel} */\n\tvar channel = {\n\t\tassert: function (key) {\n\t\t\tif (!channel.has(key)) {\n\t\t\t\tthrow new $TypeError('Side channel does not contain ' + inspect(key));\n\t\t\t}\n\t\t},\n\t\t'delete': function (key) {\n\t\t\treturn !!$channelData && $channelData['delete'](key);\n\t\t},\n\t\tget: function (key) {\n\t\t\treturn $channelData && $channelData.get(key);\n\t\t},\n\t\thas: function (key) {\n\t\t\treturn !!$channelData && $channelData.has(key);\n\t\t},\n\t\tset: function (key, value) {\n\t\t\tif (!$channelData) {\n\t\t\t\t$channelData = makeChannel();\n\t\t\t}\n\n\t\t\t$channelData.set(key, value);\n\t\t}\n\t};\n\t// @ts-expect-error TODO: figure out why this is erroring\n\treturn channel;\n};\n", "'use strict';\n\nvar replace = String.prototype.replace;\nvar percentTwenties = /%20/g;\n\nvar Format = {\n    RFC1738: 'RFC1738',\n    RFC3986: 'RFC3986'\n};\n\nmodule.exports = {\n    'default': Format.RFC3986,\n    formatters: {\n        RFC1738: function (value) {\n            return replace.call(value, percentTwenties, '+');\n        },\n        RFC3986: function (value) {\n            return String(value);\n        }\n    },\n    RFC1738: Format.RFC1738,\n    RFC3986: Format.RFC3986\n};\n", "'use strict';\n\nvar formats = require('./formats');\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\n\nvar hexTable = (function () {\n    var array = [];\n    for (var i = 0; i < 256; ++i) {\n        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());\n    }\n\n    return array;\n}());\n\nvar compactQueue = function compactQueue(queue) {\n    while (queue.length > 1) {\n        var item = queue.pop();\n        var obj = item.obj[item.prop];\n\n        if (isArray(obj)) {\n            var compacted = [];\n\n            for (var j = 0; j < obj.length; ++j) {\n                if (typeof obj[j] !== 'undefined') {\n                    compacted.push(obj[j]);\n                }\n            }\n\n            item.obj[item.prop] = compacted;\n        }\n    }\n};\n\nvar arrayToObject = function arrayToObject(source, options) {\n    var obj = options && options.plainObjects ? { __proto__: null } : {};\n    for (var i = 0; i < source.length; ++i) {\n        if (typeof source[i] !== 'undefined') {\n            obj[i] = source[i];\n        }\n    }\n\n    return obj;\n};\n\nvar merge = function merge(target, source, options) {\n    /* eslint no-param-reassign: 0 */\n    if (!source) {\n        return target;\n    }\n\n    if (typeof source !== 'object' && typeof source !== 'function') {\n        if (isArray(target)) {\n            target.push(source);\n        } else if (target && typeof target === 'object') {\n            if (\n                (options && (options.plainObjects || options.allowPrototypes))\n                || !has.call(Object.prototype, source)\n            ) {\n                target[source] = true;\n            }\n        } else {\n            return [target, source];\n        }\n\n        return target;\n    }\n\n    if (!target || typeof target !== 'object') {\n        return [target].concat(source);\n    }\n\n    var mergeTarget = target;\n    if (isArray(target) && !isArray(source)) {\n        mergeTarget = arrayToObject(target, options);\n    }\n\n    if (isArray(target) && isArray(source)) {\n        source.forEach(function (item, i) {\n            if (has.call(target, i)) {\n                var targetItem = target[i];\n                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {\n                    target[i] = merge(targetItem, item, options);\n                } else {\n                    target.push(item);\n                }\n            } else {\n                target[i] = item;\n            }\n        });\n        return target;\n    }\n\n    return Object.keys(source).reduce(function (acc, key) {\n        var value = source[key];\n\n        if (has.call(acc, key)) {\n            acc[key] = merge(acc[key], value, options);\n        } else {\n            acc[key] = value;\n        }\n        return acc;\n    }, mergeTarget);\n};\n\nvar assign = function assignSingleSource(target, source) {\n    return Object.keys(source).reduce(function (acc, key) {\n        acc[key] = source[key];\n        return acc;\n    }, target);\n};\n\nvar decode = function (str, defaultDecoder, charset) {\n    var strWithoutPlus = str.replace(/\\+/g, ' ');\n    if (charset === 'iso-8859-1') {\n        // unescape never throws, no try...catch needed:\n        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\n    }\n    // utf-8\n    try {\n        return decodeURIComponent(strWithoutPlus);\n    } catch (e) {\n        return strWithoutPlus;\n    }\n};\n\nvar limit = 1024;\n\n/* eslint operator-linebreak: [2, \"before\"] */\n\nvar encode = function encode(str, defaultEncoder, charset, kind, format) {\n    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.\n    // It has been adapted here for stricter adherence to RFC 3986\n    if (str.length === 0) {\n        return str;\n    }\n\n    var string = str;\n    if (typeof str === 'symbol') {\n        string = Symbol.prototype.toString.call(str);\n    } else if (typeof str !== 'string') {\n        string = String(str);\n    }\n\n    if (charset === 'iso-8859-1') {\n        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {\n            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';\n        });\n    }\n\n    var out = '';\n    for (var j = 0; j < string.length; j += limit) {\n        var segment = string.length >= limit ? string.slice(j, j + limit) : string;\n        var arr = [];\n\n        for (var i = 0; i < segment.length; ++i) {\n            var c = segment.charCodeAt(i);\n            if (\n                c === 0x2D // -\n                || c === 0x2E // .\n                || c === 0x5F // _\n                || c === 0x7E // ~\n                || (c >= 0x30 && c <= 0x39) // 0-9\n                || (c >= 0x41 && c <= 0x5A) // a-z\n                || (c >= 0x61 && c <= 0x7A) // A-Z\n                || (format === formats.RFC1738 && (c === 0x28 || c === 0x29)) // ( )\n            ) {\n                arr[arr.length] = segment.charAt(i);\n                continue;\n            }\n\n            if (c < 0x80) {\n                arr[arr.length] = hexTable[c];\n                continue;\n            }\n\n            if (c < 0x800) {\n                arr[arr.length] = hexTable[0xC0 | (c >> 6)]\n                    + hexTable[0x80 | (c & 0x3F)];\n                continue;\n            }\n\n            if (c < 0xD800 || c >= 0xE000) {\n                arr[arr.length] = hexTable[0xE0 | (c >> 12)]\n                    + hexTable[0x80 | ((c >> 6) & 0x3F)]\n                    + hexTable[0x80 | (c & 0x3F)];\n                continue;\n            }\n\n            i += 1;\n            c = 0x10000 + (((c & 0x3FF) << 10) | (segment.charCodeAt(i) & 0x3FF));\n\n            arr[arr.length] = hexTable[0xF0 | (c >> 18)]\n                + hexTable[0x80 | ((c >> 12) & 0x3F)]\n                + hexTable[0x80 | ((c >> 6) & 0x3F)]\n                + hexTable[0x80 | (c & 0x3F)];\n        }\n\n        out += arr.join('');\n    }\n\n    return out;\n};\n\nvar compact = function compact(value) {\n    var queue = [{ obj: { o: value }, prop: 'o' }];\n    var refs = [];\n\n    for (var i = 0; i < queue.length; ++i) {\n        var item = queue[i];\n        var obj = item.obj[item.prop];\n\n        var keys = Object.keys(obj);\n        for (var j = 0; j < keys.length; ++j) {\n            var key = keys[j];\n            var val = obj[key];\n            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {\n                queue.push({ obj: obj, prop: key });\n                refs.push(val);\n            }\n        }\n    }\n\n    compactQueue(queue);\n\n    return value;\n};\n\nvar isRegExp = function isRegExp(obj) {\n    return Object.prototype.toString.call(obj) === '[object RegExp]';\n};\n\nvar isBuffer = function isBuffer(obj) {\n    if (!obj || typeof obj !== 'object') {\n        return false;\n    }\n\n    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n};\n\nvar combine = function combine(a, b) {\n    return [].concat(a, b);\n};\n\nvar maybeMap = function maybeMap(val, fn) {\n    if (isArray(val)) {\n        var mapped = [];\n        for (var i = 0; i < val.length; i += 1) {\n            mapped.push(fn(val[i]));\n        }\n        return mapped;\n    }\n    return fn(val);\n};\n\nmodule.exports = {\n    arrayToObject: arrayToObject,\n    assign: assign,\n    combine: combine,\n    compact: compact,\n    decode: decode,\n    encode: encode,\n    isBuffer: isBuffer,\n    isRegExp: isRegExp,\n    maybeMap: maybeMap,\n    merge: merge\n};\n", "'use strict';\n\nvar getSideChannel = require('side-channel');\nvar utils = require('./utils');\nvar formats = require('./formats');\nvar has = Object.prototype.hasOwnProperty;\n\nvar arrayPrefixGenerators = {\n    brackets: function brackets(prefix) {\n        return prefix + '[]';\n    },\n    comma: 'comma',\n    indices: function indices(prefix, key) {\n        return prefix + '[' + key + ']';\n    },\n    repeat: function repeat(prefix) {\n        return prefix;\n    }\n};\n\nvar isArray = Array.isArray;\nvar push = Array.prototype.push;\nvar pushToArray = function (arr, valueOrArray) {\n    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);\n};\n\nvar toISO = Date.prototype.toISOString;\n\nvar defaultFormat = formats['default'];\nvar defaults = {\n    addQueryPrefix: false,\n    allowDots: false,\n    allowEmptyArrays: false,\n    arrayFormat: 'indices',\n    charset: 'utf-8',\n    charsetSentinel: false,\n    commaRoundTrip: false,\n    delimiter: '&',\n    encode: true,\n    encodeDotInKeys: false,\n    encoder: utils.encode,\n    encodeValuesOnly: false,\n    filter: void undefined,\n    format: defaultFormat,\n    formatter: formats.formatters[defaultFormat],\n    // deprecated\n    indices: false,\n    serializeDate: function serializeDate(date) {\n        return toISO.call(date);\n    },\n    skipNulls: false,\n    strictNullHandling: false\n};\n\nvar isNonNullishPrimitive = function isNonNullishPrimitive(v) {\n    return typeof v === 'string'\n        || typeof v === 'number'\n        || typeof v === 'boolean'\n        || typeof v === 'symbol'\n        || typeof v === 'bigint';\n};\n\nvar sentinel = {};\n\nvar stringify = function stringify(\n    object,\n    prefix,\n    generateArrayPrefix,\n    commaRoundTrip,\n    allowEmptyArrays,\n    strictNullHandling,\n    skipNulls,\n    encodeDotInKeys,\n    encoder,\n    filter,\n    sort,\n    allowDots,\n    serializeDate,\n    format,\n    formatter,\n    encodeValuesOnly,\n    charset,\n    sideChannel\n) {\n    var obj = object;\n\n    var tmpSc = sideChannel;\n    var step = 0;\n    var findFlag = false;\n    while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {\n        // Where object last appeared in the ref tree\n        var pos = tmpSc.get(object);\n        step += 1;\n        if (typeof pos !== 'undefined') {\n            if (pos === step) {\n                throw new RangeError('Cyclic object value');\n            } else {\n                findFlag = true; // Break while\n            }\n        }\n        if (typeof tmpSc.get(sentinel) === 'undefined') {\n            step = 0;\n        }\n    }\n\n    if (typeof filter === 'function') {\n        obj = filter(prefix, obj);\n    } else if (obj instanceof Date) {\n        obj = serializeDate(obj);\n    } else if (generateArrayPrefix === 'comma' && isArray(obj)) {\n        obj = utils.maybeMap(obj, function (value) {\n            if (value instanceof Date) {\n                return serializeDate(value);\n            }\n            return value;\n        });\n    }\n\n    if (obj === null) {\n        if (strictNullHandling) {\n            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;\n        }\n\n        obj = '';\n    }\n\n    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {\n        if (encoder) {\n            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);\n            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];\n        }\n        return [formatter(prefix) + '=' + formatter(String(obj))];\n    }\n\n    var values = [];\n\n    if (typeof obj === 'undefined') {\n        return values;\n    }\n\n    var objKeys;\n    if (generateArrayPrefix === 'comma' && isArray(obj)) {\n        // we need to join elements in\n        if (encodeValuesOnly && encoder) {\n            obj = utils.maybeMap(obj, encoder);\n        }\n        objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];\n    } else if (isArray(filter)) {\n        objKeys = filter;\n    } else {\n        var keys = Object.keys(obj);\n        objKeys = sort ? keys.sort(sort) : keys;\n    }\n\n    var encodedPrefix = encodeDotInKeys ? String(prefix).replace(/\\./g, '%2E') : String(prefix);\n\n    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? encodedPrefix + '[]' : encodedPrefix;\n\n    if (allowEmptyArrays && isArray(obj) && obj.length === 0) {\n        return adjustedPrefix + '[]';\n    }\n\n    for (var j = 0; j < objKeys.length; ++j) {\n        var key = objKeys[j];\n        var value = typeof key === 'object' && key && typeof key.value !== 'undefined'\n            ? key.value\n            : obj[key];\n\n        if (skipNulls && value === null) {\n            continue;\n        }\n\n        var encodedKey = allowDots && encodeDotInKeys ? String(key).replace(/\\./g, '%2E') : String(key);\n        var keyPrefix = isArray(obj)\n            ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjustedPrefix, encodedKey) : adjustedPrefix\n            : adjustedPrefix + (allowDots ? '.' + encodedKey : '[' + encodedKey + ']');\n\n        sideChannel.set(object, step);\n        var valueSideChannel = getSideChannel();\n        valueSideChannel.set(sentinel, sideChannel);\n        pushToArray(values, stringify(\n            value,\n            keyPrefix,\n            generateArrayPrefix,\n            commaRoundTrip,\n            allowEmptyArrays,\n            strictNullHandling,\n            skipNulls,\n            encodeDotInKeys,\n            generateArrayPrefix === 'comma' && encodeValuesOnly && isArray(obj) ? null : encoder,\n            filter,\n            sort,\n            allowDots,\n            serializeDate,\n            format,\n            formatter,\n            encodeValuesOnly,\n            charset,\n            valueSideChannel\n        ));\n    }\n\n    return values;\n};\n\nvar normalizeStringifyOptions = function normalizeStringifyOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n\n    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\n        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');\n    }\n\n    if (typeof opts.encodeDotInKeys !== 'undefined' && typeof opts.encodeDotInKeys !== 'boolean') {\n        throw new TypeError('`encodeDotInKeys` option can only be `true` or `false`, when provided');\n    }\n\n    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {\n        throw new TypeError('Encoder has to be a function.');\n    }\n\n    var charset = opts.charset || defaults.charset;\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n\n    var format = formats['default'];\n    if (typeof opts.format !== 'undefined') {\n        if (!has.call(formats.formatters, opts.format)) {\n            throw new TypeError('Unknown format option provided.');\n        }\n        format = opts.format;\n    }\n    var formatter = formats.formatters[format];\n\n    var filter = defaults.filter;\n    if (typeof opts.filter === 'function' || isArray(opts.filter)) {\n        filter = opts.filter;\n    }\n\n    var arrayFormat;\n    if (opts.arrayFormat in arrayPrefixGenerators) {\n        arrayFormat = opts.arrayFormat;\n    } else if ('indices' in opts) {\n        arrayFormat = opts.indices ? 'indices' : 'repeat';\n    } else {\n        arrayFormat = defaults.arrayFormat;\n    }\n\n    if ('commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {\n        throw new TypeError('`commaRoundTrip` must be a boolean, or absent');\n    }\n\n    var allowDots = typeof opts.allowDots === 'undefined' ? opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;\n\n    return {\n        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,\n        allowDots: allowDots,\n        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,\n        arrayFormat: arrayFormat,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        commaRoundTrip: !!opts.commaRoundTrip,\n        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,\n        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,\n        encodeDotInKeys: typeof opts.encodeDotInKeys === 'boolean' ? opts.encodeDotInKeys : defaults.encodeDotInKeys,\n        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,\n        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,\n        filter: filter,\n        format: format,\n        formatter: formatter,\n        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,\n        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,\n        sort: typeof opts.sort === 'function' ? opts.sort : null,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\n\nmodule.exports = function (object, opts) {\n    var obj = object;\n    var options = normalizeStringifyOptions(opts);\n\n    var objKeys;\n    var filter;\n\n    if (typeof options.filter === 'function') {\n        filter = options.filter;\n        obj = filter('', obj);\n    } else if (isArray(options.filter)) {\n        filter = options.filter;\n        objKeys = filter;\n    }\n\n    var keys = [];\n\n    if (typeof obj !== 'object' || obj === null) {\n        return '';\n    }\n\n    var generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat];\n    var commaRoundTrip = generateArrayPrefix === 'comma' && options.commaRoundTrip;\n\n    if (!objKeys) {\n        objKeys = Object.keys(obj);\n    }\n\n    if (options.sort) {\n        objKeys.sort(options.sort);\n    }\n\n    var sideChannel = getSideChannel();\n    for (var i = 0; i < objKeys.length; ++i) {\n        var key = objKeys[i];\n        var value = obj[key];\n\n        if (options.skipNulls && value === null) {\n            continue;\n        }\n        pushToArray(keys, stringify(\n            value,\n            key,\n            generateArrayPrefix,\n            commaRoundTrip,\n            options.allowEmptyArrays,\n            options.strictNullHandling,\n            options.skipNulls,\n            options.encodeDotInKeys,\n            options.encode ? options.encoder : null,\n            options.filter,\n            options.sort,\n            options.allowDots,\n            options.serializeDate,\n            options.format,\n            options.formatter,\n            options.encodeValuesOnly,\n            options.charset,\n            sideChannel\n        ));\n    }\n\n    var joined = keys.join(options.delimiter);\n    var prefix = options.addQueryPrefix === true ? '?' : '';\n\n    if (options.charsetSentinel) {\n        if (options.charset === 'iso-8859-1') {\n            // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n            prefix += 'utf8=%26%2310003%3B&';\n        } else {\n            // encodeURIComponent('✓')\n            prefix += 'utf8=%E2%9C%93&';\n        }\n    }\n\n    return joined.length > 0 ? prefix + joined : '';\n};\n", "'use strict';\n\nvar utils = require('./utils');\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\n\nvar defaults = {\n    allowDots: false,\n    allowEmptyArrays: false,\n    allowPrototypes: false,\n    allowSparse: false,\n    arrayLimit: 20,\n    charset: 'utf-8',\n    charsetSentinel: false,\n    comma: false,\n    decodeDotInKeys: false,\n    decoder: utils.decode,\n    delimiter: '&',\n    depth: 5,\n    duplicates: 'combine',\n    ignoreQueryPrefix: false,\n    interpretNumericEntities: false,\n    parameterLimit: 1000,\n    parseArrays: true,\n    plainObjects: false,\n    strictDepth: false,\n    strictNullHandling: false,\n    throwOnLimitExceeded: false\n};\n\nvar interpretNumericEntities = function (str) {\n    return str.replace(/&#(\\d+);/g, function ($0, numberStr) {\n        return String.fromCharCode(parseInt(numberStr, 10));\n    });\n};\n\nvar parseArrayValue = function (val, options, currentArrayLength) {\n    if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {\n        return val.split(',');\n    }\n\n    if (options.throwOnLimitExceeded && currentArrayLength >= options.arrayLimit) {\n        throw new RangeError('Array limit exceeded. Only ' + options.arrayLimit + ' element' + (options.arrayLimit === 1 ? '' : 's') + ' allowed in an array.');\n    }\n\n    return val;\n};\n\n// This is what browsers will submit when the ✓ character occurs in an\n// application/x-www-form-urlencoded body and the encoding of the page containing\n// the form is iso-8859-1, or when the submitted form has an accept-charset\n// attribute of iso-8859-1. Presumably also with other charsets that do not contain\n// the ✓ character, such as us-ascii.\nvar isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')\n\n// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.\nvar charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')\n\nvar parseValues = function parseQueryStringValues(str, options) {\n    var obj = { __proto__: null };\n\n    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\\?/, '') : str;\n    cleanStr = cleanStr.replace(/%5B/gi, '[').replace(/%5D/gi, ']');\n\n    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;\n    var parts = cleanStr.split(\n        options.delimiter,\n        options.throwOnLimitExceeded ? limit + 1 : limit\n    );\n\n    if (options.throwOnLimitExceeded && parts.length > limit) {\n        throw new RangeError('Parameter limit exceeded. Only ' + limit + ' parameter' + (limit === 1 ? '' : 's') + ' allowed.');\n    }\n\n    var skipIndex = -1; // Keep track of where the utf8 sentinel was found\n    var i;\n\n    var charset = options.charset;\n    if (options.charsetSentinel) {\n        for (i = 0; i < parts.length; ++i) {\n            if (parts[i].indexOf('utf8=') === 0) {\n                if (parts[i] === charsetSentinel) {\n                    charset = 'utf-8';\n                } else if (parts[i] === isoSentinel) {\n                    charset = 'iso-8859-1';\n                }\n                skipIndex = i;\n                i = parts.length; // The eslint settings do not allow break;\n            }\n        }\n    }\n\n    for (i = 0; i < parts.length; ++i) {\n        if (i === skipIndex) {\n            continue;\n        }\n        var part = parts[i];\n\n        var bracketEqualsPos = part.indexOf(']=');\n        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;\n\n        var key;\n        var val;\n        if (pos === -1) {\n            key = options.decoder(part, defaults.decoder, charset, 'key');\n            val = options.strictNullHandling ? null : '';\n        } else {\n            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');\n\n            val = utils.maybeMap(\n                parseArrayValue(\n                    part.slice(pos + 1),\n                    options,\n                    isArray(obj[key]) ? obj[key].length : 0\n                ),\n                function (encodedVal) {\n                    return options.decoder(encodedVal, defaults.decoder, charset, 'value');\n                }\n            );\n        }\n\n        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {\n            val = interpretNumericEntities(String(val));\n        }\n\n        if (part.indexOf('[]=') > -1) {\n            val = isArray(val) ? [val] : val;\n        }\n\n        var existing = has.call(obj, key);\n        if (existing && options.duplicates === 'combine') {\n            obj[key] = utils.combine(obj[key], val);\n        } else if (!existing || options.duplicates === 'last') {\n            obj[key] = val;\n        }\n    }\n\n    return obj;\n};\n\nvar parseObject = function (chain, val, options, valuesParsed) {\n    var currentArrayLength = 0;\n    if (chain.length > 0 && chain[chain.length - 1] === '[]') {\n        var parentKey = chain.slice(0, -1).join('');\n        currentArrayLength = Array.isArray(val) && val[parentKey] ? val[parentKey].length : 0;\n    }\n\n    var leaf = valuesParsed ? val : parseArrayValue(val, options, currentArrayLength);\n\n    for (var i = chain.length - 1; i >= 0; --i) {\n        var obj;\n        var root = chain[i];\n\n        if (root === '[]' && options.parseArrays) {\n            obj = options.allowEmptyArrays && (leaf === '' || (options.strictNullHandling && leaf === null))\n                ? []\n                : utils.combine([], leaf);\n        } else {\n            obj = options.plainObjects ? { __proto__: null } : {};\n            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;\n            var decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, '.') : cleanRoot;\n            var index = parseInt(decodedRoot, 10);\n            if (!options.parseArrays && decodedRoot === '') {\n                obj = { 0: leaf };\n            } else if (\n                !isNaN(index)\n                && root !== decodedRoot\n                && String(index) === decodedRoot\n                && index >= 0\n                && (options.parseArrays && index <= options.arrayLimit)\n            ) {\n                obj = [];\n                obj[index] = leaf;\n            } else if (decodedRoot !== '__proto__') {\n                obj[decodedRoot] = leaf;\n            }\n        }\n\n        leaf = obj;\n    }\n\n    return leaf;\n};\n\nvar parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {\n    if (!givenKey) {\n        return;\n    }\n\n    // Transform dot notation to bracket notation\n    var key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, '[$1]') : givenKey;\n\n    // The regex chunks\n\n    var brackets = /(\\[[^[\\]]*])/;\n    var child = /(\\[[^[\\]]*])/g;\n\n    // Get the parent\n\n    var segment = options.depth > 0 && brackets.exec(key);\n    var parent = segment ? key.slice(0, segment.index) : key;\n\n    // Stash the parent if it exists\n\n    var keys = [];\n    if (parent) {\n        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties\n        if (!options.plainObjects && has.call(Object.prototype, parent)) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n\n        keys.push(parent);\n    }\n\n    // Loop through children appending to the array until we hit depth\n\n    var i = 0;\n    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {\n        i += 1;\n        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n        keys.push(segment[1]);\n    }\n\n    // If there's a remainder, check strictDepth option for throw, else just add whatever is left\n\n    if (segment) {\n        if (options.strictDepth === true) {\n            throw new RangeError('Input depth exceeded depth option of ' + options.depth + ' and strictDepth is true');\n        }\n        keys.push('[' + key.slice(segment.index) + ']');\n    }\n\n    return parseObject(keys, val, options, valuesParsed);\n};\n\nvar normalizeParseOptions = function normalizeParseOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n\n    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\n        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');\n    }\n\n    if (typeof opts.decodeDotInKeys !== 'undefined' && typeof opts.decodeDotInKeys !== 'boolean') {\n        throw new TypeError('`decodeDotInKeys` option can only be `true` or `false`, when provided');\n    }\n\n    if (opts.decoder !== null && typeof opts.decoder !== 'undefined' && typeof opts.decoder !== 'function') {\n        throw new TypeError('Decoder has to be a function.');\n    }\n\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n\n    if (typeof opts.throwOnLimitExceeded !== 'undefined' && typeof opts.throwOnLimitExceeded !== 'boolean') {\n        throw new TypeError('`throwOnLimitExceeded` option must be a boolean');\n    }\n\n    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;\n\n    var duplicates = typeof opts.duplicates === 'undefined' ? defaults.duplicates : opts.duplicates;\n\n    if (duplicates !== 'combine' && duplicates !== 'first' && duplicates !== 'last') {\n        throw new TypeError('The duplicates option must be either combine, first, or last');\n    }\n\n    var allowDots = typeof opts.allowDots === 'undefined' ? opts.decodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;\n\n    return {\n        allowDots: allowDots,\n        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,\n        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,\n        allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,\n        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,\n        decodeDotInKeys: typeof opts.decodeDotInKeys === 'boolean' ? opts.decodeDotInKeys : defaults.decodeDotInKeys,\n        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,\n        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,\n        // eslint-disable-next-line no-implicit-coercion, no-extra-parens\n        depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults.depth,\n        duplicates: duplicates,\n        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,\n        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,\n        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,\n        parseArrays: opts.parseArrays !== false,\n        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,\n        strictDepth: typeof opts.strictDepth === 'boolean' ? !!opts.strictDepth : defaults.strictDepth,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling,\n        throwOnLimitExceeded: typeof opts.throwOnLimitExceeded === 'boolean' ? opts.throwOnLimitExceeded : false\n    };\n};\n\nmodule.exports = function (str, opts) {\n    var options = normalizeParseOptions(opts);\n\n    if (str === '' || str === null || typeof str === 'undefined') {\n        return options.plainObjects ? { __proto__: null } : {};\n    }\n\n    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;\n    var obj = options.plainObjects ? { __proto__: null } : {};\n\n    // Iterate over the keys and setup the new object\n\n    var keys = Object.keys(tempObj);\n    for (var i = 0; i < keys.length; ++i) {\n        var key = keys[i];\n        var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');\n        obj = utils.merge(obj, newObj, options);\n    }\n\n    if (options.allowSparse === true) {\n        return obj;\n    }\n\n    return utils.compact(obj);\n};\n", "'use strict';\n\nvar stringify = require('./stringify');\nvar parse = require('./parse');\nvar formats = require('./formats');\n\nmodule.exports = {\n    formats: formats,\n    parse: parse,\n    stringify: stringify\n};\n", "\"use strict\"\n/**\n * MedusaError is the base error for every other MedusaError\n */\nexport default class MedusaError extends Error {\n  constructor() {\n    super()\n  }\n\n  public static factory(type: ErrorType): MedusaError {\n    switch (type) {\n      case ErrorType.INVALID_REQUEST:\n        return new MedusaInvalidRequestError()\n      case ErrorType.AUTHENTICATION:\n        return new MedusaAuthenticationError()\n      case ErrorType.API:\n        return new MedusaAPIError()\n      case ErrorType.PERMISSION:\n        return new MedusaPermissionError()\n      case ErrorType.CONNECTION:\n        return new MedusaConnectionError()\n    }\n  }\n}\n\nenum ErrorType {\n  \"INVALID_REQUEST\",\n  \"API\",\n  \"AUTHENTICATION\",\n  \"PERMISSION\",\n  \"CONNECTION\",\n}\n\n/**\n * MedusaInvalidRequestError is raised when a request as invalid parameters.\n */\nexport class MedusaInvalidRequestError extends MedusaError {}\n\n/**\n * MedusaAPIError is raised in case no other type cover the problem\n */\nexport class MedusaAPIError extends MedusaError {}\n\n/**\n * MedusaAuthenticationError is raised when invalid credentials is used to connect to Medusa\n */\nexport class MedusaAuthenticationError extends MedusaError {}\n\n/**\n * MedusaPermissionError is raised when attempting to access a resource without permissions\n */\nexport class MedusaPermissionError extends MedusaError {}\n\n/**\n * MedusaConnectionError is raised when the Medusa servers can't be reached.\n */\nexport class MedusaConnectionError extends MedusaError {}\n", "/**\n * `KeyManager` holds API keys in state.\n */\nclass KeyManager {\n  private publishableApiKey: string | null = null\n\n  /**\n   * Set a publishable api key to be sent with each request.\n   */\n  public registerPublishableApiKey(key: string) {\n    this.publishableApiKey = key\n  }\n\n  /**\n   * Retrieve the publishable api key.\n   */\n  public getPublishableApiKey() {\n    return this.publishableApiKey\n  }\n}\n\n/**\n * Export singleton instance.\n */\nexport default new KeyManager()\n", "import axios, {\n  AxiosAdapter,\n  AxiosError,\n  AxiosInstance,\n  AxiosRequestHeaders,\n} from \"axios\"\nimport * as rax from \"retry-axios\"\nimport { v4 as uuidv4 } from \"uuid\"\n\nimport KeyManager from \"./key-manager\"\nimport JwtTokenManager from \"./jwt-token-manager\"\n\nconst unAuthenticatedAdminEndpoints = {\n  \"/admin/auth\": \"POST\",\n  \"/admin/users/password-token\": \"POST\",\n  \"/admin/users/reset-password\": \"POST\",\n  \"/admin/invites/accept\": \"POST\",\n}\n\nexport interface Config {\n  baseUrl: string\n  maxRetries: number\n  apiKey?: string\n  publishableApiKey?: string\n  customHeaders?: Record<string, any>\n  axiosAdapter?: AxiosAdapter\n}\n\n/**\n * @interface\n *\n * Options to pass to requests sent to custom API Routes\n */\nexport interface RequestOptions {\n  /**\n   * The number of milliseconds before the request times out.\n   */\n  timeout?: number\n  /**\n   * The number of times to retry a request before failing.\n   */\n  numberOfRetries?: number\n}\n\nexport type RequestMethod = \"DELETE\" | \"POST\" | \"GET\"\n\nconst defaultConfig = {\n  maxRetries: 0,\n  baseUrl: \"http://localhost:9000\",\n}\n\nclass Client {\n  private axiosClient: AxiosInstance\n  private config: Config\n\n  constructor(config: Config) {\n    /** @private @constant {AxiosInstance} */\n    this.axiosClient = this.createClient({ ...defaultConfig, ...config })\n\n    /** @private @constant {Config} */\n    this.config = { ...defaultConfig, ...config }\n  }\n\n  shouldRetryCondition(\n    err: AxiosError,\n    numRetries: number,\n    maxRetries: number\n  ): boolean {\n    // Obviously, if we have reached max. retries we stop\n    if (numRetries >= maxRetries) {\n      return false\n    }\n\n    // If no response, we assume a connection error and retry\n    if (!err.response) {\n      return true\n    }\n\n    // Retry on conflicts\n    if (err.response.status === 409) {\n      return true\n    }\n\n    // All 5xx errors are retried\n    // OBS: We are currently not retrying 500 requests, since our core needs proper error handling.\n    //      At the moment, 500 will be returned on all errors, that are not of type MedusaError.\n    if (err.response.status > 500 && err.response.status <= 599) {\n      return true\n    }\n\n    return false\n  }\n\n  // Stolen from https://github.com/stripe/stripe-node/blob/fd0a597064289b8c82f374f4747d634050739043/lib/utils.js#L282\n  normalizeHeaders(obj: object): Record<string, any> {\n    if (!(obj && typeof obj === \"object\")) {\n      return obj\n    }\n\n    return Object.keys(obj).reduce((result, header) => {\n      result[this.normalizeHeader(header)] = obj[header]\n      return result\n    }, {})\n  }\n\n  // Stolen from https://github.com/marten-de-vries/header-case-normalizer/blob/master/index.js#L36-L41\n  normalizeHeader(header: string): string {\n    return header\n      .split(\"-\")\n      .map(\n        (text) => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase()\n      )\n      .join(\"-\")\n  }\n\n  requiresAuthentication(path, method): boolean {\n    return (\n      path.startsWith(\"/admin\") &&\n      unAuthenticatedAdminEndpoints[path] !== method\n    )\n  }\n\n  /**\n   * Creates all the initial headers.\n   * We add the idempotency key, if the request is configured to retry.\n   * @param {object} userHeaders user supplied headers\n   * @param {Types.RequestMethod} method request method\n   * @param {string} path request path\n   * @param {object} customHeaders user supplied headers\n   * @return {object}\n   */\n  setHeaders(\n    userHeaders: RequestOptions,\n    method: RequestMethod,\n    path: string,\n    customHeaders: Record<string, any> = {}\n  ): AxiosRequestHeaders {\n    let defaultHeaders: Record<string, any> = {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    }\n\n    if (this.config.apiKey && this.requiresAuthentication(path, method)) {\n      defaultHeaders = {\n        ...defaultHeaders,\n        \"x-medusa-access-token\": this.config.apiKey,\n      }\n    }\n\n    const domain: \"admin\" | \"store\" = path.includes(\"admin\") ? \"admin\" : \"store\"\n\n    if (JwtTokenManager.getJwt(domain)) {\n      defaultHeaders = {\n        ...defaultHeaders,\n        Authorization: `Bearer ${JwtTokenManager.getJwt(domain)}`,\n      }\n    }\n\n    const publishableApiKey =\n      this.config.publishableApiKey || KeyManager.getPublishableApiKey()\n\n    if (publishableApiKey) {\n      defaultHeaders[\"x-publishable-api-key\"] = publishableApiKey\n    }\n\n    // only add idempotency key, if we want to retry\n    if (this.config.maxRetries > 0 && method === \"POST\") {\n      defaultHeaders[\"Idempotency-Key\"] = uuidv4()\n    }\n\n    return Object.assign(\n      {},\n      defaultHeaders,\n      this.normalizeHeaders(userHeaders),\n      customHeaders\n    )\n  }\n\n  /**\n   * Creates the axios client used for requests\n   * As part of the creation, we configure the retry conditions\n   * and the exponential backoff approach.\n   * @param {Config} config user supplied configurations\n   * @return {AxiosInstance}\n   */\n  createClient(config: Config): AxiosInstance {\n    const client = axios.create({\n      baseURL: config.baseUrl,\n      adapter: config.axiosAdapter,\n    })\n\n    rax.attach(client)\n\n    client.defaults.raxConfig = {\n      instance: client,\n      retry: config.maxRetries,\n      backoffType: \"exponential\",\n      shouldRetry: (err: AxiosError): boolean => {\n        const cfg = rax.getConfig(err)\n        if (cfg) {\n          return this.shouldRetryCondition(\n            err,\n            cfg.currentRetryAttempt ?? 1,\n            cfg.retry ?? 3\n          )\n        } else {\n          return false\n        }\n      },\n    }\n\n    return client\n  }\n\n  /**\n   * Axios request\n   * @param method request method\n   * @param path request path\n   * @param payload request payload\n   * @param options axios configuration\n   * @param customHeaders custom request headers\n   * @return\n   */\n  async request(\n    method: RequestMethod,\n    path: string,\n    payload: Record<string, any> = {},\n    options: RequestOptions = {},\n    customHeaders: Record<string, any> = {}\n  ): Promise<any> {\n\n    customHeaders = { ...this.config.customHeaders, ...customHeaders }\n\n    const reqOpts = {\n      method,\n      withCredentials: true,\n      url: path,\n      json: true,\n      headers: this.setHeaders(options, method, path, customHeaders),\n    }\n\n    if ([\"POST\", \"DELETE\"].includes(method)) {\n      reqOpts[\"data\"] = payload\n    }\n\n    // e.g. data = { cart: { ... } }, response = { status, headers, ... }\n    const { data, ...response } = await this.axiosClient(reqOpts)\n\n    // e.g. would return an object like of this shape { cart, response }\n    return { ...data, response }\n  }\n}\n\nexport default Client\n", "/**\n * `JwtTokenManager` holds JWT tokens in state.\n */\nclass JwtTokenManager {\n  private adminJwt: string | null = null;\n  private storeJwt: string | null = null;\n\n  /**\n   * Set a store or admin jwt token to be sent with each request.\n   */\n  public registerJwt(token: string, domain: \"admin\" | \"store\") {\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    if (domain === \"admin\") {\n      this.adminJwt = token;\n    } else if (domain === \"store\") {\n      this.storeJwt = token;\n    } else {\n      throw new Error(`'domain' must be wither 'admin' or 'store' received ${domain}`)\n    }\n  }\n\n  /**\n   * Retrieve the store or admin jwt token\n   */\n  public getJwt(domain: \"admin\" | \"store\") {\n    if (typeof window === 'undefined') {\n      return;\n    }\n    \n    if (domain === \"admin\") {\n      return this.adminJwt;\n    } else if (domain === \"store\") {\n      return this.storeJwt;\n    } else {\n      throw new Error(`'domain' must be wither 'admin' or 'store' received ${domain}`)\n    }\n  }\n}\n\n/**\n * Export singleton instance.\n */\nexport default new JwtTokenManager()\n", "import Client from \"../request\"\n\nexport default class BaseResource {\n  public client: Client\n\n  constructor(client: Client) {\n    this.client = client\n  }\n}\n", "import {\n  StoreCustomersRes,\n  StorePostCustomersCustomerAddressesAddressReq,\n  StorePostCustomersCustomerAddressesReq,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\n/**\n * This class is used to send requests to Address API Routes part of the [Store Customer API Routes](https://docs.medusajs.com/v1/api/store#customers_postcustomers). All its method\n * are available in the JS Client under the `medusa.customers.addresses` property.\n * \n * All methods in this class require {@link AuthResource.authenticate | customer authentication}.\n */\nclass AddressesResource extends BaseResource {\n  /**\n   * Add an address to the logged-in customer's saved addresses.\n   * @param {StorePostCustomersCustomerAddressesReq} payload - The address to add.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreCustomersRes>} Resolves to the customer's details, including the customer's addresses in the `shipping_addresses` attribute.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged\n   * medusa.customers.addresses.addAddress({\n   *   address: {\n   *     first_name: \"Celia\",\n   *     last_name: \"Schumm\",\n   *     address_1: \"225 Bednar Curve\",\n   *     city: \"Danielville\",\n   *     country_code: \"US\",\n   *     postal_code: \"85137\",\n   *     phone: \"981-596-6748 x90188\",\n   *     company: \"Wyman LLC\",\n   *     province: \"Georgia\",\n   *   }\n   * })\n   * .then(({ customer }) => {\n   *   console.log(customer.id);\n   * })\n   */\n  addAddress(\n    payload: StorePostCustomersCustomerAddressesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersRes> {\n    const path = `/store/customers/me/addresses`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete an address of the logged-in customer.\n   * @param {string} address_id - The ID of the address to delete.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreCustomersRes>} Resolves to the customer's details, including the customer's addresses in the `shipping_addresses` attribute.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged\n   * medusa.customers.addresses.deleteAddress(addressId)\n   * .then(({ customer }) => {\n   *   console.log(customer.id);\n   * })\n   */\n  deleteAddress(\n    address_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersRes> {\n    const path = `/store/customers/me/addresses/${address_id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Update an address of the logged-in customer.\n   * @param {string} address_id - The address's ID.\n   * @param {StorePostCustomersCustomerAddressesAddressReq} payload - The attributes to update in the address.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreCustomersRes>} Resolves to the customer's details, including the customer's addresses in the `shipping_addresses` attribute.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged\n   * medusa.customers.addresses.updateAddress(addressId, {\n   *   first_name: \"Gina\"\n   * })\n   * .then(({ customer }) => {\n   *   console.log(customer.id);\n   * })\n   */\n  updateAddress(\n    address_id: string,\n    payload: StorePostCustomersCustomerAddressesAddressReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersRes> {\n    const path = `/store/customers/me/addresses/${address_id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AddressesResource\n", "import {\n  StoreGetAuthEmailRes,\n  StorePostAuthReq,\n  StoreAuthRes,\n  StoreBearerAuthRes,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\nimport JwtTokenManager from \"../jwt-token-manager\"\nimport BaseResource from \"./base\"\n\n/**\n * This class is used to send requests to [Store Auth API Routes](https://docs.medusajs.com/v1/api/store#auth). All its method\n * are available in the JS Client under the `medusa.auth` property.\n * \n * The methods in this class allows you to manage a customer's session, such as login or log out.\n * You can send authenticated requests for a customer either using the Cookie header or using the JWT Token.\n * When you log the customer in using the {@link authenticate} method, the JS client will automatically attach the\n * cookie header in all subsequent requests.\n * \n * Related Guide: [How to implement customer profiles in your storefront](https://docs.medusajs.com/v1/modules/customers/storefront/implement-customer-profiles).\n */\nclass AuthResource extends BaseResource {\n  /**\n   * Authenticate a customer using their email and password. If the customer is authenticated successfully, the cookie is automatically attached to subsequent requests sent with the JS Client.\n   * @param {StorePostAuthReq} payload - The credentials of the customer to authenticate.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreAuthRes>} Resolves to the customer's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.auth.authenticate({\n   *   email: \"user@example.com\",\n   *   password: \"user@example.com\"\n   * })\n   * .then(({ customer }) => {\n   *   console.log(customer.id);\n   * })\n   */\n  authenticate(payload: StorePostAuthReq, customHeaders: Record<string, any> = {}): ResponsePromise<StoreAuthRes> {\n    const path = `/store/auth`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Log out the customer and remove their authentication session. This method requires {@link AuthResource.authenticate | customer authentication}.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<void>} Resolves when customer is logged out successfully.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.auth.deleteSession()\n   * .then(() => {\n   *   // customer logged out successfully\n   * })\n   */\n   deleteSession(customHeaders: Record<string, any> = {}): ResponsePromise<void> {\n    const path = `/store/auth`\n    return this.client.request(\"DELETE\", path, {}, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve the details of the logged-in customer. Can also be used to check if there is an authenticated customer.\n   * This method requires {@link AuthResource.authenticate | customer authentication}.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreAuthRes>} Resolves to the customer's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged\n   * medusa.auth.getSession()\n   * .then(({ customer }) => {\n   *   console.log(customer.id);\n   * })\n   */\n  getSession(customHeaders: Record<string, any> = {}): ResponsePromise<StoreAuthRes> {\n    const path = `/store/auth`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Check if the email is already used by another registered customer. Can be used to validate a new customer's email.\n   * @param {string} email - The email to check.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreGetAuthEmailRes>} Resolves to the result of the check.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.auth.exists(\"user@example.com\")\n   */\n  exists(email: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreGetAuthEmailRes> {\n    const path = `/store/auth/${email}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Authenticate the customer and retrieve a JWT token to use for subsequent authenticated requests.\n   * @param {AdminPostAuthReq} payload - The credentials of the customer to authenticate.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreBearerAuthRes>} Resolves to the access token of the customer, if they're authenticated successfully.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.auth.getToken({\n   *   email: 'user@example.com',\n   *   password: 'supersecret'\n   * })\n   * .then(({ access_token }) => {\n   *   console.log(access_token);\n   * })\n   */\n  getToken(\n    payload: StorePostAuthReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreBearerAuthRes> {\n    const path = `/store/auth/token`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n      .then((res) => {\n        JwtTokenManager.registerJwt(res.access_token, \"store\");\n        \n        return res\n      });\n  }\n}\n\nexport default AuthResource\n", "import {\n  StoreCartsRes,\n  StorePostCartsCartLineItemsItemReq,\n  StorePostCartsCartLineItemsReq,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\n/**\n * This class is used to send requests to Line Item API Routes part of the [Store Cart API Routes](https://docs.medusajs.com/v1/api/store#carts). All its method\n * are available in the JS Client under the `medusa.carts.lineItems` property.\n */\nclass LineItemsResource extends BaseResource {\n  /**\n   * Generate a Line Item with a given Product Variant and adds it to the Cart\n   * @param {string} cart_id - The cart's ID.\n   * @param {StorePostCartsCartLineItemsReq} payload - The line item to be created.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreCartsRes>} Resolves to the associated cart's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.carts.lineItems.create(cart_id, {\n   *   variant_id,\n   *   quantity: 1\n   * })\n   * .then(({ cart }) => {\n   *   console.log(cart.id);\n   * })\n   */\n  create(\n    cart_id: string,\n    payload: StorePostCartsCartLineItemsReq,\n    customHeaders: Record<string, any> = {}): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/line-items`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Update a line item's data.\n   * @param {string} cart_id - The ID of the line item's cart.\n   * @param {string} line_id - The ID of the line item to update.\n   * @param {StorePostCartsCartLineItemsItemReq} payload - The data to update in the line item.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreCartsRes>} Resolves to the associated cart's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.carts.lineItems.update(cartId, lineId, {\n   *   quantity: 1\n   * })\n   * .then(({ cart }) => {\n   *   console.log(cart.id);\n   * })\n   */\n  update(\n    cart_id: string,\n    line_id: string,\n    payload: StorePostCartsCartLineItemsItemReq,\n    customHeaders: Record<string, any> = {}): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/line-items/${line_id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a line item from a cart. The payment sessions will be updated and the totals will be recalculated.\n   * @param {string} cart_id - The ID of the line item's cart.\n   * @param {string} line_id - The ID of the line item to delete.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreCartsRes>} Resolves to the associated cart's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.carts.lineItems.delete(cartId, lineId)\n   * .then(({ cart }) => {\n   *   console.log(cart.id);\n   * })\n   */\n  delete(cart_id: string, line_id: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/line-items/${line_id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default LineItemsResource\n", "import {\n  StoreCartsRes,\n  StoreCompleteCartRes,\n  StorePostCartReq,\n  StorePostCartsCartPaymentSessionReq,\n  StorePostCartsCartPaymentSessionUpdateReq,\n  StorePostCartsCartReq,\n  StorePostCartsCartShippingMethodReq,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\nimport LineItemsResource from \"./line-items\"\n\n/**\n * This class is used to send requests to [Store Cart API Routes](https://docs.medusajs.com/v1/api/store#carts). All its method\n * are available in the JS Client under the `medusa.carts` property.\n * \n * A cart is a virtual shopping bag that customers can use to add items they want to purchase.\n * A cart is then used to checkout and place an order.\n * \n * Related Guide: [How to implement cart functionality in your storefront](https://docs.medusajs.com/v1/modules/carts-and-checkout/storefront/implement-cart).\n */\nclass CartsResource extends BaseResource {\n  /**\n   * An instance of {@link LineItemsResource} used to send requests to line-item-related routes part of the [Store Cart API Routes](https://docs.medusajs.com/v1/api/store#carts).\n   */\n  public lineItems = new LineItemsResource(this.client)\n\n  /**\n   * Add a shipping method to the cart. The validation of the `data` field is handled by the fulfillment provider of the chosen shipping option.\n   * @param {string} cart_id - The ID of the cart to add the shipping method to.\n   * @param {StorePostCartsCartShippingMethodReq} payload - The shipping method to add.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreCartsRes>} Resolves to the cart's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.carts.addShippingMethod(cartId, {\n   *   option_id\n   * })\n   * .then(({ cart }) => {\n   *   console.log(cart.id);\n   * })\n   */\n  addShippingMethod(\n    cart_id: string,\n    payload: StorePostCartsCartShippingMethodReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/shipping-methods`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Complete a cart and place an order or create a swap, based on the cart's type. This includes attempting to authorize the cart's payment.\n   * If authorizing the payment requires more action, the cart will not be completed and the order will not be placed or the swap will not be created.\n   * An idempotency key will be generated if none is provided in the header `Idempotency-Key` and added to\n   * the response. If an error occurs during cart completion or the request is interrupted for any reason, the cart completion can be retried by passing the idempotency\n   * key in the `Idempotency-Key` header.\n   * @param {string} cart_id - The ID of the cart to complete.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreCompleteCartRes>} Resolves to the completion details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.carts.complete(cartId)\n   * .then(({ data, type }) => {\n   *   console.log(data.id, type);\n   * })\n   */\n  complete(\n    cart_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCompleteCartRes> {\n    const path = `/store/carts/${cart_id}/complete`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Create a Cart. Although optional, specifying the cart's region and sales channel can affect the cart's pricing and\n   * the products that can be added to the cart respectively. So, make sure to set those early on and change them if necessary, such as when the customer changes their region.\n   * If a customer is logged in, make sure to pass its ID or email within the cart's details so that the cart is attached to the customer.\n   * @param {StorePostCartReq} payload - The cart to create.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreCartsRes>} Resolves to the created cart's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.carts.create()\n   * .then(({ cart }) => {\n   *   console.log(cart.id);\n   * })\n   */\n  create(\n    payload?: StorePostCartReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Create Payment Sessions for each of the available Payment Providers in the Cart's Region. If there's only one payment session created,\n   * it will be selected by default. The creation of the payment session uses the payment provider and may require sending requests to third-party services.\n   * @param {string} cart_id - The ID of the cart to create the payment sessions for.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreCartsRes>} Resolves to the cart's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.carts.createPaymentSessions(cartId)\n   * .then(({ cart }) => {\n   *   console.log(cart.id);\n   * })\n   */\n  createPaymentSessions(\n    cart_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/payment-sessions`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Remove a Discount from a Cart. This only removes the application of the discount, and not completely deletes it. The totals will be re-calculated and the payment sessions\n   * will be refreshed after the removal.\n   * @param {string} cart_id - the ID of the cart to remove the discount from.\n   * @param {string} code - The code of the discount to remove from the cart.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreCartsRes>} Resolves to the cart's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.carts.deleteDiscount(cartId, code)\n   * .then(({ cart }) => {\n   *   console.log(cart.id);\n   * })\n   */\n  deleteDiscount(\n    cart_id: string,\n    code: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/discounts/${code}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Delete a Payment Session in a Cart. May be useful if a payment has failed. The totals will be recalculated.\n   * @param {string} cart_id - The ID of the cart to delete the payment session from.\n   * @param {string} provider_id - The ID of the payment provider that the session is associated with.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreCartsRes>} Resolves to the cart's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.carts.deletePaymentSession(cartId, \"manual\")\n   * .then(({ cart }) => {\n   *   console.log(cart.id);\n   * })\n   */\n  deletePaymentSession(\n    cart_id: string,\n    provider_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/payment-sessions/${provider_id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Refresh a Payment Session to ensure that it is in sync with the Cart. This is usually not necessary, but is provided for edge cases.\n   * @param {string} cart_id - The ID of the cart to refresh its payment session.\n   * @param {string} provider_id - The ID of the payment provider that's associated with the payment session.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreCartsRes>} Resolves to the cart's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.carts.refreshPaymentSession(cartId, \"manual\")\n   * .then(({ cart }) => {\n   *   console.log(cart.id);\n   * })\n   */\n  refreshPaymentSession(\n    cart_id: string,\n    provider_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/payment-sessions/${provider_id}/refresh`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a Cart's details. This includes recalculating its totals.\n   * @param {string} cart_id - The cart's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreCartsRes>} Resolves to the cart's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.carts.retrieve(cartId)\n   * .then(({ cart }) => {\n   *   console.log(cart.id);\n   * })\n   */\n  retrieve(\n    cart_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Select the Payment Session that will be used to complete the cart. This is typically used when the customer chooses their preferred payment method during checkout.\n   * The totals of the cart will be recalculated.\n   * @param {string} cart_id - The cart's ID.\n   * @param {StorePostCartsCartPaymentSessionReq} payload - The associated payment provider.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreCartsRes>} Resolves to the cart's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.carts.setPaymentSession(cartId, {\n   *   provider_id: \"manual\"\n   * })\n   * .then(({ cart }) => {\n   *   console.log(cart.id);\n   * })\n   */\n  setPaymentSession(\n    cart_id: string,\n    payload: StorePostCartsCartPaymentSessionReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/payment-session`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Update a Cart's details. If the cart has payment sessions and the region was not changed, the payment sessions are updated. The cart's totals are also recalculated.\n   * @param {string} cart_id - The cart's ID.\n   * @param {StorePostCartsCartReq} payload - The attributes to update in the cart.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreCartsRes>} Resolves to the cart's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.carts.update(cartId, {\n   *   email: \"user@example.com\"\n   * })\n   * .then(({ cart }) => {\n   *   console.log(cart.id);\n   * })\n   */\n  update(\n    cart_id: string,\n    payload: StorePostCartsCartReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Update a Payment Session with additional data. This can be useful depending on the payment provider used.\n   * All payment sessions are updated and cart totals are recalculated afterwards.\n   * @param {string} cart_id - The cart's ID.\n   * @param {string} provider_id - The ID of the payment provider that the payment session is associated with.\n   * @param {StorePostCartsCartPaymentSessionUpdateReq} payload - The attributes to update in the payment session.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreCartsRes>} Resolves to the cart's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.carts.updatePaymentSession(cartId, \"manual\", {\n   *   data: {\n   * \n   *   }\n   * })\n   * .then(({ cart }) => {\n   *   console.log(cart.id);\n   * })\n   */\n  updatePaymentSession(\n    cart_id: string,\n    provider_id: string,\n    payload: StorePostCartsCartPaymentSessionUpdateReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCartsRes> {\n    const path = `/store/carts/${cart_id}/payment-sessions/${provider_id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default CartsResource\n", "import {\n  StoreCollectionsRes,\n  StoreCollectionsListRes,\n  StoreGetCollectionsParams,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\n/**\n * This class is used to send requests to [Store Product Collection API Routes](https://docs.medusajs.com/v1/api/store#product-collections). All its method\n * are available in the JS Client under the `medusa.collections` property.\n * \n * A product collection is used to organize products for different purposes such as marketing or discount purposes. For example, you can create a Summer Collection.\n * Using the methods in this class, you can list or retrieve a collection's details and products.\n */\nclass CollectionsResource extends BaseResource {\n  /**\n   * Retrieve a product collection's details.\n   * @param {string} id - The ID of the product collection.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreCollectionsRes>} Resolves to the collection's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.collections.retrieve(collectionId)\n   * .then(({ collection }) => {\n   *   console.log(collection.id);\n   * })\n   */\n  retrieve(id: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreCollectionsRes> {\n    const path = `/store/collections/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of product collections. The product collections can be filtered by fields such as `handle` or `created_at` passed in the `query` parameter. \n   * The product collections can also be paginated.\n   * @param {StoreGetCollectionsParams} query - Filters and pagination configurations to apply on the retrieved product collections.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreCollectionsListRes>} Resolves to the list of product collections with pagination fields.\n   * \n   * @example\n   * To list product collections:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.collections.list()\n   * .then(({ collections, limit, offset, count }) => {\n   *   console.log(collections.length);\n   * })\n   * ```\n   * \n   * By default, only the first `10` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.collections.list({\n   *   limit,\n   *   offset\n   * })\n   * .then(({ collections, limit, offset, count }) => {\n   *   console.log(collections.length);\n   * })\n   * ```\n   */\n  list(\n    query?: StoreGetCollectionsParams,\n    customHeaders: Record<string, any> = {}): ResponsePromise<StoreCollectionsListRes> {\n    let path = `/store/collections`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/store/collections?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default CollectionsResource\n", "import {\n  StoreCustomersListOrdersRes,\n  StoreCustomersRes,\n  StoreGetCustomersCustomerOrdersParams,\n  StorePostCustomersCustomerPasswordTokenReq,\n  StorePostCustomersCustomerReq,\n  StorePostCustomersReq,\n  StorePostCustomersResetPasswordReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport AddressesResource from \"./addresses\"\nimport BaseResource from \"./base\"\nimport PaymentMethodsResource from \"./payment-methods\"\n\n/**\n * This class is used to send requests to [Store Customer API Routes](https://docs.medusajs.com/v1/api/store#customers_postcustomers). All its method\n * are available in the JS Client under the `medusa.customers` property.\n * \n * A customer can register and manage their information such as addresses, orders, payment methods, and more.\n * \n * Related Guide: [How to implement customer profiles in your storefront](https://docs.medusajs.com/v1/modules/customers/storefront/implement-customer-profiles).\n */\nclass CustomerResource extends BaseResource {\n  /**\n   * An instance of {@link PaymentMethodsResource} used to send requests to payment-related routes part of the [Store Customer API Routes](https://docs.medusajs.com/v1/api/store#customers_postcustomers).\n   */\n  public paymentMethods = new PaymentMethodsResource(this.client)\n  /**\n   * An instance of {@link AddressesResource} used to send requests to address-related routes part of the [Store Customer API Routes](https://docs.medusajs.com/v1/api/store#customers_postcustomers).\n   */\n  public addresses = new AddressesResource(this.client)\n\n  /**\n   * Register a new customer. This will also automatically authenticate the customer and set their login session in the response Cookie header.\n   * Subsequent requests sent with the JS client are sent with the Cookie session automatically.\n   * @param {StorePostCustomersReq} payload - The details of the customer to be created.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns { ResponsePromise<StoreCustomersRes>} Resolves to the created customer's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.customers.create({\n   *   first_name: \"Alec\",\n   *   last_name: \"Reynolds\",\n   *   email: \"user@example.com\",\n   *   password: \"supersecret\"\n   * })\n   * .then(({ customer }) => {\n   *   console.log(customer.id);\n   * })\n   */\n  create(\n    payload: StorePostCustomersReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersRes> {\n    const path = `/store/customers`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve the logged-in customer's details. This method requires {@link AuthResource.authenticate | customer authentication}.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreCustomersRes>} Resolves to the logged-in customer's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged\n   * medusa.customers.retrieve()\n   * .then(({ customer }) => {\n   *   console.log(customer.id);\n   * })\n   */\n  retrieve(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersRes> {\n    const path = `/store/customers/me`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Update the logged-in customer's details. This method requires {@link AuthResource.authenticate | customer authentication}.\n   * @param {StorePostCustomersCustomerReq} payload - The attributes to update in the logged-in customer.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreCustomersRes>} Resolves to the logged-in customer's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged\n   * medusa.customers.update({\n   *   first_name: \"Laury\"\n   * })\n   * .then(({ customer }) => {\n   *   console.log(customer.id);\n   * })\n   */\n  update(\n    payload: StorePostCustomersCustomerReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersRes> {\n    const path = `/store/customers/me`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of the logged-in customer's orders. The orders can be filtered by fields such as `status` or `fulfillment_status`. The orders can also be paginated.\n   * This method requires {@link AuthResource.authenticate | customer authentication}.\n   * @param {StoreGetCustomersCustomerOrdersParams} params - Filters and pagination configurations to apply on the retrieved orders.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreCustomersListOrdersRes>} Resolves to the list of orders with pagination fields.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged\n   * medusa.customers.listOrders()\n   * .then(({ orders, limit, offset, count }) => {\n   *   console.log(orders);\n   * })\n   */\n  listOrders(\n    params?: StoreGetCustomersCustomerOrdersParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersListOrdersRes> {\n    let path = `/store/customers/me/orders`\n    if (params) {\n      const query = qs.stringify(params)\n      if (query) {\n        path += `?${query}`\n      }\n    }\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Reset a customer's password using a password token created by a previous request using the {@link generatePasswordToken} method. If the password token expired,\n   * you must create a new one.\n   * @param {StorePostCustomersResetPasswordReq} payload - The necessary details to reset the password.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreCustomersRes>} Resolves to the customer's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.customers.resetPassword({\n   *   email: \"user@example.com\",\n   *   password: \"supersecret\",\n   *   token: \"supersecrettoken\"\n   * })\n   * .then(({ customer }) => {\n   *   console.log(customer.id);\n   * })\n   */\n  resetPassword(\n    payload: StorePostCustomersResetPasswordReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersRes> {\n    const path = `/store/customers/password-reset`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Create a reset password token to be used when sending a request with the {@link resetPassword} method. This emits the event `customer.password_reset`. If a notification provider is\n   * installed in the Medusa backend and is configured to handle this event, a notification to the customer, such as an email, may be sent with reset instructions.\n   * @param {StorePostCustomersCustomerPasswordTokenReq} payload - The necessary details to create the reset password token.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise} Resolves when reset password token is created successfully.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.customers.generatePasswordToken({\n   *   email: \"user@example.com\"\n   * })\n   * .then(() => {\n   *   // successful\n   * })\n   * .catch(() => {\n   *   // failed\n   * })\n   */\n  generatePasswordToken(\n    payload: StorePostCustomersCustomerPasswordTokenReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise {\n    const path = `/store/customers/password-token`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default CustomerResource\n", "import { StoreCustomersListPaymentMethodsRes } from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\n/**\n * This class is used to send requests to Payment Method API Routes part of the [Store Customer API Routes](https://docs.medusajs.com/v1/api/store#customers_postcustomers). All its method\n * are available in the JS Client under the `medusa.customers.paymentMethods` property.\n * \n * All methods in this class require {@link AuthResource.authenticate | customer authentication}.\n */\nclass PaymentMethodsResource extends BaseResource {\n  /**\n   * Retrieve the logged-in customer's saved payment methods. This method only works with payment providers created with the deprecated Payment Service interface.\n   * The payment methods are saved using the Payment Service's third-party service, and not on the Medusa backend. So, they're retrieved from the third-party service.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {StoreCustomersListPaymentMethodsRes} Resolves to the customer's payment methods.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged\n   * medusa.customers.paymentMethods.list()\n   * .then(({ payment_methods }) => {\n   *   console.log(payment_methods.length);\n   * })\n   */\n  list(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreCustomersListPaymentMethodsRes> {\n    const path = `/store/customers/me/payment-methods`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default PaymentMethodsResource\n", "import { StoreGiftCardsRes } from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\n/**\n * This class is used to send requests to [Store Gift Card API Routes](https://docs.medusajs.com/v1/api/store#gift-cards). All its method\n * are available in the JS Client under the `medusa.giftCards` property.\n * \n * Customers can use gift cards during checkout to deduct the gift card's balance from the checkout total.\n * The methods in this class allow retrieving a gift card's details by its code. A gift card can be applied to a cart using {@link CartsResource}.\n * \n * Related Guide: [How to use gift cards in a storefront](https://docs.medusajs.com/v1/modules/gift-cards/storefront/use-gift-cards).\n */\nclass GiftCardsResource extends BaseResource {\n  /**\n   * Retrieve a Gift Card's details by its associated unique code.\n   * @param {string} code - The code of the gift card.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreGiftCardsRes>} Resolves to the details of the gift card.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.giftCards.retrieve(code)\n   * .then(({ gift_card }) => {\n   *   console.log(gift_card.id);\n   * })\n   */\n  retrieve(code: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreGiftCardsRes> {\n    const path = `/store/gift-cards/${code}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default GiftCardsResource\n", "import {\n  StoreOrderEditsRes,\n  StorePostOrderEditsOrderEditDecline,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\n/**\n * This class is used to send requests to [Store Order Edits API Routes](https://docs.medusajs.com/v1/api/store#order-edits). All its method\n * are available in the JS Client under the `medusa.orderEdits` property.\n * \n * Order edits are changes made to items in an order such as adding, updating their quantity, or deleting them. Order edits are created by the admin.\n * A customer can review order edit requests created by an admin and confirm or decline them.\n * \n * Related Guide: [How to handle order edits in a storefront](https://docs.medusajs.com/v1/modules/orders/storefront/handle-order-edits).\n */\nclass OrderEditsResource extends BaseResource {\n  /**\n   * Retrieve an Order Edit's details.\n   * @param {string} id - The ID of the order edit.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreOrderEditsRes>} Resolves to the order edit's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.orderEdits.retrieve(orderEditId)\n   * .then(({ order_edit }) => {\n   *   console.log(order_edit.id);\n   * })\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreOrderEditsRes> {\n    const path = `/store/order-edits/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Decline an Order Edit. The changes are not reflected on the original order.\n   * @param {string} id - The ID of the order edit.\n   * @param {StorePostOrderEditsOrderEditDecline} payload - The decline details.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreOrderEditsRes>} Resolves to the order edit's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.orderEdits.decline(orderEditId)\n   * .then(({ order_edit }) => {\n   *   console.log(order_edit.id);\n   * })\n   */\n  decline(\n    id: string,\n    payload: StorePostOrderEditsOrderEditDecline,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreOrderEditsRes> {\n    const path = `/store/order-edits/${id}/decline`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Complete and confirm an Order Edit and reflect its changes on the original order. Any additional payment required must be authorized first using the {@link PaymentCollectionsResource} routes.\n   * @param {string} id - The ID of the order edit.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreOrderEditsRes>} Resolves to the order edit's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.orderEdits.complete(orderEditId)\n   * .then(({ order_edit }) => {\n   *   console.log(order_edit.id)\n   * })\n   */\n  complete(id: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreOrderEditsRes> {\n    const path = `/store/order-edits/${id}/complete`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default OrderEditsResource\n", "import {\n  StoreGetOrdersParams,\n  StoreOrdersRes,\n  StorePostCustomersCustomerAcceptClaimReq,\n  StorePostCustomersCustomerOrderClaimReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\n/**\n * This class is used to send requests to [Store Order API Routes](https://docs.medusajs.com/v1/api/store#orders). All its method\n * are available in the JS Client under the `medusa.orders` property.\n * \n * Orders are purchases made by customers, typically through a storefront.\n * Orders are placed and created using {@link CartsResource}. The methods in this class allow retrieving and claiming orders.\n * \n * Related Guide: [How to retrieve order details in a storefront](https://docs.medusajs.com/v1/modules/orders/storefront/retrieve-order-details).\n */\nclass OrdersResource extends BaseResource {\n  /**\n   * Retrieve an Order's details.\n   * @param {string} id - The order's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreOrdersRes>} Resolves to the details of the order.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.orders.retrieve(orderId)\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreOrdersRes> {\n    const path = `/store/orders/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve an order's details by the ID of the cart that was used to create the order.\n   * @param {string} cart_id - The cart's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreOrdersRes>} Resolves to the details of the order.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.orders.retrieveByCartId(cartId)\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  retrieveByCartId(\n    cart_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreOrdersRes> {\n    const path = `/store/orders/cart/${cart_id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Look up an order using filters. If the filters don't narrow down the results to a single order, a `404` response is returned with no orders.\n   * @param {StoreGetOrdersParams} payload - Filters used to retrieve the order.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreOrdersRes>} Resolves to the details of the order.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.orders.lookupOrder({\n   *   display_id: 1,\n   *   email: \"user@example.com\"\n   * })\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  lookupOrder(\n    payload: StoreGetOrdersParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreOrdersRes> {\n    let path = `/store/orders?`\n\n    const queryString = qs.stringify(payload)\n    path = `/store/orders?${queryString}`\n\n    return this.client.request(\"GET\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Allow the logged-in customer to claim ownership of one or more orders. This generates a token that can be used later on to verify the claim using the {@link confirmRequest} method.\n   * This also emits the event `order-update-token.created`. So, if you have a notification provider installed that handles this event and sends the customer a notification, such as an email,\n   * the customer should receive instructions on how to finalize their claim ownership.\n   * @param {StorePostCustomersCustomerOrderClaimReq} payload - The orders to claim.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise} Resolves when the request is created successfully.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.orders.requestCustomerOrders({\n   *   order_ids,\n   * })\n   * .then(() => {\n   *   // successful\n   * })\n   * .catch(() => {\n   *   // an error occurred\n   * })\n   */\n  requestCustomerOrders(\n    payload: StorePostCustomersCustomerOrderClaimReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise {\n    const path = `/store/orders/batch/customer/token`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Verify the claim order token provided to the customer when they request ownership of an order.\n   * @param {StorePostCustomersCustomerAcceptClaimReq} payload - The claim order to verify.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise} Resolves when the claim order is verified successfully.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.orders.confirmRequest(\n   *   token,\n   * )\n   * .then(() => {\n   *   // successful\n   * })\n   * .catch(() => {\n   *   // an error occurred\n   * })\n   */\n  confirmRequest(\n    payload: StorePostCustomersCustomerAcceptClaimReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise {\n    const path = `/store/orders/customer/confirm`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default OrdersResource\n", "import {\n  StoreGetPaymentCollectionsParams,\n  StorePaymentCollectionSessionsReq,\n  StorePaymentCollectionsRes,\n  StorePaymentCollectionsSessionRes,\n  StorePostPaymentCollectionsBatchSessionsAuthorizeReq,\n  StorePostPaymentCollectionsBatchSessionsReq,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\nimport qs from \"qs\"\n\n/**\n * This class is used to send requests to [Store Payment Collection API Routes](https://docs.medusajs.com/v1/api/store#payment-collections). All its method\n * are available in the JS Client under the `medusa.paymentCollections` property.\n * \n * A payment collection is useful for managing additional payments, such as for Order Edits, or installment payments.\n */\nclass PaymentCollectionsResource extends BaseResource {\n\n  /**\n   * Retrieve a Payment Collection's details.\n   * @param {string} id - The ID of the payment collection.\n   * @param {StoreGetPaymentCollectionsParams} query - Configurations to apply on the retrieved payment collection.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StorePaymentCollectionsRes>} Resolves to the payment collection's details.\n   * \n   * @example\n   * A simple example that retrieves a payment collection by its ID:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.paymentCollections.retrieve(paymentCollectionId)\n   * .then(({ payment_collection }) => {\n   *   console.log(payment_collection.id)\n   * })\n   * ```\n   * \n   * To specify relations that should be retrieved:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.paymentCollections.retrieve(paymentCollectionId, {\n   *   expand: \"region\"\n   * })\n   * .then(({ payment_collection }) => {\n   *   console.log(payment_collection.id)\n   * })\n   * ```\n   */\n  retrieve(\n    id: string,\n    query?: StoreGetPaymentCollectionsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StorePaymentCollectionsRes> {\n    let path = `/store/payment-collections/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Authorize a Payment Session of a Payment Collection.\n   * @param {string} id  - The ID of the payment collection.\n   * @param {string} session_id - The ID of the payment session.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StorePaymentCollectionsRes>} Resolves to the payment collection's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.paymentCollections.authorize(paymentId, sessionId)\n   * .then(({ payment_collection }) => {\n   *   console.log(payment_collection.id);\n   * })\n   */\n  authorizePaymentSession(\n    id: string,\n    session_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StorePaymentCollectionsRes> {\n    const path = `/store/payment-collections/${id}/sessions/${session_id}/authorize`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Authorize the Payment Sessions of a Payment Collection.\n   * @param {string} id - The ID of the payment collection.\n   * @param {StorePostPaymentCollectionsBatchSessionsAuthorizeReq} payload - The list of payment session IDs to authorize.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StorePaymentCollectionsRes>} Resolves to the payment collection's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.paymentCollections.authorizePaymentSessionsBatch(paymentCollectionId, {\n   *  session_ids: [\"ps_123456\"]\n   * })\n   * .then(({ payment_collection }) => {\n   *   console.log(payment_collection.id);\n   * })\n   */\n  authorizePaymentSessionsBatch(\n    id: string,\n    payload: StorePostPaymentCollectionsBatchSessionsAuthorizeReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StorePaymentCollectionsRes> {\n    const path = `/store/payment-collections/${id}/sessions/batch/authorize`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Create, update, or delete a list of payment sessions of a Payment Collections. If a payment session is not provided in the `sessions` array, it's deleted.\n   * @param {string} id - The ID of the payment collection.\n   * @param {StorePostPaymentCollectionsBatchSessionsReq} payload - The attributes of each session to update.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StorePaymentCollectionsRes>} Resolves to the payment collection's details.\n   * \n   * @example\n   * To add two new payment sessions:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   *\n   * // Total amount = 10000\n   * medusa.paymentCollections.managePaymentSessionsBatch(paymentId, {\n   *   sessions: [\n   *     {\n   *       provider_id: \"stripe\",\n   *       amount: 5000,\n   *     },\n   *     {\n   *       provider_id: \"manual\",\n   *       amount: 5000,\n   *     },\n   *   ]\n   * })\n   * .then(({ payment_collection }) => {\n   *   console.log(payment_collection.id);\n   * })\n   * ```\n   * \n   * To update a payment session and another one by not including it in the payload:\n   * \n   * ```ts\n   * medusa.paymentCollections.managePaymentSessionsBatch(paymentId, {\n   *   sessions: [\n   *     {\n   *       provider_id: \"stripe\",\n   *       amount: 10000,\n   *       session_id: \"ps_123456\"\n   *     },\n   *   ]\n   * })\n   * .then(({ payment_collection }) => {\n   *   console.log(payment_collection.id);\n   * })\n   * ```\n   */\n  managePaymentSessionsBatch(\n    id: string,\n    payload: StorePostPaymentCollectionsBatchSessionsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StorePaymentCollectionsRes> {\n    const path = `/store/payment-collections/${id}/sessions/batch`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Create a Payment Session for a payment provider in a Payment Collection.\n   * @param {string} id - The ID of the payment collection.\n   * @param {StorePaymentCollectionSessionsReq} payload - The payment session to create.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StorePaymentCollectionsRes>} Resolves to the payment collection's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.paymentCollections.managePaymentSession(payment_id, { provider_id: \"stripe\" })\n   * .then(({ payment_collection }) => {\n   *   console.log(payment_collection.id);\n   * })\n   */\n  managePaymentSession(\n    id: string,\n    payload: StorePaymentCollectionSessionsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StorePaymentCollectionsRes> {\n    const path = `/store/payment-collections/${id}/sessions`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Refresh a Payment Session's data to ensure that it is in sync with the Payment Collection.\n   * @param {string} id - The ID of the payment collection. \n   * @param {string} session_id - The ID of the payment session.\n   * @param customHeaders \n   * @returns {ResponsePromise<StorePaymentCollectionsSessionRes>} Resolves to the refreshed payment session's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.paymentCollections.refreshPaymentSession(paymentCollectionId, sessionId)\n   * .then(({ payment_session }) => {\n   *   console.log(payment_session.status);\n   * })\n   */\n  refreshPaymentSession(\n    id: string,\n    session_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StorePaymentCollectionsSessionRes> {\n    const path = `/store/payment-collections/${id}/sessions/${session_id}`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default PaymentCollectionsResource\n", "import {\n  StoreGetProductCategoriesParams,\n  StoreGetProductCategoriesRes,\n  StoreGetProductCategoriesCategoryParams,\n  StoreGetProductCategoriesCategoryRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\n/**\n * This class is used to send requests to [Store Product Category API Routes](https://docs.medusajs.com/v1/api/store#product-categories_getproductcategories). All its method\n * are available in the JS Client under the `medusa.productCategories` property.\n * \n * Products can be categoriezed into categories. A product can be associated more than one category.\n * Using the methods in this class, you can list or retrieve a category's details and products.\n * \n * Related Guide: [How to use product categories in a storefront](https://docs.medusajs.com/v1/modules/products/storefront/use-categories).\n * \n * @featureFlag product_categories\n */\nclass ProductCategoriesResource extends BaseResource {\n  /**\n   * Retrieve a Product Category's details.\n   * @param {string} id - The ID of the product category.\n   * @param {StoreGetProductCategoriesCategoryParams} query - Configurations to apply on the retrieved product categories.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreGetProductCategoriesCategoryRes>} Resolves to the product category's details.\n   * \n   * @example\n   * A simple example that retrieves a product category by its ID:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.productCategories.retrieve(productCategoryId)\n   * .then(({ product_category }) => {\n   *   console.log(product_category.id);\n   * })\n   * ```\n   * \n   * To specify relations that should be retrieved:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.productCategories.retrieve(productCategoryId, {\n   *   expand: \"products\"\n   * })\n   * .then(({ product_category }) => {\n   *   console.log(product_category.id);\n   * })\n   * ```\n   */\n  retrieve(\n    id: string,\n    query?: StoreGetProductCategoriesCategoryParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreGetProductCategoriesCategoryRes> {\n    let path = `/store/product-categories/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `${path}?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of product categories. The product categories can be filtered by fields such as `handle` or `q` passed in the `query` parameter. \n   * The product categories can also be paginated. This method can also be used to retrieve a product category by its handle.\n   * @param {StoreGetProductCategoriesParams} query - Filters and pagination configurations to apply on the retrieved product categories.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreGetProductCategoriesRes>} Resolves to the list of product categories with pagination fields.\n   * \n   * @example\n   * To list product categories:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.productCategories.list()\n   * .then(({ product_categories, limit, offset, count }) => {\n   *   console.log(product_categories.length);\n   * })\n   * ```\n   * \n   * To retrieve a product category by its handle:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.productCategories.list({\n   *   handle: \"women\",\n   * })\n   * .then(({ product_categories, limit, offset, count }) => {\n   *   if (!product_categories.length) {\n   *     // category does not exist\n   *   }\n   *   const category = product_categories[0]\n   * })\n   * ```\n   * \n   * To specify relations that should be retrieved within the product categories:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.productCategories.list({\n   *   expand: \"products\"\n   * })\n   * .then(({ product_categories, limit, offset, count }) => {\n   *   console.log(product_categories.length);\n   * })\n   * ```\n   * \n   * By default, only the first `100` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.productCategories.list({\n   *   expand: \"products\",\n   *   limit,\n   *   offset\n   * })\n   * .then(({ product_categories, limit, offset, count }) => {\n   *   console.log(product_categories.length);\n   * })\n   * ```\n   */\n  list(\n    query?: StoreGetProductCategoriesParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreGetProductCategoriesRes> {\n    let path = `/store/product-categories`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `${path}?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default ProductCategoriesResource\n", "import {\n  StoreGetProductTagsParams,\n  StoreProductTagsListRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\n/**\n * This class is used to send requests to [Store Product Tag API Routes](https://docs.medusajs.com/v1/api/store#product-tags). All its method\n * are available in the JS Client under the `medusa.productTags` property.\n * \n * Product tags are string values that can be used to filter products by.\n * Products can have more than one tag, and products can share tags.\n */\nclass ProductTagsResource extends BaseResource {\n  /**\n   * Retrieve a list of product tags. The product tags can be filtered by fields such as `id` or `q` passed in the `query` parameter. The product tags can also be sorted or paginated.\n   * @param {StoreGetProductTagsParams} query - Filters and pagination configurations to apply on the retrieved product tags.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreProductTagsListRes>} Resolves to the list of product tags with pagination fields.\n   * \n   * @example\n   * To list product tags:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.productTags.list()\n   * .then(({ product_tags }) => {\n   *   console.log(product_tags.length);\n   * })\n   * ```\n   * \n   * By default, only the first `20` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.productTags.list({\n   *   limit,\n   *   offset\n   * })\n   * .then(({ product_tags }) => {\n   *   console.log(product_tags.length);\n   * })\n   * ```\n   */\n  list(\n    query?: StoreGetProductTagsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreProductTagsListRes> {\n    let path = `/store/product-tags`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default ProductTagsResource\n", "import {\n  StoreGetProductTypesParams,\n  StoreProductTypesListRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\n/**\n * This class is used to send requests to [Store Product Type API Routes](https://docs.medusajs.com/v1/api/store#product-types). All its method\n * are available in the JS Client under the `medusa.productTypes` property.\n * \n * Product types are string values that can be used to filter products by.\n * Products can have more than one tag, and products can share types.\n */\nclass ProductTypesResource extends BaseResource {\n  /**\n   * Retrieve a list of product types. The product types can be filtered by fields such as `value` or `q` passed in the `query` parameter. The product types can also be sorted or paginated.\n   * @param {StoreGetProductTypesParams} query - Filters and pagination configurations to apply on retrieved product types.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreProductTypesListRes>} Resolves to the list of product types with pagination fields.\n   * \n   * @example\n   * To list product types:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.productTypes.list()\n   * .then(({ product_types }) => {\n   *   console.log(product_types.length);\n   * })\n   * ```\n   * \n   * By default, only the first `20` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.productTypes.list({\n   *   limit,\n   *   offset\n   * })\n   * .then(({ product_types }) => {\n   *   console.log(product_types.length);\n   * })\n   * ```\n   */\n  list(\n    query?: StoreGetProductTypesParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreProductTypesListRes> {\n    let path = `/store/product-types`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default ProductTypesResource\n", "import {\n  StoreGetVariantsParams,\n  StoreVariantsListRes,\n  StoreVariantsRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\n/**\n * This class is used to send requests to [Store Product Variant API Routes](https://docs.medusajs.com/v1/api/store#product-variants). All its method\n * are available in the JS Client under the `medusa.product.variants` property.\n * \n * Product variants are the actual salable item in your store. Each variant is a combination of the different option values available on the product.\n */\nclass ProductVariantsResource extends BaseResource {\n  /**\n   * Retrieve a Product Variant's details. For accurate and correct pricing of the product variant based on the customer's context, it's highly recommended to pass fields such as\n   * `region_id`, `currency_code`, and `cart_id` when available.\n   * \n   * Passing `sales_channel_id` ensures retrieving only variants of products available in the current sales channel.\n   * You can alternatively use a publishable API key in the request header instead of passing a `sales_channel_id`.\n   * @param {string} id - The ID of the product variant.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreVariantsRes>} Resolves to the product variant's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.product.variants.retrieve(productVariantId)\n   * .then(({ variant }) => {\n   *   console.log(variant.id);\n   * })\n   */\n  retrieve(id: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreVariantsRes> {\n    const path = `/store/variants/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieves a list of product variants. The product variants can be filtered by fields such as `id` or `title` passed in the `query` parameter. The product variants can also be paginated.\n   * \n   * For accurate and correct pricing of the product variants based on the customer's context, it's highly recommended to pass fields such as\n   * `region_id`, `currency_code`, and `cart_id` when available.\n   * \n   * Passing `sales_channel_id` ensures retrieving only variants of products available in the specified sales channel.\n   * You can alternatively use a publishable API key in the request header instead of passing a `sales_channel_id`.\n   * @param {StoreGetVariantsParams} query - Filters and pagination configurations applied on the retrieved product variants.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreVariantsListRes>} Resolves to the list of product variants.\n   * \n   * @example\n   * To list product variants:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.product.variants.list()\n   * .then(({ variants }) => {\n   *   console.log(variants.length);\n   * })\n   * ```\n   * \n   * To specify relations that should be retrieved within the product variants:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.product.variants.list({\n   *   expand: \"product\"\n   * })\n   * .then(({ variants }) => {\n   *   console.log(variants.length);\n   * })\n   * ```\n   * \n   * By default, only the first `100` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.product.variants.list({\n   *   expand: \"product\",\n   *   limit,\n   *   offset\n   * })\n   * .then(({ variants }) => {\n   *   console.log(variants.length);\n   * })\n   * ```\n   */\n  list(query?: StoreGetVariantsParams, customHeaders: Record<string, any> = {}): ResponsePromise<StoreVariantsListRes> {\n    let path = `/store/variants`\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default ProductVariantsResource\n", "import {\n  StoreGetProductsParams,\n  StorePostSearchReq,\n  StorePostSearchRes,\n  StoreProductsListRes,\n  StoreProductsRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\nimport ProductVariantsResource from \"./product-variants\"\n\n/**\n * This class is used to send requests to [Store Product API Routes](https://docs.medusajs.com/v1/api/store#products). All its method\n * are available in the JS Client under the `medusa.products` property.\n * \n * Products are saleable items in a store. This also includes [saleable gift cards](https://docs.medusajs.com/v1/modules/gift-cards/storefront/use-gift-cards) in a store.\n * Using the methods in this class, you can filter products by categories, collections, sales channels, and more.\n * \n * Related Guide: [How to show products in a storefront](https://docs.medusajs.com/v1/modules/products/storefront/show-products).\n */\nclass ProductsResource extends BaseResource {\n  /**\n   * An instance of {@link ProductVariantsResource} used to send requests to [Store Product Variant API Routes](https://docs.medusajs.com/v1/api/store#product-variants_getvariants).\n   */\n  public variants = new ProductVariantsResource(this.client)\n\n  /**\n   * Retrieve a Product's details. For accurate and correct pricing of the product based on the customer's context, it's highly recommended to pass fields such as\n   * `region_id`, `currency_code`, and `cart_id` when available.\n   * \n   * Passing `sales_channel_id` ensures retrieving only products available in the current sales channel.\n   * You can alternatively use a publishable API key in the request header instead of passing a `sales_channel_id`.\n   * @param {string} id - The product's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreProductsRes>} Resolves to the product's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.products.retrieve(productId)\n   * .then(({ product }) => {\n   *   console.log(product.id);\n   * })\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreProductsRes> {\n    const path = `/store/products/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Run a search query on products using the search service installed on the Medusa backend. The searching is handled through the search service, so the returned data's\n   * format depends on the search service you're using.\n   * @param {StorePostSearchReq} searchOptions - Fields to search products.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StorePostSearchRes>} Resolves to the list of search results. The format of the items depends on the search engine installed on the Medusa backend.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.products.search({\n   *   q: \"Shirt\"\n   * })\n   * .then(({ hits }) => {\n   *   console.log(hits.length);\n   * })\n   */\n  search(\n    searchOptions: StorePostSearchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StorePostSearchRes> {\n    const path = `/store/products/search`\n    return this.client.request(\"POST\", path, searchOptions, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of products. The products can be filtered by fields such as `id` or `q` passed in the `query` parameter. The products can also be sorted or paginated.\n   * This method can also be used to retrieve a product by its handle.\n   * \n   * For accurate and correct pricing of the products based on the customer's context, it's highly recommended to pass fields such as\n   * `region_id`, `currency_code`, and `cart_id` when available.\n   * \n   * Passing `sales_channel_id` ensures retrieving only products available in the specified sales channel.\n   * You can alternatively use a publishable API key in the request header instead of passing a `sales_channel_id`.\n   * @param {StoreGetProductsParams} query - Filters and pagination configurations to apply on the retrieved products.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreProductsListRes>} Resolves to the list of products with pagination fields.\n   * \n   * @example\n   * To list products:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.products.list()\n   * .then(({ products, limit, offset, count }) => {\n   *   console.log(products.length);\n   * })\n   * ```\n   * \n   * To specify relations that should be retrieved within the products:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.products.list({\n   *   expand: \"variants\"\n   * })\n   * .then(({ products, limit, offset, count }) => {\n   *   console.log(products.length);\n   * })\n   * ```\n   * \n   * By default, only the first `100` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.products.list({\n   *   expand: \"variants\",\n   *   limit,\n   *   offset\n   * })\n   * .then(({ products, limit, offset, count }) => {\n   *   console.log(products.length);\n   * })\n   * ```\n   */\n  list(\n    query?: StoreGetProductsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<StoreProductsListRes> {\n    let path = `/store/products`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/store/products?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default ProductsResource\n", "import { ResponsePromise } from \"../typings\"\nimport { StoreRegionsListRes, StoreRegionsRes } from \"@medusajs/medusa\"\nimport BaseResource from \"./base\"\n\n/**\n * This class is used to send requests to [Store Region API Routes](https://docs.medusajs.com/v1/api/store#regions_getregions). All its method\n * are available in the JS Client under the `medusa.regions` property.\n * \n * Regions are different countries or geographical regions that the commerce store serves customers in.\n * Customers can choose what region they're in, which can be used to change the prices shown based on the region and its currency.\n * \n * Related Guide: [How to use regions in a storefront](https://docs.medusajs.com/v1/modules/regions-and-currencies/storefront/use-regions).\n */\nclass RegionsResource extends BaseResource {\n  /**\n   * Retrieve a list of regions. This method is useful to show the customer all available regions to choose from.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreRegionsListRes>} Resolves to the list of regions with pagination fields.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.regions.list()\n   * .then(({ regions, count, limit, offset }) => {\n   *   console.log(regions.length);\n   * })\n   */\n  list(customHeaders: Record<string, any> = {}): ResponsePromise<StoreRegionsListRes> {\n    const path = `/store/regions`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a Region's details.\n   * @param {string} id - The region's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreRegionsRes>} Resolves to the region's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.regions.retrieve(regionId)\n   * .then(({ region }) => {\n   *   console.log(region.id);\n   * })\n   */\n  retrieve(id: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreRegionsRes> {\n    const path = `/store/regions/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default RegionsResource\n", "import BaseResource from \"./base\"\nimport {\n  StoreReturnReasonsListRes,\n  StoreReturnReasonsRes,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../typings\"\n\n/**\n * This class is used to send requests to [Store Return Reason API Routes](https://docs.medusajs.com/v1/api/store#return-reasons). All its method\n * are available in the JS Client under the `medusa.returnReasons` property.\n * \n * Return reasons are key-value pairs that are used to specify why an order return is being created.\n */\nclass ReturnReasonsResource extends BaseResource {\n  /**\n   * Retrieve a Return Reason's details.\n   * @param {string} id - The ID of the return reason.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreReturnReasonsRes>} Resolves to the return reason's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.returnReasons.retrieve(reasonId)\n   * .then(({ return_reason }) => {\n   *   console.log(return_reason.id);\n   * })\n   */\n  retrieve(id: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreReturnReasonsRes> {\n    const path = `/store/return-reasons/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of Return Reasons. This is useful when implementing a Create Return flow in the storefront.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreReturnReasonsListRes>} Resolves to the list of return reasons.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.returnReasons.list()\n   * .then(({ return_reasons }) => {\n   *   console.log(return_reasons.length);\n   * })\n   */\n  list(customHeaders: Record<string, any> = {}): ResponsePromise<StoreReturnReasonsListRes> {\n    const path = `/store/return-reasons`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default ReturnReasonsResource\n", "import BaseResource from \"./base\"\nimport { ResponsePromise } from \"../typings\"\nimport { StoreReturnsRes, StorePostReturnsReq } from \"@medusajs/medusa\"\n\n/**\n * This class is used to send requests to [Store Return API Routes](https://docs.medusajs.com/v1/api/store#returns). All its method\n * are available in the JS Client under the `medusa.returns` property.\n * \n * A return can be created by a customer to return items in an order.\n * \n * Related Guide: [How to create a return in a storefront](https://docs.medusajs.com/v1/modules/orders/storefront/create-return).\n */\nclass ReturnsResource extends BaseResource {\n  /**\n   * Create a return for an order. If a return shipping method is specified, the return is automatically fulfilled.\n   * @param {StorePostReturnsReq} payload - The data of the return to be created.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreReturnsRes>} Resolves to the return's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.returns.create({\n   *   order_id,\n   *   items: [\n   *     {\n   *       item_id,\n   *       quantity: 1\n   *     }\n   *   ]\n   * })\n   * .then((data) => {\n   *   console.log(data.return.id);\n   * })\n   */\n  create(payload: StorePostReturnsReq, customHeaders: Record<string, any> = {}): ResponsePromise<StoreReturnsRes> {\n    const path = `/store/returns`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default ReturnsResource\n", "import {\n  StoreGetShippingOptionsParams,\n  StoreShippingOptionsListRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../typings\"\nimport BaseResource from \"./base\"\n\n/**\n * This class is used to send requests to [Store Shipping Option API Routes](https://docs.medusajs.com/v1/api/store#shipping-options). All its method\n * are available in the JS Client under the `medusa.shippingOptions` property.\n * \n * A shipping option is used to define the available shipping methods during checkout or when creating a return.\n * \n * Related Guide: [Shipping Option architecture](https://docs.medusajs.com/v1/modules/carts-and-checkout/shipping#shipping-option).\n */\nclass ShippingOptionsResource extends BaseResource {\n  /**\n   * Retrieve a list of shipping options available for a cart.\n   * @param {string} cart_id - The cart's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreShippingOptionsListRes>} Resolves to the list of shipping options.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.shippingOptions.listCartOptions(cartId)\n   * .then(({ shipping_options }) => {\n   *   console.log(shipping_options.length);\n   * })\n   */\n  listCartOptions(cart_id: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreShippingOptionsListRes> {\n    const path = `/store/shipping-options/${cart_id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of shipping options. The shipping options can be filtered using the `query` parameter.\n   * @param {StoreGetShippingOptionsParams} query - The filters to apply on the shipping options.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreShippingOptionsListRes>} Resolves to the list of shipping options.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.shippingOptions.list()\n   * .then(({ shipping_options }) => {\n   *   console.log(shipping_options.length);\n   * })\n   */\n  list(\n    query?: StoreGetShippingOptionsParams,\n    customHeaders: Record<string, any> = {}): ResponsePromise<StoreShippingOptionsListRes> {\n    let path = `/store/shipping-options`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/store/shipping-options?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default ShippingOptionsResource\n", "import { ResponsePromise } from \"../typings\"\nimport { StoreSwapsRes, StorePostSwapsReq } from \"@medusajs/medusa\"\nimport BaseResource from \"./base\"\n\n/**\n * This class is used to send requests to [Store Swap API Routes](https://docs.medusajs.com/v1/api/store#swaps). All its method\n * are available in the JS Client under the `medusa.swaps` property.\n * \n * A swap is created by a customer or an admin to exchange an item with a new one.\n * Creating a swap implicitely includes creating a return for the item being exchanged.\n * \n * Related Guide: [How to create a swap in a storefront](https://docs.medusajs.com/v1/modules/orders/storefront/create-swap)\n */\nclass SwapsResource extends BaseResource {\n  /**\n   * Create a Swap for an Order. This will also create a return and associate it with the swap. If a return shipping option is specified, the return will automatically be fulfilled.\n   * To complete the swap, you must use the {@link CartsResource.complete} method passing it the ID of the swap's cart.\n   * \n   * An idempotency key will be generated if none is provided in the header `Idempotency-Key` and added to\n   * the response. If an error occurs during swap creation or the request is interrupted for any reason, the swap creation can be retried by passing the idempotency\n   * key in the `Idempotency-Key` header.\n   * @param {StorePostSwapsReq} payload - The data of the swap to be created.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreSwapsRes>} Resolves to the swap's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.swaps.create({\n   *   order_id,\n   *   return_items: [\n   *     {\n   *       item_id,\n   *       quantity: 1\n   *     }\n   *   ],\n   *   additional_items: [\n   *     {\n   *       variant_id,\n   *       quantity: 1\n   *     }\n   *   ]\n   * })\n   * .then(({ swap }) => {\n   *   console.log(swap.id);\n   * })\n   */\n  create(payload: StorePostSwapsReq, customHeaders: Record<string, any> = {}): ResponsePromise<StoreSwapsRes> {\n    const path = `/store/swaps`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a Swap's details by the ID of its cart.\n   * @param {string} cart_id - The cart's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<StoreSwapsRes>} Resolves to the swap's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.swaps.retrieveByCartId(cartId)\n   * .then(({ swap }) => {\n   *   console.log(swap.id);\n   * })\n   */\n  retrieveByCartId(cart_id: string, customHeaders: Record<string, any> = {}): ResponsePromise<StoreSwapsRes> {\n    const path = `/store/swaps/${cart_id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default SwapsResource\n", "import { AdminAuthRes, AdminPostAuthReq, AdminBearerAuthRes } from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../../typings\"\nimport JwtTokenManager from \"../../jwt-token-manager\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Auth API Routes](https://docs.medusajs.com/v1/api/admin#auth_getauth). All its method\n * are available in the JS Client under the `medusa.admin.auth` property.\n * \n * The methods in this class allow admin users to manage their session, such as login or log out.\n * You can send authenticated requests for an admin user either using the Cookie header, their API token, or the JWT Token.\n * When you log the admin user in using the {@link createSession} method, the JS client will automatically attach the\n * cookie header in all subsequent requests.\n * \n * Related Guide: [How to implement user profiles](https://docs.medusajs.com/v1/modules/users/admin/manage-profile).\n */\nclass AdminAuthResource extends BaseResource {\n  /**\n   * Get the currently logged in user's details. Can also be used to check if there is an authenticated user.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminAuthRes>} Resolves to the logged-in user's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.auth.getSession()\n   * .then(({ user }) => {\n   *   console.log(user.id);\n   * })\n   */\n  getSession(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminAuthRes> {\n    const path = `/admin/auth`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Log out the user and remove their authentication session. This will only work if you're using Cookie session for authentication. If the API token is still passed in the header,\n   * the user is still authorized to perform admin functionalities in other API Routes.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<void>} Resolves when user is logged out successfully.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in\n   * medusa.admin.auth.deleteSession()\n   */\n  deleteSession(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<void> {\n    const path = `/admin/auth`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Log a User in using their credentials. If the user is authenticated successfully, the cookie is automatically attached to subsequent requests sent with the JS Client.\n   * @param {AdminPostAuthReq} payload - The credentials of the user.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminAuthRes>} Resolves to the user's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.admin.auth.createSession({\n   *   email: \"user@example.com\",\n   *   password: \"supersecret\"\n   * })\n   * .then(({ user }) => {\n   *   console.log(user.id);\n   * })\n   */\n  createSession(\n    payload: AdminPostAuthReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminAuthRes> {\n    const path = `/admin/auth`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Authenticate the user and retrieve a JWT token to use for subsequent authenticated requests.\n   * @param {AdminPostAuthReq} payload - The credentials of the user.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminBearerAuthRes>} Resolves to the access token of the user, if they're authenticated successfully.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * medusa.admin.auth.getToken({\n   *   email: 'user@example.com',\n   *   password: 'supersecret'\n   * })\n   * .then(({ access_token }) => {\n   *   console.log(access_token);\n   * })\n   */\n  getToken(\n    payload: AdminPostAuthReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminBearerAuthRes> {\n    const path = `/admin/auth/token`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n      .then((res) => {\n        JwtTokenManager.registerJwt(res.access_token, \"admin\");\n        \n        return res\n      });\n  }\n}\n\nexport default AdminAuthResource\n", "import {\n  AdminBatchJobListRes,\n  AdminBatchJobRes,\n  AdminGetBatchParams,\n  AdminPostBatchesReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\nimport { stringifyNullProperties } from \"../../utils\"\n\n/**\n * This class is used to send requests to [Admin Batch Job API Routes](https://docs.medusajs.com/v1/api/admin#batch-jobs). All its method\n * are available in the JS Client under the `medusa.admin.batchJobs` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * A batch job is a task that is performed by the Medusa backend asynchronusly. For example, the Import Product feature is implemented using batch jobs.\n * The methods in this class allow admins to manage the batch jobs and their state.\n * \n * Related Guide: [How to import products](https://docs.medusajs.com/v1/modules/products/admin/import-products).\n */\nclass AdminBatchJobsResource extends BaseResource {\n\n  /**\n   * Create a Batch Job to be executed asynchronously in the Medusa backend. If `dry_run` is set to `true`, the batch job will not be executed until the it is confirmed,\n   * which can be done using the {@link confirm} method.\n   * @param payload - The data of the batch job to create.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminBatchJobRes>} Resolves to the batch job's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.batchJobs.create({\n   *   type: 'product-export',\n   *   context: {},\n   *   dry_run: false\n   * }).then((({ batch_job }) => {\n   *   console.log(batch_job.id);\n   * })\n   */\n  create(\n    payload: AdminPostBatchesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminBatchJobRes> {\n    const path = `/admin/batch-jobs`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of Batch Jobs. The batch jobs can be filtered by fields such as `type` or `confirmed_at`. The batch jobs can also be sorted or paginated.\n   * @param {AdminGetBatchParams} query - Filters and pagination configurations to apply on the retrieved batch jobs.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminBatchJobListRes>} The list of batch jobs with pagination fields.\n   * \n   * @example\n   * To list batch jobs:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.batchJobs.list()\n   * .then(({ batch_jobs, limit, offset, count }) => {\n   *   console.log(batch_jobs.length)\n   * })\n   * ```\n   * \n   * To specify relations that should be retrieved within the batch jobs:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.batchJobs.list({\n   *   expand: \"created_by_user\"\n   * })\n   * .then(({ batch_jobs, limit, offset, count }) => {\n   *   console.log(batch_jobs.length)\n   * })\n   * ```\n   * \n   * By default, only the first `10` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.batchJobs.list({\n   *   expand: \"created_by_user\",\n   *   limit,\n   *   offset\n   * })\n   * .then(({ batch_jobs, limit, offset, count }) => {\n   *   console.log(batch_jobs.length)\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetBatchParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminBatchJobListRes> {\n    let path = `/admin/batch-jobs`\n\n    if (query) {\n      const queryString = qs.stringify(stringifyNullProperties(query))\n      path = `/admin/batch-jobs?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Mark a batch job as canceled. When a batch job is canceled, the processing of the batch job doesn’t automatically stop.\n   * @param {string} batchJobId - The ID of the batch job.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminBatchJobRes>} Resolves to the batch job's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.batchJobs.cancel(batchJobId)\n   * .then(({ batch_job }) => {\n   *   console.log(batch_job.id);\n   * })\n   */\n  cancel(\n    batchJobId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminBatchJobRes> {\n    const path = `/admin/batch-jobs/${batchJobId}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * When a batch job is created, it's not executed automatically if `dry_run` is set to `true`. This method confirms that the batch job should be executed.\n   * @param {string} batchJobId - The ID of the batch job.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminBatchJobRes>} Resolves to the batch job's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.batchJobs.confirm(batchJobId)\n   * .then(({ batch_job }) => {\n   *   console.log(batch_job.id);\n   * })\n   */\n  confirm(\n    batchJobId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminBatchJobRes> {\n    const path = `/admin/batch-jobs/${batchJobId}/confirm`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve the details of a batch job.\n   * @param {string} batchJobId - The ID of the batch job.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminBatchJobRes>} Resolves to the batch job's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.batchJobs.retrieve(batchJobId)\n   * .then(({ batch_job }) => {\n   *   console.log(batch_job.id);\n   * })\n   */\n  retrieve(\n    batchJobId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminBatchJobRes> {\n    const path = `/admin/batch-jobs/${batchJobId}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminBatchJobsResource\n", "export function stringifyNullProperties<T extends object>(input: T): T {\n  const convertProperties = (obj: T) => {\n    const res = {} as T\n\n    Object.keys(obj).reduce((acc: T, key: string) => {\n      if (obj[key] === null) {\n        acc[key] = \"null\"\n      } else if (typeof obj[key] === \"object\") {\n        acc[key] = convertProperties(obj[key])\n      } else {\n        acc[key] = obj[key]\n      }\n\n      return acc\n    }, res)\n\n    return res\n  }\n\n  return convertProperties(input)\n}\n\nexport function createAdminPath(path: string) {\n  let formattedPath = path\n\n  if (!formattedPath.startsWith(\"/\")) {\n    formattedPath = `/${formattedPath}`\n  }\n\n  if (!formattedPath.startsWith(\"/admin\")) {\n    formattedPath = `/admin${formattedPath}`\n  }\n\n  return formattedPath\n}\n", "import {\n  AdminCollectionsDeleteRes,\n  AdminCollectionsListRes,\n  AdminCollectionsRes,\n  AdminDeleteProductsFromCollectionReq,\n  AdminDeleteProductsFromCollectionRes,\n  AdminGetCollectionsParams,\n  AdminPostCollectionsCollectionReq,\n  AdminPostCollectionsReq,\n  AdminPostProductsToCollectionReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Product Collection API Routes](https://docs.medusajs.com/v1/api/admin#product-collections). All its method\n * are available in the JS Client under the `medusa.admin.collections` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * A product collection is used to organize products for different purposes such as marketing or discount purposes. For example, you can create a Summer Collection.\n */\nclass AdminCollectionsResource extends BaseResource {\n  /**\n   * Create a product collection.\n   * @param {AdminPostCollectionsReq} payload - The data of the product collection to create.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminCollectionsRes>} Resolves to the created product collection's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.collections.create({\n   *   title: \"New Collection\"\n   * })\n   * .then(({ collection }) => {\n   *   console.log(collection.id);\n   * })\n   */\n  create(\n    payload: AdminPostCollectionsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCollectionsRes> {\n    const path = `/admin/collections`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Update a product collection's details.\n   * @param {string} id - The ID of the product collection.\n   * @param {AdminPostCollectionsCollectionReq} payload - The data to update in the product collection.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminCollectionsRes>} Resolves to the product collection's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.collections.update(collectionId, {\n   *   title: \"New Collection\"\n   * })\n   * .then(({ collection }) => {\n   *   console.log(collection.id);\n   * })\n   */\n  update(\n    id: string,\n    payload: AdminPostCollectionsCollectionReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCollectionsRes> {\n    const path = `/admin/collections/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a product collection. This does not delete associated products.\n   * @param {string} id - The ID of the product collection.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminCollectionsDeleteRes>} Resolves to the deletion operation details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.collections.delete(collectionId)\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id);\n   * })\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCollectionsDeleteRes> {\n    const path = `/admin/collections/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a product collection by its ID. The products associated with it are expanded and returned as well.\n   * @param {string} id - The ID of the product collection.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminCollectionsRes>} Resolves to the product collection's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.collections.retrieve(collectionId)\n   * .then(({ collection }) => {\n   *   console.log(collection.id);\n   * })\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCollectionsRes> {\n    const path = `/admin/collections/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of product collections. The product collections can be filtered by fields such as `handle` or `title`. The collections can also be sorted or paginated.\n   * @param {AdminGetCollectionsParams} query - Filters and pagination configurations to apply on the retrieved product collections.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminCollectionsListRes>} Resolves to the list of product collections with pagination fields.\n   * \n   * @example\n   * To list product collections:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.collections.list()\n   * .then(({ collections, limit, offset, count }) => {\n   *   console.log(collections.length);\n   * })\n   * ```\n   * \n   * By default, only the first `10` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.collections.list({\n   *   limit,\n   *   offset\n   * })\n   * .then(({ collections, limit, offset, count }) => {\n   *   console.log(collections.length);\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetCollectionsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCollectionsListRes> {\n    let path = `/admin/collections`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/collections?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Add products to collection.\n   * @param {string} id - The ID of the product collection.\n   * @param {AdminPostProductsToCollectionReq} payload - The products to add.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminCollectionsRes>} Resolves to the product collection's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.collections.addProducts(collectionId, {\n   *   product_ids: [\n   *     productId1,\n   *     productId2\n   *   ]\n   * })\n   * .then(({ collection }) => {\n   *   console.log(collection.products)\n   * })\n   */\n  addProducts(\n    id: string,\n    payload: AdminPostProductsToCollectionReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCollectionsRes> {\n    const path = `/admin/collections/${id}/products/batch`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Remove a list of products from a collection. This would not delete the product, only the association between the product and the collection.\n   * @param {string} id - the ID of the product collection\n   * @param {AdminDeleteProductsFromCollectionReq} payload - The products to remove from the collection.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDeleteProductsFromCollectionRes>} Resolves to the deletion operation details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.collections.removeProducts(collectionId, {\n   *   product_ids: [\n   *     productId1,\n   *     productId2\n   *   ]\n   * })\n   * .then(({ id, object, removed_products }) => {\n   *   console.log(removed_products)\n   * })\n   */\n  removeProducts(\n    id: string,\n    payload: AdminDeleteProductsFromCollectionReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDeleteProductsFromCollectionRes> {\n    const path = `/admin/collections/${id}/products/batch`\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminCollectionsResource\n", "import {\n  AdminCurrenciesListRes,\n  AdminCurrenciesRes,\n  AdminGetCurrenciesParams,\n  AdminPostCurrenciesCurrencyReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Currency API Routes](https://docs.medusajs.com/v1/api/admin#currencies). All its method\n * are available in the JS Client under the `medusa.admin.currencies` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * A store can use unlimited currencies, and each region must be associated with at least one currency.\n * Currencies are defined within the Medusa backend. The methods in this class allow admins to list and update currencies.\n * \n * Related Guide: [How to manage currencies](https://docs.medusajs.com/v1/modules/regions-and-currencies/admin/manage-currencies).\n */\nclass AdminCurrenciesResource extends BaseResource {\n  /**\n   * Retrieve a list of currencies. The currencies can be filtered by fields such as `code`. The currencies can also be sorted or paginated.\n   * @param {AdminGetCurrenciesParams} query - Filters and pagination configurations to apply on retrieved currencies.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminCurrenciesListRes>} Resolves to the list of currencies with pagination fields.\n   * \n   * @example\n   * To list currencies:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.currencies.list()\n   * .then(({ currencies, count, offset, limit }) => {\n   *   console.log(currencies.length);\n   * })\n   * ```\n   * \n   * By default, only the first `20` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.currencies.list({\n   *   limit,\n   *   offset\n   * })\n   * .then(({ currencies, count, offset, limit }) => {\n   *   console.log(currencies.length);\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetCurrenciesParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCurrenciesListRes> {\n    let path = `/admin/currencies`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Update a Currency's details.\n   * @param {string} code - The code of the currency to update.\n   * @param {AdminPostCurrenciesCurrencyReq} payload - The attributes to update in the currency.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminCurrenciesRes>} Resolves to the currency's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.currencies.update(code, {\n   *   includes_tax: true\n   * })\n   * .then(({ currency }) => {\n   *   console.log(currency.code);\n   * })\n   */\n  update(\n    code: string,\n    payload: AdminPostCurrenciesCurrencyReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCurrenciesRes> {\n    const path = `/admin/currencies/${code}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminCurrenciesResource\n", "import qs from \"qs\"\nimport { RequestOptions } from \"../../request\"\nimport { ResponsePromise } from \"../../typings\"\nimport { createAdminPath } from \"../../utils\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests custom API Routes. All its method\n * are available in the JS Client under the `medusa.admin.custom` property.\n */\nclass AdminCustomResource extends BaseResource {\n  /**\n   * Send a `GET` request to a custom API Route. The method accepts a tuple of type parameters: the first `TQuery` is the type of accepted query parameters,\n   * which defaults to `Record<string, any>`; the second `TResponse` is the type of response, which defaults to `any`.\n   * @param {string} path - The path of the custom API Route.\n   * @param {TQuery} query - Query path parameters to pass in the request.\n   * @param {RequestOptions} options - Configurations to apply on the request.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<TResponse>} The response data.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * type PostsResponse = {\n   * posts: Post[]\n   * }\n   * // must be previously logged in or use api token\n   * medusa.admin.custom.get<Record<string, any>, PostsResponse>(\n   *   \"/blog/posts\"\n   * )\n   * .then(({ posts }) => {\n   *   console.log(posts.length);\n   * })\n   */\n  get<TQuery extends Record<string, any>, TResponse = any>(\n    path: string,\n    query?: TQuery,\n    options?: RequestOptions,\n    customHeaders?: Record<string, any>\n  ): ResponsePromise<TResponse> {\n    let formattedPath = createAdminPath(path)\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      formattedPath += `?${queryString}`\n    }\n\n    return this.client.request(\n      \"GET\",\n      formattedPath,\n      undefined,\n      options,\n      customHeaders\n    )\n  }\n\n  /**\n   * Send a `POST` request to a custom API Route. The method accepts a tuple of type parameters: the first `TPayload` is the type of accepted body parameters,\n   * which defaults to `Record<string, any>`; the second `TResponse` is the type of response, which defaults to `any`.\n   * @param {string} path - The path of the custom API Route.\n   * @param {TPayload} payload - Body parameters to pass in the request.\n   * @param {RequestOptions} options - Configurations to apply on the request.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<TResponse>} The response data.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * type PostRequest = {\n   *   title: string\n   * }\n   * type PostResponse = {\n   *   post: Post\n   * }\n   * // must be previously logged in or use api token\n   * medusa.admin.custom.post<PostRequest, PostResponse>(\n   *   \"/blog/posts\",\n   *   {\n   *     title: \"My post\",\n   *   }\n   * )\n   * .then(({ post }) => {\n   *   console.log(post.id);\n   * })\n   */\n  post<TPayload extends Record<string, any>, TResponse = any>(\n    path: string,\n    payload?: TPayload,\n    options?: RequestOptions,\n    customHeaders?: Record<string, any>\n  ): ResponsePromise<TResponse> {\n    const formattedPath = createAdminPath(path)\n\n    return this.client.request(\n      \"POST\",\n      formattedPath,\n      payload,\n      options,\n      customHeaders\n    )\n  }\n\n  /**\n   * Send a `DELETE` request to a custom API Route. The method accepts a type parameters `TResponse` indicating the type of response, which defaults to `any`.\n   * @param {string} path - The path of the custom API Route.\n   * @param {RequestOptions} options - Configurations to apply on the request.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<TResponse>} The response data.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.custom.delete(\n   *   `/blog/posts/${postId}`\n   * )\n   * .then(() => {\n   *   // deleted successfully\n   * })\n   */\n  delete<TResponse = any>(\n    path: string,\n    options?: RequestOptions,\n    customHeaders?: Record<string, any>\n  ): ResponsePromise<TResponse> {\n    const formattedPath = createAdminPath(path)\n\n    return this.client.request(\n      \"DELETE\",\n      formattedPath,\n      undefined,\n      options,\n      customHeaders\n    )\n  }\n}\n\nexport default AdminCustomResource\n", "import {\n  AdminPostCustomerGroupsReq,\n  AdminCustomerGroupsRes,\n  AdminGetCustomerGroupsParams,\n  AdminCustomerGroupsListRes,\n  AdminPostCustomerGroupsGroupReq,\n  AdminCustomerGroupsDeleteRes,\n  AdminPostCustomerGroupsGroupCustomersBatchReq,\n  AdminDeleteCustomerGroupsGroupCustomerBatchReq,\n  AdminGetCustomerGroupsGroupParams,\n  AdminCustomersListRes,\n  AdminGetCustomersParams,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\n\nimport BaseResource from \"../base\"\nimport { ResponsePromise } from \"../..\"\n\n/**\n * This class is used to send requests to [Admin Customer Group API Routes](https://docs.medusajs.com/v1/api/admin#customer-groups). All its method\n * are available in the JS Client under the `medusa.admin.customerGroups` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * Customer Groups can be used to organize customers that share similar data or attributes into dedicated groups.\n * This can be useful for different purposes such as setting a different price for a specific customer group.\n * \n * Related Guide: [How to manage customer groups](https://docs.medusajs.com/v1/modules/customers/admin/manage-customer-groups).\n */\nclass AdminCustomerGroupsResource extends BaseResource {\n  /**\n   * Create a customer group.\n   * @param {AdminPostCustomerGroupsReq} payload - The data of the customer group to create.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminCustomerGroupsRes>} Resolves to the customer group's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.customerGroups.create({\n   *   name: \"VIP\"\n   * })\n   * .then(({ customer_group }) => {\n   *   console.log(customer_group.id);\n   * })\n   */\n  create(\n    payload: AdminPostCustomerGroupsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomerGroupsRes> {\n    const path = `/admin/customer-groups`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a customer group by its ID. You can expand the customer group's relations or select the fields that should be returned.\n   * @param {string} id - The ID of the customer group.\n   * @param {AdminGetCustomerGroupsGroupParams} query - Configurations to apply on the retrieved customer group.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminCustomerGroupsRes>} Resolves to the customer group's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.customerGroups.retrieve(customerGroupId)\n   * .then(({ customer_group }) => {\n   *   console.log(customer_group.id);\n   * })\n   */\n  retrieve(\n    id: string,\n    query?: AdminGetCustomerGroupsGroupParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomerGroupsRes> {\n    let path = `/admin/customer-groups/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n  /**\n   * Update a customer group's details.\n   * @param {string} id - The ID of the customer group.\n   * @param {AdminPostCustomerGroupsGroupReq} payload - The attributes to update in the customer group.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminCustomerGroupsRes>} Resolves to the customer group's details.\n   */\n  update(\n    id: string,\n    payload: AdminPostCustomerGroupsGroupReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomerGroupsRes> {\n    const path = `/admin/customer-groups/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a customer group. This doesn't delete the customers associated with the customer group.\n   * @param {string} id - The ID of the customer group.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminCustomerGroupsDeleteRes>} Resolves to the deletion operation details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.customerGroups.delete(customerGroupId)\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id);\n   * })\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomerGroupsDeleteRes> {\n    const path = `/admin/customer-groups/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of customer groups. The customer groups can be filtered by fields such as `name` or `id`. The customer groups can also be sorted or paginated.\n   * @param {AdminGetCustomerGroupsParams} query - Filters and pagination configurations to apply on the retrieved customer groups.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminCustomerGroupsListRes>} Resolves to the list of customer groups with pagination fields.\n   * \n   * @example\n   * To list customer groups:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.customerGroups.list()\n   * .then(({ customer_groups, limit, offset, count }) => {\n   *   console.log(customer_groups.length);\n   * })\n   * ```\n   * \n   * To specify relations that should be retrieved within the customer groups:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.customerGroups.list({\n   *   expand: \"customers\"\n   * })\n   * .then(({ customer_groups, limit, offset, count }) => {\n   *   console.log(customer_groups.length);\n   * })\n   * ```\n   * \n   * By default, only the first `10` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.customerGroups.list({\n   *   \"expand\": \"customers\",\n   *   limit,\n   *   offset\n   * })\n   * .then(({ customer_groups, limit, offset, count }) => {\n   *   console.log(customer_groups.length);\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetCustomerGroupsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomerGroupsListRes> {\n    let path = `/admin/customer-groups`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/customer-groups?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Add a list of customers to a customer group.\n   * @param {string} id - The ID of the customer group.\n   * @param {AdminPostCustomerGroupsGroupCustomersBatchReq} payload - The customers to add to the customer group.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminCustomerGroupsRes>} Resolves to the customer group's details.\n   */\n  addCustomers(\n    id: string,\n    payload: AdminPostCustomerGroupsGroupCustomersBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomerGroupsRes> {\n    const path = `/admin/customer-groups/${id}/customers/batch`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Remove a list of customers from a customer group. This doesn't delete the customer, only the association between the customer and the customer group.\n   * @param {string} id - The ID of the customer group.\n   * @param {AdminDeleteCustomerGroupsGroupCustomerBatchReq} payload - The customers to remove from the customer group.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminCustomerGroupsRes>} Resolves to the customer group's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.customerGroups.removeCustomers(customerGroupId, {\n   *   customer_ids: [\n   *     {\n   *       id: customerId\n   *     }\n   *   ]\n   * })\n   * .then(({ customer_group }) => {\n   *   console.log(customer_group.id);\n   * })\n   */\n  removeCustomers(\n    id: string,\n    payload: AdminDeleteCustomerGroupsGroupCustomerBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomerGroupsRes> {\n    const path = `/admin/customer-groups/${id}/customers/batch`\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of customers in a customer group. The customers can be filtered by the `q` field. The customers can also be paginated.\n   * @param {string} id - The ID of the customer group.\n   * @param {AdminGetCustomersParams} query - Filters and pagination configurations to apply on the retrieved customers.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminCustomersListRes>} Resolves to the list of customers with pagination fields.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.customerGroups.listCustomers(customerGroupId)\n   * .then(({ customers }) => {\n   *   console.log(customers.length);\n   * })\n   */\n  listCustomers(\n    id: string,\n    query?: AdminGetCustomersParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomersListRes> {\n    let path = `/admin/customer-groups/${id}/customers`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminCustomerGroupsResource\n", "import {\n  AdminCustomersListRes,\n  AdminCustomersRes,\n  AdminGetCustomersParams,\n  AdminPostCustomersReq,\n  AdminPostCustomersCustomerReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../..\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Customer API Routes](https://docs.medusajs.com/v1/api/admin#customers). All its method\n * are available in the JS Client under the `medusa.admin.customers` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * Customers can either be created when they register through the {@link CustomersResource.create} method, or created by the admin using the {@link create} method.\n * \n * Related Guide: [How to manage customers](https://docs.medusajs.com/v1/modules/customers/admin/manage-customers).\n */\nclass AdminCustomersResource extends BaseResource {\n  /**\n   * Create a customer as an admin.\n   * @param {AdminPostCustomersReq} payload - The customer to create.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminCustomersRes>} Resolves to the customer's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.customers.create({\n   *   email: \"user@example.com\",\n   *   first_name: \"Caterina\",\n   *   last_name: \"Yost\",\n   *   password: \"supersecret\"\n   * })\n   * .then(({ customer }) => {\n   *   console.log(customer.id);\n   * })\n   */\n  create(\n    payload: AdminPostCustomersReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomersRes> {\n    const path = `/admin/customers`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Update a customer's details.\n   * @param {string} id - The customer's ID.\n   * @param {AdminPostCustomersCustomerReq} payload - The attributes to update in the customer.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminCustomersRes>} Resolves to the customer's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.customers.update(customerId, {\n   *   first_name: \"Dolly\"\n   * })\n   * .then(({ customer }) => {\n   *   console.log(customer.id);\n   * })\n   */\n  update(\n    id: string,\n    payload: AdminPostCustomersCustomerReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomersRes> {\n    const path = `/admin/customers/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve the details of a customer.\n   * @param {string} id - The customer's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminCustomersRes>} Resolves to the customer's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.customers.retrieve(customerId)\n   * .then(({ customer }) => {\n   *   console.log(customer.id);\n   * })\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomersRes> {\n    const path = `/admin/customers/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of Customers. The customers can be filtered by fields such as `q` or `groups`. The customers can also be paginated.\n   * @param {AdminGetCustomersParams} query - Filters and pagination configurations to apply on the retrieved customers.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminCustomersListRes>} Resolves to the list of customers with pagination fields.\n   * \n   * @example\n   * To list customers:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.customers.list()\n   * .then(({ customers, limit, offset, count }) => {\n   *   console.log(customers.length);\n   * })\n   * ```\n   * \n   * To specify relations that should be retrieved within the customers:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.customers.list({\n   *   expand: \"billing_address\"\n   * })\n   * .then(({ customers, limit, offset, count }) => {\n   *   console.log(customers.length);\n   * })\n   * ```\n   * \n   * By default, only the first `50` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.customers.list({\n   *   expand: \"billing_address\",\n   *   limit,\n   *   offset\n   * })\n   * .then(({ customers, limit, offset, count }) => {\n   *   console.log(customers.length);\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetCustomersParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminCustomersListRes> {\n    let path = `/admin/customers`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/customers?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminCustomersResource\n", "import {\n  AdminDeleteDiscountsDiscountConditionsConditionBatchReq,\n  AdminDiscountConditionsRes,\n  AdminDiscountsDeleteRes,\n  AdminDiscountsListRes,\n  AdminDiscountsRes,\n  AdminGetDiscountParams,\n  AdminGetDiscountsDiscountConditionsConditionParams,\n  AdminGetDiscountsParams,\n  AdminPostDiscountsDiscountConditions,\n  AdminPostDiscountsDiscountConditionsCondition,\n  AdminPostDiscountsDiscountConditionsConditionBatchParams,\n  AdminPostDiscountsDiscountConditionsConditionBatchReq,\n  AdminPostDiscountsDiscountConditionsConditionParams,\n  AdminPostDiscountsDiscountConditionsParams,\n  AdminPostDiscountsDiscountDynamicCodesReq,\n  AdminPostDiscountsDiscountReq,\n  AdminPostDiscountsReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Discount API Routes](https://docs.medusajs.com/v1/api/admin#discounts). All its method\n * are available in the JS Client under the `medusa.admin.discounts` property.\n *\n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n *\n * Admins can create discounts with conditions and rules, providing them with advanced settings for variety of cases.\n * The methods in this class can be used to manage discounts, their conditions, resources, and more.\n *\n * Related Guide: [How to manage discounts](https://docs.medusajs.com/v1/modules/discounts/admin/manage-discounts).\n */\nclass AdminDiscountsResource extends BaseResource {\n  /**\n   * Add a Region to the list of Regions a Discount can be used in.\n   * @param {string} id - The discount's ID.\n   * @param {string} regionId - The ID of the region to add.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDiscountsRes>} Resolves to the discount's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.discounts.addRegion(discountId, regionId)\n   * .then(({ discount }) => {\n   *   console.log(discount.id);\n   * })\n   */\n  addRegion(\n    id: string,\n    regionId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts/${id}/regions/${regionId}`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Create a discount with a given set of rules that defines how the discount is applied.\n   * @param {AdminPostDiscountsReq} payload - The discount to create.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDiscountsRes>} Resolves to the discount's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * import { AllocationType, DiscountRuleType } from \"@medusajs/medusa\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.discounts.create({\n   *   code: \"TEST\",\n   *   rule: {\n   *     type: DiscountRuleType.FIXED,\n   *     value: 10,\n   *     allocation: AllocationType.ITEM\n   *   },\n   *   regions: [\"reg_XXXXXXXX\"],\n   *   is_dynamic: false,\n   *   is_disabled: false\n   * })\n   * .then(({ discount }) => {\n   *   console.log(discount.id);\n   * })\n   */\n  create(\n    payload: AdminPostDiscountsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Update a discount with a given set of rules that define how the discount is applied.\n   * @param {string} id - The discount's ID.\n   * @param {AdminPostDiscountsDiscountReq} payload - The attributes to update in the discount.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDiscountsRes>} Resolves to the details of the discount.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.discounts.update(discountId, {\n   *   code: \"TEST\"\n   * })\n   * .then(({ discount }) => {\n   *   console.log(discount.id);\n   * })\n   */\n  update(\n    id: string,\n    payload: AdminPostDiscountsDiscountReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Create a dynamic unique code that can map to a parent discount. This is useful if you want to automatically generate codes with the same rules and conditions.\n   * @param {string} id - The discount's ID.\n   * @param {AdminPostDiscountsDiscountDynamicCodesReq} payload - The dynamic code to create.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDiscountsRes>} Resolves to the details of the discount.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.discounts.createDynamicCode(discountId, {\n   *   code: \"TEST\",\n   *   usage_limit: 1\n   * })\n   * .then(({ discount }) => {\n   *   console.log(discount.id);\n   * })\n   */\n  createDynamicCode(\n    id: string,\n    payload: AdminPostDiscountsDiscountDynamicCodesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts/${id}/dynamic-codes`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a discount. Deleting the discount will make it unavailable for customers to use.\n   * @param {string} id - The discount's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDiscountsDeleteRes>} Resolves to the delete operation details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.discounts.delete(discountId)\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id);\n   * })\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsDeleteRes> {\n    const path = `/admin/discounts/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Delete a dynamic code from a discount.\n   * @param {string} id - The discount's ID.\n   * @param {string} code - The code of the dynamic code to delete.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDiscountsRes>} Resolves to the details of the discount.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.discounts.deleteDynamicCode(discountId, code)\n   * .then(({ discount }) => {\n   *   console.log(discount.id);\n   * })\n   */\n  deleteDynamicCode(\n    id: string,\n    code: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts/${id}/dynamic-codes/${code}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a discount.\n   * @param {string} id - The discount's ID.\n   * @param {AdminGetDiscountParams} query - Configurations to apply on the retrieved product category.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDiscountsRes>} Resolves to the details of the discount.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.discounts.retrieve(discountId)\n   * .then(({ discount }) => {\n   *   console.log(discount.id);\n   * })\n   */\n  retrieve(\n    id: string,\n    query?: AdminGetDiscountParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    let path = `/admin/discounts/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `${path}?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a discount's details by its discount code.\n   * @param {string} code - The code of the discount.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDiscountsRes>} Resolves to the details of the discount.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.discounts.retrieveByCode(code)\n   * .then(({ discount }) => {\n   *   console.log(discount.id);\n   * })\n   */\n  retrieveByCode(\n    code: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts/code/${code}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of Discounts. The discounts can be filtered by fields such as `rule` or `is_dynamic`. The discounts can also be paginated.\n   * @param {AdminGetDiscountsParams} query - Filters and pagination configurations to apply on the retrieved discounts.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDiscountsListRes>} Resolves to the list of discounts with pagination fields.\n   *\n   * @example\n   * To list discounts:\n   *\n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.discounts.list()\n   * .then(({ discounts, limit, offset, count }) => {\n   *   console.log(discounts.id);\n   * })\n   * ```\n   *\n   * To specify relations that should be retrieved within the discounts:\n   *\n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.discounts.list({\n   *   expand: \"rule\"\n   * })\n   * .then(({ discounts, limit, offset, count }) => {\n   *   console.log(discounts.id);\n   * })\n   * ```\n   *\n   * By default, only the first `20` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   *\n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.discounts.list({\n   *   expand: \"rule\",\n   *   limit,\n   *   offset\n   * })\n   * .then(({ discounts, limit, offset, count }) => {\n   *   console.log(discounts.id);\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetDiscountsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsListRes> {\n    let path = `/admin/discounts`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Remove a Region from the list of Regions that a Discount can be used in. This does not delete a region, only the association between it and the discount.\n   * @param {string} id - The discount's ID.\n   * @param {string} regionId - The ID of the region to remove.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDiscountsRes>} Resolves to the details of the discount.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.discounts.removeRegion(discountId, regionId)\n   * .then(({ discount }) => {\n   *   console.log(discount.id);\n   * })\n   */\n  removeRegion(\n    id: string,\n    regionId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts/${id}/regions/${regionId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Create a discount condition. Only one of `products`, `product_types`, `product_collections`, `product_tags`, and `customer_groups` should be provided in the `payload` parameter,\n   * based on the type of discount condition. For example, if the discount condition's type is `products`, the `products` field should be provided in the `payload` parameter.\n   * @param {string} discountId - The discount's ID.\n   * @param {AdminPostDiscountsDiscountConditions} payload - The discount condition to create.\n   * @param {AdminPostDiscountsDiscountConditionsParams} query - Configurations to apply on the returned discount.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDiscountsRes>} Resolves to the details of the discount.\n   *\n   * @example\n   * To create a condition in a discount:\n   *\n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * import { DiscountConditionOperator } from \"@medusajs/medusa\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.discounts.createCondition(discountId, {\n   *   operator: DiscountConditionOperator.IN,\n   *   products: [productId]\n   * })\n   * .then(({ discount }) => {\n   *   console.log(discount.id);\n   * })\n   * ```\n   *\n   * To specify relations that should be retrieved as part of the response:\n   *\n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * import { DiscountConditionOperator } from \"@medusajs/medusa\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.discounts.createCondition(discountId, {\n   *   operator: DiscountConditionOperator.IN,\n   *   products: [productId]\n   * }, {\n   *   expand: \"rule\"\n   * })\n   * .then(({ discount }) => {\n   *   console.log(discount.id);\n   * })\n   * ```\n   */\n  createCondition(\n    discountId: string,\n    payload: AdminPostDiscountsDiscountConditions,\n    query: AdminPostDiscountsDiscountConditionsParams = {},\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    let path = `/admin/discounts/${discountId}/conditions`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Update a discount condition. Only one of `products`, `product_types`, `product_collections`, `product_tags`, and `customer_groups` should be provided in the `payload` parameter,\n   * based on the type of discount condition. For example, if the discount condition's type is `products`, the `products` field should be provided in the `payload` parameter.\n   * @param {string} discountId - The discount's ID.\n   * @param {string} conditionId - The ID of the discount condition.\n   * @param {AdminPostDiscountsDiscountConditionsCondition} payload - The attributes to update in the discount condition.\n   * @param {AdminPostDiscountsDiscountConditionsConditionParams} query - Configurations to apply on the returned discount.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDiscountsRes>} Resolves to the details of the discount.\n   *\n   * @example\n   * To update a condition in a discount:\n   *\n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.discounts.updateCondition(discountId, conditionId, {\n   *   products: [\n   *     productId\n   *   ]\n   * })\n   * .then(({ discount }) => {\n   *   console.log(discount.id);\n   * })\n   * ```\n   *\n   * To specify relations that should be retrieved as part of the response:\n   *\n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.discounts.updateCondition(discountId, conditionId, {\n   *   products: [\n   *     productId\n   *   ]\n   * }, {\n   *   expand: \"rule\"\n   * })\n   * .then(({ discount }) => {\n   *   console.log(discount.id);\n   * })\n   * ```\n   */\n  updateCondition(\n    discountId: string,\n    conditionId: string,\n    payload: AdminPostDiscountsDiscountConditionsCondition,\n    query: AdminPostDiscountsDiscountConditionsConditionParams = {},\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    let path = `/admin/discounts/${discountId}/conditions/${conditionId}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a discount condition. This doesn't delete resources associated to the discount condition.\n   * @param {string} discountId - The discount's ID.\n   * @param {string} conditionId - The ID of the discount condition.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDiscountsDeleteRes>} Resolves to the deletion operation details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.discounts.deleteCondition(discountId, conditionId)\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id);\n   * })\n   */\n  deleteCondition(\n    discountId: string,\n    conditionId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsDeleteRes> {\n    const path = `/admin/discounts/${discountId}/conditions/${conditionId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a Discount Condition's details.\n   * @param {string} discountId - The ID of the discount that the condition belongs to.\n   * @param {string} conditionId - The ID of the discount condition.\n   * @param {AdminGetDiscountsDiscountConditionsConditionParams} query - Configurations to apply on the retrieved discount condition.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDiscountConditionsRes>} Resolves to the discount condition details.\n   *\n   * @example\n   * A simple example that retrieves a discount condition by its ID:\n   *\n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.discounts.getCondition(discountId, conditionId)\n   * .then(({ discount_condition }) => {\n   *   console.log(discount_condition.id);\n   * })\n   * ```\n   *\n   * To specify relations that should be retrieved:\n   *\n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.discounts.getCondition(discountId, conditionId, {\n   *   expand: \"discount_rule\"\n   * })\n   * .then(({ discount_condition }) => {\n   *   console.log(discount_condition.id);\n   * })\n   * ```\n   */\n  getCondition(\n    discountId: string,\n    conditionId: string,\n    query?: AdminGetDiscountsDiscountConditionsConditionParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountConditionsRes> {\n    let path = `/admin/discounts/${discountId}/conditions/${conditionId}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Add a batch of resources to a discount condition. The type of resource depends on the type of discount condition. For example, if the discount condition's type is `products`,\n   * the resources being added should be products.\n   * @param {string} discountId - The ID of the discount the condition belongs to.\n   * @param {string} conditionId - The ID of the discount condition.\n   * @param {AdminPostDiscountsDiscountConditionsConditionBatchReq} payload - The resources to add to the discount condition.\n   * @param {AdminPostDiscountsDiscountConditionsConditionBatchParams} query - Configurations to apply on the retrieved discount.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDiscountsRes>} Resolves to the details of the discount.\n   *\n   * @example\n   * To add resources to a discount condition:\n   *\n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.discounts.addConditionResourceBatch(discountId, conditionId, {\n   *   resources: [{ id: itemId }]\n   * })\n   * .then(({ discount }) => {\n   *   console.log(discount.id);\n   * })\n   * ```\n   *\n   * To specify relations to include in the returned discount:\n   *\n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.discounts.addConditionResourceBatch(discountId, conditionId, {\n   *   resources: [{ id: itemId }]\n   * }, {\n   *   expand: \"rule\"\n   * })\n   * .then(({ discount }) => {\n   *   console.log(discount.id);\n   * })\n   * ```\n   */\n  addConditionResourceBatch(\n    discountId: string,\n    conditionId: string,\n    payload: AdminPostDiscountsDiscountConditionsConditionBatchReq,\n    query?: AdminPostDiscountsDiscountConditionsConditionBatchParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    let path = `/admin/discounts/${discountId}/conditions/${conditionId}/batch`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Remove a batch of resources from a discount condition. This will only remove the association between the resource and the discount condition, not the resource itself.\n   * @param {string} discountId - The ID of the discount the condition belongs to.\n   * @param {string} conditionId - The ID of the discount condition.\n   * @param {AdminDeleteDiscountsDiscountConditionsConditionBatchReq} payload - The resources to remove.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDiscountsRes>} Resolves to the details of the discount.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.discounts.deleteConditionResourceBatch(discountId, conditionId, {\n   *   resources: [{ id: itemId }]\n   * })\n   * .then(({ discount }) => {\n   *   console.log(discount.id);\n   * })\n   */\n  deleteConditionResourceBatch(\n    discountId: string,\n    conditionId: string,\n    payload: AdminDeleteDiscountsDiscountConditionsConditionBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDiscountsRes> {\n    const path = `/admin/discounts/${discountId}/conditions/${conditionId}/batch`\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminDiscountsResource\n", "import {\n  AdminDraftOrdersDeleteRes,\n  AdminDraftOrdersListRes,\n  AdminDraftOrdersRes,\n  AdminGetDraftOrdersParams,\n  AdminPostDraftOrdersDraftOrderLineItemsItemReq,\n  AdminPostDraftOrdersDraftOrderLineItemsReq,\n  AdminPostDraftOrdersDraftOrderRegisterPaymentRes,\n  AdminPostDraftOrdersDraftOrderReq,\n  AdminPostDraftOrdersReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Draft Order API Routes](https://docs.medusajs.com/v1/api/admin#draft-orders). All its method\n * are available in the JS Client under the `medusa.admin.draftOrders` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * A draft order is an order created manually by the admin. It allows admins to create orders without direct involvement from the customer.\n * \n * Related Guide: [How to manage draft orders](https://docs.medusajs.com/v1/modules/orders/admin/manage-draft-orders).\n */\nclass AdminDraftOrdersResource extends BaseResource {\n  /**\n   * Create a Draft Order. A draft order is not transformed into an order until payment is captured.\n   * @param {AdminPostDraftOrdersReq} payload - The draft order to create.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDraftOrdersRes>} Resolves to the draft order's details\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.draftOrders.create({\n   *   email: \"user@example.com\",\n   *   region_id,\n   *   items: [\n   *     {\n   *       quantity: 1\n   *     }\n   *   ],\n   *   shipping_methods: [\n   *     {\n   *       option_id\n   *     }\n   *   ],\n   * })\n   * .then(({ draft_order }) => {\n   *   console.log(draft_order.id);\n   * })\n   */\n  create(\n    payload: AdminPostDraftOrdersReq,\n    customHeaders: Record<string, any> = {}): ResponsePromise<AdminDraftOrdersRes> {\n    const path = `/admin/draft-orders`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Create a Line Item in the Draft Order.\n   * @param {string} id - The ID of the draft order.\n   * @param {AdminPostDraftOrdersDraftOrderLineItemsReq} payload - The line item to create.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDraftOrdersRes>} Resolves to the draft order's details\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.draftOrders.addLineItem(draftOrderId, {\n   *   quantity: 1\n   * })\n   * .then(({ draft_order }) => {\n   *   console.log(draft_order.id);\n   * })\n   */\n  addLineItem(\n    id: string,\n    payload: AdminPostDraftOrdersDraftOrderLineItemsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDraftOrdersRes> {\n    const path = `/admin/draft-orders/${id}/line-items`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a Draft Order.\n   * @param {string} id - The ID of the draft order.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDraftOrdersDeleteRes>} Resolves to the deletion operation details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.draftOrders.delete(draftOrderId)\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id);\n   * })\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDraftOrdersDeleteRes> {\n    const path = `/admin/draft-orders/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Delete a Line Item from a Draft Order.\n   * @param {string} id - The ID of the draft order that the line item belongs to.\n   * @param {string} itemId - The ID of the line item to delete from the draft order.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDraftOrdersRes>} Resolves to the draft order's details\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.draftOrders.removeLineItem(draftOrderId, itemId)\n   * .then(({ draft_order }) => {\n   *   console.log(draft_order.id);\n   * })\n   */\n  removeLineItem(\n    id: string,\n    itemId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDraftOrdersRes> {\n    const path = `/admin/draft-orders/${id}/line-items/${itemId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a Draft Order's details.\n   * @param {string} id - The ID of the draft order.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDraftOrdersRes>} Resolves to the draft order's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.draftOrders.retrieve(draftOrderId)\n   * .then(({ draft_order }) => {\n   *   console.log(draft_order.id);\n   * })\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDraftOrdersRes> {\n    const path = `/admin/draft-orders/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve an list of Draft Orders. The draft orders can be filtered by parameters such as `query`. The draft orders can also paginated.\n   * @param {AdminGetDraftOrdersParams} query - Filters and pagination configurations to apply on the retrieved draft orders.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDraftOrdersListRes>} Resolves to the list of draft orders with pagination fields.\n   * \n   * @example\n   * To list draft orders:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.draftOrders.list()\n   * .then(({ draft_orders, limit, offset, count }) => {\n   *   console.log(draft_orders.length);\n   * })\n   * ```\n   * \n   * By default, only the first `50` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.draftOrders.list({\n   *   limit,\n   *   offset\n   * })\n   * .then(({ draft_orders, limit, offset, count }) => {\n   *   console.log(draft_orders.length);\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetDraftOrdersParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDraftOrdersListRes> {\n    let path = `/admin/draft-orders`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/draft-orders?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Capture the draft order's payment. This will also set the draft order's status to `completed` and create an order from the draft order. The payment is captured through Medusa's system payment,\n   * which is manual payment that isn't integrated with any third-party payment provider. It is assumed that the payment capturing is handled manually by the admin.\n   * @param {string} id - The ID of the draft order.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPostDraftOrdersDraftOrderRegisterPaymentRes>} Resolves to the created order's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.draftOrders.markPaid(draftOrderId)\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  markPaid(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPostDraftOrdersDraftOrderRegisterPaymentRes> {\n    const path = `/admin/draft-orders/${id}/pay`\n    return this.client.request(\"POST\", path, {}, customHeaders)\n  }\n\n  /**\n   * Update a Draft Order's details.\n   * @param {string} id - The ID of the draft order.\n   * @param {AdminPostDraftOrdersDraftOrderReq} payload - The attributes to update in the draft order.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDraftOrdersRes>} Resolves to the draft order's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.draftOrders.update(draftOrderId, {\n   *   email: \"user@example.com\"\n   * })\n   * .then(({ draft_order }) => {\n   *   console.log(draft_order.id);\n   * })\n   */\n  update(\n    id: string,\n    payload: AdminPostDraftOrdersDraftOrderReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDraftOrdersRes> {\n    const path = `/admin/draft-orders/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Update a Line Item in a Draft Order.\n   * @param {string} id - The ID of the draft order that the line item belongs to.\n   * @param {string} itemId - The ID of the line item to update.\n   * @param {AdminPostDraftOrdersDraftOrderLineItemsItemReq} payload - The attributes to update in the line item.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDraftOrdersRes>} Resolves to the draft order's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.draftOrders.updateLineItem(draftOrderId, lineId, {\n   *   quantity: 1\n   * })\n   * .then(({ draft_order }) => {\n   *   console.log(draft_order.id);\n   * })\n   */\n  updateLineItem(\n    id: string,\n    itemId: string,\n    payload: AdminPostDraftOrdersDraftOrderLineItemsItemReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDraftOrdersRes> {\n    const path = `/admin/draft-orders/${id}/line-items/${itemId}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminDraftOrdersResource\n", "import {\n  AdminGetGiftCardsParams,\n  AdminGiftCardsDeleteRes,\n  AdminGiftCardsListRes,\n  AdminGiftCardsRes,\n  AdminPostGiftCardsGiftCardReq,\n  AdminPostGiftCardsReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Gift Card API Routes](https://docs.medusajs.com/v1/api/admin#gift-cards). All its method\n * are available in the JS Client under the `medusa.admin.giftCards` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * Admins can create gift cards and send them directly to customers, specifying options like their balance, region, and more.\n * These gift cards are different than the saleable gift cards in a store, which are created and managed through {@link AdminProductsResource}.\n * \n * Related Guide: [How to manage gift cards](https://docs.medusajs.com/v1/modules/gift-cards/admin/manage-gift-cards#manage-custom-gift-cards).\n */\nclass AdminGiftCardsResource extends BaseResource {\n  /**\n   * Create a gift card that can redeemed by its unique code. The Gift Card is only valid within one region.\n   * @param {AdminPostGiftCardsReq} payload - The gift card to be created.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminGiftCardsRes>} Resolves to the gift card's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.giftCards.create({\n   *   region_id\n   * })\n   * .then(({ gift_card }) => {\n   *   console.log(gift_card.id);\n   * })\n   */\n  create(\n    payload: AdminPostGiftCardsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminGiftCardsRes> {\n    const path = `/admin/gift-cards`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Update a gift card's details.\n   * @param {string} id - The ID of the gift card.\n   * @param {AdminPostGiftCardsGiftCardReq} payload - The attributes to update in the gift card.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminGiftCardsRes>} Resolves to the gift card's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.giftCards.update(giftCardId, {\n   *   region_id\n   * })\n   * .then(({ gift_card }) => {\n   *   console.log(gift_card.id);\n   * })\n   */\n  update(\n    id: string,\n    payload: AdminPostGiftCardsGiftCardReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminGiftCardsRes> {\n    const path = `/admin/gift-cards/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a gift card. Once deleted, it can't be used by customers.\n   * @param {string} id - The ID of the gift card.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminGiftCardsDeleteRes>} Resolves to the deletion operation's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.giftCards.delete(giftCardId)\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id);\n   * })\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminGiftCardsDeleteRes> {\n    const path = `/admin/gift-cards/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a gift card's details.\n   * @param {string} id - The ID of the gift card.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminGiftCardsRes>} Resolves to the gift card's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.giftCards.retrieve(giftCardId)\n   * .then(({ gift_card }) => {\n   *   console.log(gift_card.id);\n   * })\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminGiftCardsRes> {\n    const path = `/admin/gift-cards/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of gift cards. The gift cards can be filtered by fields such as `q` passed in the `query` parameter. The gift cards can also paginated.\n   * @param {AdminGetGiftCardsParams} query - Filters and pagination configurations to apply on the retrieved gift cards.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminGiftCardsListRes>} Resolves to the list of gift cards with pagination fields.\n   * \n   * @example\n   * To list gift cards:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.giftCards.list()\n   * .then(({ gift_cards, limit, offset, count }) => {\n   *   console.log(gift_cards.length);\n   * })\n   * ```\n   * \n   * By default, only the first `50` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.giftCards.list({\n   *   limit,\n   *   offset\n   * })\n   * .then(({ gift_cards, limit, offset, count }) => {\n   *   console.log(gift_cards.length);\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetGiftCardsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminGiftCardsListRes> {\n    let path = `/admin/gift-cards/`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/gift-cards?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminGiftCardsResource\n", "import {\n  AdminGetInventoryItemsItemLocationLevelsParams,\n  AdminGetInventoryItemsItemParams,\n  AdminGetInventoryItemsParams,\n  AdminInventoryItemsDeleteRes,\n  AdminInventoryItemsListWithVariantsAndLocationLevelsRes,\n  AdminInventoryItemsLocationLevelsRes,\n  AdminInventoryItemsRes,\n  AdminPostInventoryItemsInventoryItemReq,\n  AdminPostInventoryItemsItemLocationLevelsLevelReq,\n  AdminPostInventoryItemsItemLocationLevelsParams,\n  AdminPostInventoryItemsItemLocationLevelsReq,\n  AdminPostInventoryItemsParams,\n  AdminPostInventoryItemsReq,\n} from \"@medusajs/medusa\"\n\nimport BaseResource from \"../base\"\nimport { ResponsePromise } from \"../../typings\"\nimport qs from \"qs\"\nimport { AdminPostInventoryItemsInventoryItemParams } from \"@medusajs/medusa\"\nimport { AdminPostInventoryItemsItemLocationLevelsLevelParams } from \"@medusajs/medusa\"\n\n/**\n * This class is used to send requests to [Admin Inventory Item API Routes](https://docs.medusajs.com/v1/api/admin#inventory-items). To use these API Routes, make sure to install the\n * [@medusajs/inventory](https://docs.medusajs.com/v1/modules/multiwarehouse/install-modules#inventory-module) module in your Medusa backend. All its method\n * are available in the JS Client under the `medusa.admin.inventoryItems` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * Inventory items, provided by the [Inventory Module](https://docs.medusajs.com/v1/modules/multiwarehouse/inventory-module), can be used to manage the inventory of saleable items in your store.\n * \n * Related Guide: [How to manage inventory items](https://docs.medusajs.com/v1/modules/multiwarehouse/admin/manage-inventory-items).\n */\nclass AdminInventoryItemsResource extends BaseResource {\n  /**\n   * Retrieve an Inventory Item's details.\n   * @param {string} inventoryItemId - The ID of the inventory item.\n   * @param {AdminGetInventoryItemsItemParams} query - Configurations applied on the retrieved inventory item.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminInventoryItemsRes>} The inventory item's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.inventoryItems.retrieve(inventoryItemId)\n   * .then(({ inventory_item }) => {\n   *   console.log(inventory_item.id);\n   * })\n   */\n  retrieve(\n    inventoryItemId: string,\n    query?: AdminGetInventoryItemsItemParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsRes> {\n    let path = `/admin/inventory-items/${inventoryItemId}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Update an Inventory Item's details.\n   * @param {string} inventoryItemId - The ID of the inventory item.\n   * @param {AdminPostInventoryItemsInventoryItemReq} payload - The attributes to update in the inventory item.\n   * @param {AdminPostInventoryItemsInventoryItemParams} query - Configurations to apply on the retrieved inventory item.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminInventoryItemsRes>} The inventory item's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.inventoryItems.update(inventoryItemId, {\n   *   origin_country: \"US\",\n   * })\n   * .then(({ inventory_item }) => {\n   *   console.log(inventory_item.id);\n   * })\n   */\n  update(\n    inventoryItemId: string,\n    payload: AdminPostInventoryItemsInventoryItemReq,\n    query?: AdminPostInventoryItemsInventoryItemParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsRes> {\n    let path = `/admin/inventory-items/${inventoryItemId}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete an Inventory Item. This does not delete the associated product variant.\n   * @param {string} inventoryItemId - The ID of the inventory item.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminInventoryItemsDeleteRes>} The deletion operation's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.inventoryItems.delete(inventoryItemId)\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id)\n   * })\n   */\n  delete(\n    inventoryItemId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsDeleteRes> {\n    const path = `/admin/inventory-items/${inventoryItemId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Create an Inventory Item for a product variant.\n   * @param {AdminPostInventoryItemsReq} payload - The inventory item to create.\n   * @param {AdminPostInventoryItemsParams} query - Configurations to apply on the retrieved inventory item.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminInventoryItemsRes>} The inventory item's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.inventoryItems.create({\n   *   variant_id: \"variant_123\",\n   * })\n   * .then(({ inventory_item }) => {\n   *   console.log(inventory_item.id);\n   * })\n   */\n  create(\n    payload: AdminPostInventoryItemsReq,\n    query?: AdminPostInventoryItemsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsRes> {\n    let path = `/admin/inventory-items`\n    \n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of inventory items. The inventory items can be filtered by fields such as `q` or `location_id` passed in the `query` parameter.\n   * The inventory items can also be paginated.\n   * @param {AdminGetInventoryItemsParams} query - Filters and pagination configurations applied on the retrieved inventory items.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminInventoryItemsListWithVariantsAndLocationLevelsRes>} The list of inventory items with pagination fields.\n   * \n   * @example\n   * To list inventory items:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.inventoryItems.list()\n   * .then(({ inventory_items, count, offset, limit }) => {\n   *   console.log(inventory_items.length);\n   * })\n   * ```\n   * \n   * By default, only the first `20` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.inventoryItems.list({\n   *   limit,\n   *   offset\n   * })\n   * .then(({ inventory_items, count, offset, limit }) => {\n   *   console.log(inventory_items.length);\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetInventoryItemsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsListWithVariantsAndLocationLevelsRes> {\n    let path = `/admin/inventory-items`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Update a location level's details for a given inventory item.\n   * @param {string} inventoryItemId - The ID of the inventory item that the location level belongs to.\n   * @param {string} locationId - The ID of the location level to update.\n   * @param {AdminPostInventoryItemsItemLocationLevelsLevelReq} payload - The attributes to update in the location level.\n   * @param {AdminPostInventoryItemsItemLocationLevelsLevelParams} query - Configurations to apply on the returned inventory item.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminInventoryItemsRes>} the inventory item's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.inventoryItems.updateLocationLevel(inventoryItemId, locationId, {\n   *   stocked_quantity: 15,\n   * })\n   * .then(({ inventory_item }) => {\n   *   console.log(inventory_item.id);\n   * })\n   */\n  updateLocationLevel(\n    inventoryItemId: string,\n    locationId: string,\n    payload: AdminPostInventoryItemsItemLocationLevelsLevelReq,\n    query?: AdminPostInventoryItemsItemLocationLevelsLevelParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsRes> {\n    let path = `/admin/inventory-items/${inventoryItemId}/location-levels/${locationId}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Create a Location Level for a given Inventory Item.\n   * @param {string} inventoryItemId - The ID of the inventory item that the location level belongs to.\n   * @param {AdminPostInventoryItemsItemLocationLevelsReq} payload - The location level to create.\n   * @param {AdminPostInventoryItemsItemLocationLevelsParams} query - Configurations to apply on the returned inventory item.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminInventoryItemsRes>} the inventory item's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.inventoryItems.createLocationLevel(inventoryItemId, {\n   *   location_id: \"sloc_123\",\n   *   stocked_quantity: 10,\n   * })\n   * .then(({ inventory_item }) => {\n   *   console.log(inventory_item.id);\n   * })\n   */\n  createLocationLevel(\n    inventoryItemId: string,\n    payload: AdminPostInventoryItemsItemLocationLevelsReq,\n    query?: AdminPostInventoryItemsItemLocationLevelsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsRes> {\n    let path = `/admin/inventory-items/${inventoryItemId}/location-levels`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a location level of an Inventory Item.\n   * @param {string} inventoryItemId - The ID of the inventory item.\n   * @param {string} locationId - The ID of the location level to delete.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminInventoryItemsRes>} the inventory item's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.inventoryItems.deleteLocationLevel(inventoryItemId, locationId)\n   * .then(({ inventory_item }) => {\n   *   console.log(inventory_item.id);\n   * })\n   */\n  deleteLocationLevel(\n    inventoryItemId: string,\n    locationId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsRes> {\n    const path = `/admin/inventory-items/${inventoryItemId}/location-levels/${locationId}`\n\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of inventory levels of an inventory item. The inventory levels can be filtered by fields such as `location_id` passed in the `query` parameter.\n   * @param {string} inventoryItemId - The ID of the inventory item that the location levels belong to.\n   * @param {AdminGetInventoryItemsItemLocationLevelsParams} query - Filters to apply on the retrieved location levels.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminInventoryItemsLocationLevelsRes>} The inventory item's details and list of location levels.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.inventoryItems.listLocationLevels(inventoryItemId)\n   * .then(({ inventory_item }) => {\n   *   console.log(inventory_item.location_levels);\n   * })\n   */\n  listLocationLevels(\n    inventoryItemId: string,\n    query?: AdminGetInventoryItemsItemLocationLevelsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInventoryItemsLocationLevelsRes> {\n    let path = `/admin/inventory-items/${inventoryItemId}/location-levels`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminInventoryItemsResource\n", "import {\n  AdminInviteDeleteRes,\n  AdminListInvitesRes,\n  AdminPostInvitesInviteAcceptReq,\n} from \"@medusajs/medusa\"\nimport { AdminPostInvitesPayload, ResponsePromise } from \"../..\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Invite API Routes](https://docs.medusajs.com/v1/api/admin#invites). All its method\n * are available in the JS Client under the `medusa.admin.invites` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * An admin can invite new users to manage their team. This would allow new users to authenticate as admins and perform admin functionalities.\n * \n * Related Guide: [How to manage invites](https://docs.medusajs.com/v1/modules/users/admin/manage-invites).\n */\nclass AdminInvitesResource extends BaseResource {\n  /**\n   * Accept an Invite. This will also delete the invite and create a new user that can log in and perform admin functionalities. \n   * The user will have the email associated with the invite, and the password provided in the `payload` parameter.\n   * @param {AdminPostInvitesInviteAcceptReq} payload - The user accepting the invite.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise} Resolves when the invite is accepted successfully.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.invites.accept({\n   *   token,\n   *   user: {\n   *     first_name: \"Brigitte\",\n   *     last_name: \"Collier\",\n   *     password: \"supersecret\"\n   *   }\n   * })\n   * .then(() => {\n   *   // successful\n   * })\n   * .catch(() => {\n   *   // an error occurred\n   * })\n   */\n  accept(\n    payload: AdminPostInvitesInviteAcceptReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise {\n    const path = `/admin/invites/accept`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Create an invite. This will generate a token associated with the invite and trigger an `invite.created` event. If you have a Notification Provider installed that handles this\n   * event, a notification should be sent to the email associated with the invite to allow them to accept the invite.\n   * @param {AdminPostInvitesPayload} payload - The invite to be created.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise} Resolves when the invite is created successfully.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.invites.create({\n   *   user: \"user@example.com\",\n   *   role: \"admin\"\n   * })\n   * .then(() => {\n   *   // successful\n   * })\n   * .catch(() => {\n   *   // an error occurred\n   * })\n   */\n  create(\n    payload: AdminPostInvitesPayload,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise {\n    const path = `/admin/invites`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete an invite. Only invites that weren't accepted can be deleted.\n   * @param {string} id - The invite's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminInviteDeleteRes>} Resolves to the deletion operation's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.invites.delete(inviteId)\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id);\n   * })\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminInviteDeleteRes> {\n    const path = `/admin/invites/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of invites.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminListInvitesRes>} Resolves to the list of invites.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.invites.list()\n   * .then(({ invites }) => {\n   *   console.log(invites.length);\n   * })\n   */\n  list(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminListInvitesRes> {\n    const path = `/admin/invites`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Resend an invite. This renews the expiry date by seven days and generates a new token for the invite. It also triggers the `invite.created` event, \n   * so if you have a Notification Provider installed that handles this event, a notification should be sent to the email associated with the \n   * invite to allow them to accept the invite.\n   * @param {string} id - The invite's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise} Resolves when the invite is resent successfully.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.invites.resend(inviteId)\n   * .then(() => {\n   *   // successful\n   * })\n   * .catch(() => {\n   *   // an error occurred\n   * })\n   */\n  resend(id: string, customHeaders: Record<string, any> = {}): ResponsePromise {\n    const path = `/admin/invites/${id}/resend`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminInvitesResource\n", "import {\n  AdminGetNotesParams,\n  AdminNotesDeleteRes,\n  AdminNotesListRes,\n  AdminNotesRes,\n  AdminPostNotesNoteReq,\n  AdminPostNotesReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Note API Routes](https://docs.medusajs.com/v1/api/admin#notes). All its method\n * are available in the JS Client under the `medusa.admin.notes` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * Notes are created by admins and can be associated with any resource. For example, an admin can add a note to an order for additional details or remarks.\n */\nclass AdminNotesResource extends BaseResource {\n  /**\n   * Create a Note which can be associated with any resource.\n   * @param {AdminPostNotesReq} payload - The note to be created.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminNotesRes>} Resolves to the note's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.notes.create({\n   *   resource_id,\n   *   resource_type: \"order\",\n   *   value: \"We delivered this order\"\n   * })\n   * .then(({ note }) => {\n   *   console.log(note.id);\n   * })\n   */\n  create(\n    payload: AdminPostNotesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminNotesRes> {\n    const path = `/admin/notes`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Update a Note's details.\n   * @param {string} id - The note's ID.\n   * @param {AdminPostNotesNoteReq} payload - The attributes to update in the note.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminNotesRes>} Resolves to the note's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.notes.update(noteId, {\n   *  value: \"We delivered this order\"\n   * })\n   * .then(({ note }) => {\n   *   console.log(note.id);\n   * })\n   */\n  update(\n    id: string,\n    payload: AdminPostNotesNoteReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminNotesRes> {\n    const path = `/admin/notes/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a Note.\n   * @param {string} id - The note's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminNotesDeleteRes>} Resolves to the deletion operation's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.notes.delete(noteId)\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id);\n   * })\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminNotesDeleteRes> {\n    const path = `/admin/notes/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a note's details.\n   * @param {string} id - The note's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminNotesRes>} Resolves to the note's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.notes.retrieve(noteId)\n   * .then(({ note }) => {\n   *   console.log(note.id);\n   * })\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminNotesRes> {\n    const path = `/admin/notes/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of notes. The notes can be filtered by fields such as `resource_id` passed in the `query` parameter. The notes can also be paginated.\n   * @param {AdminGetNotesParams} query - Filters and pagination configurations applied on retrieved notes.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminNotesListRes>} Resolves to the list of notes with pagination fields.\n   * \n   * @example\n   * To list notes:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.notes.list()\n   * .then(({ notes, limit, offset, count }) => {\n   *   console.log(notes.length);\n   * })\n   * ```\n   * \n   * By default, only the first `50` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.notes.list({\n   *   limit,\n   *   offset\n   * })\n   * .then(({ notes, limit, offset, count }) => {\n   *   console.log(notes.length);\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetNotesParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminNotesListRes> {\n    let path = `/admin/notes/`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/notes?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminNotesResource\n", "import {\n  AdminGetNotificationsParams,\n  AdminNotificationsListRes,\n  AdminNotificationsRes,\n  AdminPostNotificationsNotificationResendReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../..\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Notification API Routes](https://docs.medusajs.com/v1/api/admin#notifications). All its method\n * are available in the JS Client under the `medusa.admin.notifications` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * Notifications are sent to customers to inform them of new updates. For example, a notification can be sent to the customer when their order is place or its state is updated.\n * The notification's type, such as an email or SMS, is determined by the notification provider installed on the Medusa backend.\n */\nclass AdminNotificationsResource extends BaseResource {\n  /**\n   * Retrieve a list of notifications. The notifications can be filtered by fields such as `event_name` or `resource_type` passed in the `query` parameter.\n   * The notifications can also be paginated.\n   * @param {AdminGetNotificationsParams} query - Filters and pagination configurations applied to the retrieved notifications.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminNotificationsListRes>} Resolves to the list of notifications with pagination fields.\n   * \n   * @example\n   * To list notifications:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.notifications.list()\n   * .then(({ notifications }) => {\n   *   console.log(notifications.length);\n   * })\n   * ```\n   * \n   * To specify relations that should be retrieved within the notifications:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.notifications.list({\n   *   expand: \"provider\"\n   * })\n   * .then(({ notifications }) => {\n   *   console.log(notifications.length);\n   * })\n   * ```\n   * \n   * By default, only the first `50` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.notifications.list({\n   *   expand: \"provider\",\n   *   limit,\n   *   offset\n   * })\n   * .then(({ notifications }) => {\n   *   console.log(notifications.length);\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetNotificationsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminNotificationsListRes> {\n    let path = `/admin/notifications`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/notifications?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Resend a previously sent notifications, with the same data but optionally to a different address.\n   * @param {string} id - The notification's ID. \n   * @param {AdminPostNotificationsNotificationResendReq} payload - The details necessary to resend the notification.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminNotificationsRes>} Resolves to the notification's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.notifications.resend(notificationId)\n   * .then(({ notification }) => {\n   *   console.log(notification.id);\n   * })\n   */\n  resend(\n    id: string,\n    payload: AdminPostNotificationsNotificationResendReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminNotificationsRes> {\n    const path = `/admin/notifications/${id}/resend`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminNotificationsResource\n", "import {\n  AdminOrderEditDeleteRes,\n  AdminOrderEditItemChangeDeleteRes,\n  AdminOrderEditsListRes,\n  AdminOrderEditsRes,\n  AdminPostOrderEditsEditLineItemsLineItemReq,\n  AdminPostOrderEditsEditLineItemsReq,\n  AdminPostOrderEditsOrderEditReq,\n  AdminPostOrderEditsReq,\n  GetOrderEditsOrderEditParams,\n  GetOrderEditsParams,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\nimport qs from \"qs\"\n\n/**\n * This class is used to send requests to [Admin Order Edit API Routes](https://docs.medusajs.com/v1/api/admin#order-edits). All its method\n * are available in the JS Client under the `medusa.admin.orderEdits` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * An admin can edit an order to remove, add, or update an item's quantity. When an admin edits an order, they're stored as an `OrderEdit`.\n * \n * Related Guide: [How to edit an order](https://docs.medusajs.com/v1/modules/orders/admin/edit-order).\n */\nclass AdminOrderEditsResource extends BaseResource {\n  /**\n   * Retrieve an order edit's details.\n   * @param {string} id - The ID of the order edit.\n   * @param {GetOrderEditsOrderEditParams} query - Configurations to apply on the retrieved order edit.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrderEditsRes>} Resolves to the order edit's details.\n   * \n   * @example\n   * A simple example that retrieves an order edit by its ID:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orderEdits.retrieve(orderEditId)\n   * .then(({ order_edit }) => {\n   *   console.log(order_edit.id)\n   * })\n   * ```\n   * \n   * To specify relations that should be retrieved:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orderEdits.retrieve(orderEditId, {\n   *   expand: \"order\"\n   * })\n   * .then(({ order_edit }) => {\n   *   console.log(order_edit.id)\n   * })\n   * ```\n   */\n  retrieve(\n    id: string,\n    query?: GetOrderEditsOrderEditParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    let path = `/admin/order-edits/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of order edits. The order edits can be filtered by fields such as `q` or `order_id` passed to the `query` parameter. The order edits can also be paginated.\n   * @param {GetOrderEditsParams} query - Filters and pagination configurations applied to retrieved order edits.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrderEditsListRes>} Resolves to the list of order edits with pagination fields.\n   * \n   * @example\n   * To list order edits:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orderEdits.list()\n   * .then(({ order_edits, count, limit, offset }) => {\n   *   console.log(order_edits.length)\n   * })\n   * ```\n   * \n   * To specify relations that should be retrieved within the order edits:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orderEdits.list({\n   *   expand: \"order\"\n   * })\n   * .then(({ order_edits, count, limit, offset }) => {\n   *   console.log(order_edits.length)\n   * })\n   * ```\n   * \n   * By default, only the first `50` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orderEdits.list({\n   *   expand: \"order\",\n   *   limit,\n   *   offset\n   * })\n   * .then(({ order_edits, count, limit, offset }) => {\n   *   console.log(order_edits.length)\n   * })\n   * ```\n   */\n  list(\n    query?: GetOrderEditsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsListRes> {\n    let path = `/admin/order-edits`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Create an order edit.\n   * @param {AdminPostOrderEditsReq} payload - The order edit to create.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrderEditsRes>} Resolves to the order edit's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orderEdits.create({ orderId })\n   * .then(({ order_edit }) => {\n   *   console.log(order_edit.id)\n   * })\n   */\n  create(\n    payload: AdminPostOrderEditsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    const path = `/admin/order-edits`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Update an Order Edit's details.\n   * @param {string} id - The ID of the order edit.\n   * @param {AdminPostOrderEditsOrderEditReq} payload - The attributes to update in an order edit.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrderEditsRes>} Resolves to the order edit's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orderEdits.update(orderEditId, {\n   *   internal_note: \"internal reason XY\"\n   * })\n   * .then(({ order_edit }) => {\n   *   console.log(order_edit.id)\n   * })\n   */\n  update(\n    id: string,\n    payload: AdminPostOrderEditsOrderEditReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    const path = `/admin/order-edits/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete an order edit. Only order edits that have the status `created` can be deleted.\n   * @param {string} id - The ID of the order edit.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrderEditDeleteRes>} Resolves to the deletion operation's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orderEdits.delete(orderEditId)\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id)\n   * })\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditDeleteRes> {\n    const path = `/admin/order-edits/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Create a line item change in the order edit that indicates adding an item in the original order. The item will not be added to the original order until the order edit is\n   * confirmed.\n   * @param {string} id - The ID of the order edit to add the line item change to.\n   * @param {AdminPostOrderEditsEditLineItemsReq} payload - The line item change to be created.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrderEditsRes>} Resolves to the order edit's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orderEdits.addLineItem(orderEditId, {\n   *   variant_id,\n   *   quantity\n   * })\n   * .then(({ order_edit }) => {\n   *    console.log(order_edit.id)\n   * })\n   */\n  addLineItem(\n    id: string,\n    payload: AdminPostOrderEditsEditLineItemsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    const path = `/admin/order-edits/${id}/items`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a line item change that indicates the addition, deletion, or update of a line item in the original order.\n   * @param {string} orderEditId - The ID of the order edit.\n   * @param {string} itemChangeId - The ID of the line item change.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrderEditItemChangeDeleteRes>} Resolves to the deletion operation's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orderEdits.deleteItemChange(orderEdit_id, itemChangeId)\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id)\n   * })\n   */\n  deleteItemChange(\n    orderEditId: string,\n    itemChangeId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditItemChangeDeleteRes> {\n    const path = `/admin/order-edits/${orderEditId}/changes/${itemChangeId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Request customer confirmation of an order edit. This would emit the event `order-edit.requested` which Notification Providers listen to and send\n   * a notification to the customer about the order edit.\n   * @param {string} id - The ID of the order edit.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrderEditsRes>} Resolves to the order edit's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orderEdits.requestConfirmation(orderEditId)\n   * .then({ order_edit }) => {\n   *   console.log(order_edit.id)\n   * })\n   */\n  requestConfirmation(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    const path = `/admin/order-edits/${id}/request`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Cancel an order edit.\n   * @param {string} id - The ID of the order edit to cancel.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrderEditsRes>} Resolves to the order edit's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orderEdits.cancel(orderEditId)\n   * .then(({ order_edit }) => {\n   *   console.log(order_edit.id)\n   * })\n   */\n  cancel(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    const path = `/admin/order-edits/${id}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Confirm an order edit. This will reflect the changes in the order edit on the associated order.\n   * @param {string} id - The ID of the order edit to confirm.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrderEditsRes>} Resolves to the order edit's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orderEdits.confirm(orderEditId)\n   * .then(({ order_edit }) => {\n   *   console.log(order_edit.id)\n   * })\n   */\n  confirm(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    const path = `/admin/order-edits/${id}/confirm`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Create or update a line item change in the order edit that indicates addition, deletion, or update of a line item into an original order. Line item changes\n   * are only reflected on the original order after the order edit is confirmed.\n   * @param {string} orderEditId - The ID of the order edit that the line item belongs to.\n   * @param {string} itemId - The ID of the line item to create or update its line item change.\n   * @param {AdminPostOrderEditsEditLineItemsLineItemReq} payload - The creation or update of the line item change.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrderEditsRes>} Resolves to the order edit's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orderEdits.updateLineItem(orderEditId, lineItemId, {\n   *   quantity: 5\n   * })\n   * .then(({ order_edit }) => {\n   *   console.log(order_edit.id)\n   * })\n   */\n  updateLineItem(\n    orderEditId: string,\n    itemId: string,\n    payload: AdminPostOrderEditsEditLineItemsLineItemReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    const path = `/admin/order-edits/${orderEditId}/items/${itemId}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Create a line item change in the order edit that indicates deleting an item in the original order. The item in the original order will not be deleted until the order edit is\n   * confirmed.\n   * @param {string} orderEditId - The ID of the order edit that the line item change belongs to. \n   * @param {string} itemId - The ID of the line item.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrderEditsRes>} Resolves to the order edit's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orderEdits.removeLineItem(orderEditId, lineItemId)\n   * .then(({ order_edit }) => {\n   *   console.log(order_edit.id)\n   * })\n   */\n  removeLineItem(\n    orderEditId: string,\n    itemId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrderEditsRes> {\n    const path = `/admin/order-edits/${orderEditId}/items/${itemId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminOrderEditsResource\n", "import {\n  AdminGetOrdersParams,\n  AdminOrdersListRes,\n  AdminOrdersRes,\n  AdminPostOrdersOrderClaimsClaimFulfillmentsReq,\n  AdminPostOrdersOrderClaimsClaimReq,\n  AdminPostOrdersOrderClaimsClaimShipmentsReq,\n  AdminPostOrdersOrderClaimsReq,\n  AdminPostOrdersOrderFulfillmentsReq,\n  AdminPostOrdersOrderRefundsReq,\n  AdminPostOrdersOrderReq,\n  AdminPostOrdersOrderReturnsReq,\n  AdminPostOrdersOrderShipmentReq,\n  AdminPostOrdersOrderShippingMethodsReq,\n  AdminPostOrdersOrderSwapsReq,\n  AdminPostOrdersOrderSwapsSwapFulfillmentsReq,\n  AdminPostOrdersOrderSwapsSwapShipmentsReq,\n} from \"@medusajs/medusa\"\nimport { FindParams } from \"@medusajs/medusa/dist/types/common\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Order API Routes](https://docs.medusajs.com/v1/api/admin#orders). All its method\n * are available in the JS Client under the `medusa.admin.orders` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * Orders are purchases made by customers, typically through a storefront using {@link CartsResource}. Draft orders created by the admin are also transformed to an Order once the payment is captured.\n * Managing orders include managing fulfillment, payment, claims, reservations, and more.\n * \n * Related Guide: [How to manage orders](https://docs.medusajs.com/v1/modules/orders/admin/manage-orders).\n */\nclass AdminOrdersResource extends BaseResource {\n  /**\n   * Update an order's details.\n   * @param {string} id - The order's ID.\n   * @param {AdminPostOrdersOrderReq} payload - The attributes to update in the order.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrdersRes>} Resolves to the order's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.update(orderId, {\n   *   email: \"user@example.com\"\n   * })\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  update(\n    id: string,\n    payload: AdminPostOrdersOrderReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve an order's details.\n   * @param {string} id - The order's ID.\n   * @param {FindParams} query - Configurations to apply on the retrieved order.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrdersRes>} Resolves to the order's details.\n   * \n   * @example\n   * A simple example that retrieves an order by its ID:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.retrieve(orderId)\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   * ```\n   * \n   * To specify relations that should be retrieved:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.retrieve(orderId, {\n   *   expand: \"customer\"\n   * })\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   * ```\n   */\n  retrieve(\n    id: string,\n    query?: FindParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    let path = `/admin/orders/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/orders/${id}?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of orders. The orders can be filtered by fields such as `status` or `display_id` passed in the `query` parameter. The order can also be paginated.\n   * @param {AdminGetOrdersParams} query - Filters and pagination configurations applied on the retrieved orders.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrdersListRes>} Resolves to the list of orders with pagination fields.\n   * \n   * @example\n   * To list orders:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.list()\n   * .then(({ orders, limit, offset, count }) => {\n   *   console.log(orders.length);\n   * })\n   * ```\n   * \n   * To specify relations that should be retrieved within the orders:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.list({\n   *   expand: \"customers\"\n   * })\n   * .then(({ orders, limit, offset, count }) => {\n   *   console.log(orders.length);\n   * })\n   * ```\n   * \n   * By default, only the first `50` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.list({\n   *   expand: \"customers\",\n   *   limit,\n   *   offset\n   * })\n   * .then(({ orders, limit, offset, count }) => {\n   *   console.log(orders.length);\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetOrdersParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersListRes> {\n    let path = `/admin/orders`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/orders?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Complete an order and change its status. A canceled order can't be completed.\n   * @param {string} id - The order's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrdersRes>} Resolves to the order's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.complete(orderId)\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  complete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/complete`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Capture all the payments associated with an order. The payment of canceled orders can't be captured.\n   * @param {string} id - The ID of the order whose payments should be captured.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrdersRes>} Resolves to the order's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.capturePayment(orderId)\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  capturePayment(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/capture`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Refund an amount for an order. The amount must be less than or equal the `refundable_amount` of the order.\n   * @param {string} id - The ID of the order whose customer should be refunded.\n   * @param {AdminPostOrdersOrderRefundsReq} payload - The refund's details.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrdersRes>} Resolves to the order's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.refundPayment(orderId, {\n   *   amount: 1000,\n   *   reason: \"Do not like it\"\n   * })\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  refundPayment(\n    id: string,\n    payload: AdminPostOrdersOrderRefundsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/refund`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Create a Fulfillment of an Order using the fulfillment provider, and change the order's fulfillment status to either `partially_fulfilled` or `fulfilled`, depending on\n   * whether all the items were fulfilled.\n   * @param {string} id - The ID of the order that the fulfillment belongs to.\n   * @param {AdminPostOrdersOrderFulfillmentsReq} payload - The fulfillment to be created.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrdersRes>} Resolves to the order's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.createFulfillment(orderId, {\n   *   items: [\n   *     {\n   *       item_id,\n   *       quantity: 1\n   *     }\n   *   ]\n   * })\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  createFulfillment(\n    id: string,\n    payload: AdminPostOrdersOrderFulfillmentsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/fulfillment`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Cancel an order's fulfillment and change its fulfillment status to `canceled`.\n   * @param {string} id - The ID of the order that the fulfillment belongs to.\n   * @param {string} fulfillmentId - The fulfillment's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrdersRes>} Resolves to the order's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.cancelFulfillment(orderId, fulfillmentId)\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  cancelFulfillment(\n    id: string,\n    fulfillmentId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/fulfillments/${fulfillmentId}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Cancel a swap's fulfillment and change its fulfillment status to `canceled`.\n   * @param {string} id - The ID of the order that the swap is associated with.\n   * @param {string} swapId - The ID of the swap the fulfillment belongs to.\n   * @param {string} fulfillmentId - The fulfillment's ID. \n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrdersRes>} Resolves to the order's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.cancelSwapFulfillment(orderId, swapId, fulfillmentId)\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  cancelSwapFulfillment(\n    id: string,\n    swapId: string,\n    fulfillmentId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/swaps/${swapId}/fulfillments/${fulfillmentId}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Cancel a claim's fulfillment and change its fulfillment status to `canceled`.\n   * @param {string} id - The ID of the order that the claim is associated with.\n   * @param {string} claimId - The claim's ID.\n   * @param {string} fulfillmentId - The fulfillment's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrdersRes>} Resolves to the order's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.cancelClaimFulfillment(orderId, claimId, fulfillmentId)\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  cancelClaimFulfillment(\n    id: string,\n    claimId: string,\n    fulfillmentId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/claims/${claimId}/fulfillments/${fulfillmentId}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Create a shipment and mark a fulfillment as shipped. This changes the order's fulfillment status to either `partially_shipped` or `shipped`, depending on\n   * whether all the items were shipped.\n   * @param {string} id - The ID of the order\n   * @param {AdminPostOrdersOrderShipmentReq} payload - The shipment to be created.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrdersRes>} Resolves to the order's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.createShipment(order_id, {\n   *   fulfillment_id\n   * })\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  createShipment(\n    id: string,\n    payload: AdminPostOrdersOrderShipmentReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/shipment`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Request and create a return for items in an order. If the return shipping method is specified, it will be automatically fulfilled.\n   * @param {string} id - The order's ID.\n   * @param {AdminPostOrdersOrderReturnsReq} payload - The return to be created.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrdersRes>} Resolves to the order's details. You can access the return under the `returns` property.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.requestReturn(orderId, {\n   *   items: [\n   *     {\n   *       item_id,\n   *       quantity: 1\n   *     }\n   *   ]\n   * })\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  requestReturn(\n    id: string,\n    payload: AdminPostOrdersOrderReturnsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/return`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Cancel an order and change its status. This will also cancel any associated fulfillments and payments, and it may fail if the payment or fulfillment Provider \n   * is unable to cancel the payment/fulfillment.\n   * @param {string} id - The order's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrdersRes>} Resolves to the order's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.cancel(orderId)\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  cancel(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Add a shipping method to an order. If another shipping method exists with the same shipping profile, the previous shipping method will be replaced.\n   * @param {string} id - The order's ID. \n   * @param {AdminPostOrdersOrderShippingMethodsReq} payload - The shipping method to be added.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrdersRes>} Resolves to the order's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.addShippingMethod(orderId, {\n   *   price: 1000,\n   *   option_id\n   * })\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  addShippingMethod(\n    id: string,\n    payload: AdminPostOrdersOrderShippingMethodsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/shipping-methods`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Archive an order and change its status.\n   * @param {string} id - The order's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrdersRes>} Resolves to the order's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.archive(orderId)\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  archive(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/archive`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Create a swap for an order. This includes creating a return that is associated with the swap.\n   * @param {string} id - The order's ID.\n   * @param {AdminPostOrdersOrderSwapsReq} payload - The swap to be created.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrdersRes>} Resolves to the order's details. You can access the swap under the `swaps` property.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.createSwap(orderId, {\n   *   return_items: [\n   *     {\n   *       item_id,\n   *       quantity: 1\n   *     }\n   *   ]\n   * })\n   * .then(({ order }) => {\n   *   console.log(order.swaps);\n   * })\n   */\n  createSwap(\n    id: string,\n    payload: AdminPostOrdersOrderSwapsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/swaps`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Cancel a swap and change its status.\n   * @param {string} id - The ID of the order that the swap belongs to.\n   * @param {string} swapId - The swap's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrdersRes>} Resolves to the order's details. You can access the swap under the `swaps` property.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.cancelSwap(orderId, swapId)\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  cancelSwap(\n    id: string,\n    swapId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/swaps/${swapId}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Create a Fulfillment for a Swap and change its fulfillment status to `fulfilled`. If it requires any additional actions,\n   * its fulfillment status may change to `requires_action`.\n   * @param {string} id - The ID of the order that the swap belongs to.\n   * @param {string} swapId - The swap's ID.\n   * @param {AdminPostOrdersOrderSwapsSwapFulfillmentsReq} payload - The fulfillment to be created.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrdersRes>} Resolves to the order's details. You can access the swap under the `swaps` property.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.fulfillSwap(orderId, swapId, {\n   *   no_notification: true,\n   * })\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  fulfillSwap(\n    id: string,\n    swapId: string,\n    payload: AdminPostOrdersOrderSwapsSwapFulfillmentsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/swaps/${swapId}/fulfillments`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Create a shipment for a swap and mark its fulfillment as shipped. This changes the swap's fulfillment status to either `shipped` or `partially_shipped`, depending on\n   * whether all the items were shipped.\n   * @param {string} id - The ID of the order that the swap belongs to.\n   * @param {string} swapId - The swap's ID.\n   * @param {AdminPostOrdersOrderSwapsSwapShipmentsReq} payload - The shipment to be created.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrdersRes>} Resolves to the order's details. You can access the swap under the `swaps` property.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.createSwapShipment(orderId, swapId, {\n   *   fulfillment_id\n   * })\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  createSwapShipment(\n    id: string,\n    swapId: string,\n    payload: AdminPostOrdersOrderSwapsSwapShipmentsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/swaps/${swapId}/shipments`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Process a swap's payment either by refunding or issuing a payment. This depends on the `difference_due` of the swap. If `difference_due` is negative, the amount is refunded.\n   * If `difference_due` is positive, the amount is captured.\n   * @param {string} id - The ID of the order that the swap belongs to.\n   * @param {string} swapId - The swap's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrdersRes>} Resolves to the order's details. You can access the swap under the `swaps` property.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.processSwapPayment(orderId, swapId)\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  processSwapPayment(\n    id: string,\n    swapId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/swaps/${swapId}/process-payment`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Create a claim for an order. If a return shipping method is specified, a return will also be created and associated with the claim. If the claim's type is `refund`,\n   * the refund is processed as well.\n   * @param {string} id - The order's ID.\n   * @param {AdminPostOrdersOrderClaimsReq} payload - The claim to be created.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrdersRes>} Resolves to the order's details. You can access the claim under the `claims` property.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.createClaim(orderId, {\n   *   type: 'refund',\n   *   claim_items: [\n   *     {\n   *       item_id,\n   *       quantity: 1\n   *     }\n   *   ]\n   * })\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  createClaim(\n    id: string,\n    payload: AdminPostOrdersOrderClaimsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/claims`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Cancel a claim and change its status. A claim can't be canceled if it has a refund, if its fulfillments haven't been canceled, of if its associated return hasn't been canceled.\n   * @param {string} id - The ID of the order that the claim belongs to.\n   * @param {string} claimId - The claim's ID. \n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrdersRes>} Resolves to the order's details. You can access the swap under the `claims` property.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.cancelClaim(orderId, claimId)\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  cancelClaim(\n    id: string,\n    claimId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/claims/${claimId}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Update a claim's details.\n   * @param {string} id - The ID of the order that the claim belongs to.\n   * @param {string} claimId - The claim's ID.\n   * @param {AdminPostOrdersOrderClaimsClaimReq} payload - The attributes to update in the claim.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrdersRes>} Resolves to the order's details. You can access the claims under the `claims` property.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.updateClaim(orderId, claimId, {\n   *   no_notification: true\n   * })\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  updateClaim(\n    id: string,\n    claimId: string,\n    payload: AdminPostOrdersOrderClaimsClaimReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/claims/${claimId}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Create a Fulfillment for a Claim, and change its fulfillment status to `partially_fulfilled` or `fulfilled` depending on whether all the items were fulfilled.\n   * It may also change the status to `requires_action` if any actions are required.\n   * @param {string} id - The ID of the order that the claim belongs to.\n   * @param {string} claimId - The claim's ID.\n   * @param {AdminPostOrdersOrderClaimsClaimFulfillmentsReq} payload - The fulfillment to be created.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrdersRes>} Resolves to the order's details. You can access the swap under the `claims` property.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.fulfillClaim(orderId, claimId, {\n   * })\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  fulfillClaim(\n    id: string,\n    claimId: string,\n    payload: AdminPostOrdersOrderClaimsClaimFulfillmentsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/claims/${claimId}/fulfillments`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Create a shipment for the claim and mark its fulfillment as shipped. If the shipment is created successfully, this changes the claim's fulfillment status\n   * to either `partially_shipped` or `shipped`, depending on whether all the items were shipped.\n   * @param {string} id - The ID of the order that the claim belongs to.\n   * @param {string} claimId - The claim's ID.\n   * @param {AdminPostOrdersOrderClaimsClaimShipmentsReq} payload - The shipment to create.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminOrdersRes>} Resolves to the order's details. You can access the swap under the `claims` property.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.orders.createClaimShipment(orderId, claimId, {\n   *   fulfillment_id\n   * })\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * })\n   */\n  createClaimShipment(\n    id: string,\n    claimId: string,\n    payload: AdminPostOrdersOrderClaimsClaimShipmentsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminOrdersRes> {\n    const path = `/admin/orders/${id}/claims/${claimId}/shipments`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminOrdersResource\n", "import {\n  AdminGetPaymentCollectionsParams,\n  AdminPaymentCollectionDeleteRes,\n  AdminPaymentCollectionsRes,\n  AdminUpdatePaymentCollectionsReq,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\nimport qs from \"qs\"\n\n/**\n * This class is used to send requests to [Admin Payment Collection API Routes](https://docs.medusajs.com/v1/api/admin#payment-collections). All its method\n * are available in the JS Client under the `medusa.admin.paymentCollections` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * A payment collection is useful for managing additional payments, such as for Order Edits, or installment payments.\n */\nclass AdminPaymentCollectionsResource extends BaseResource {\n  /**\n   * Retrieve a Payment Collection's details.\n   * @param {string} id - The ID of the payment collection.\n   * @param {AdminGetPaymentCollectionsParams} query - Configurations to apply on the retrieved payment collection.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPaymentCollectionsRes>} Resolves to the payment collection's details.\n   * \n   * @example\n   * A simple example that retrieves a payment collection by its ID:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.paymentCollections.retrieve(paymentCollectionId)\n   * .then(({ payment_collection }) => {\n   *     console.log(payment_collection.id)\n   *   })\n   * ```\n   * \n   * To specify relations that should be retrieved:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.paymentCollections.retrieve(paymentCollectionId, {\n   *   expand: \"currency\"\n   * })\n   * .then(({ payment_collection }) => {\n   *   console.log(payment_collection.id)\n   * })\n   * ```\n   */\n  retrieve(\n    id: string,\n    query?: AdminGetPaymentCollectionsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPaymentCollectionsRes> {\n    let path = `/admin/payment-collections/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Update a payment collection's details.\n   * @param {string} id - The ID of the payment collection.\n   * @param {AdminUpdatePaymentCollectionsReq} payload - The attributes to update in the payment collection.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPaymentCollectionsRes>} Resolves to the payment collection's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.paymentCollections.update(paymentCollectionId, {\n   *   description\n   * })\n   * .then(({ payment_collection }) => {\n   *   console.log(payment_collection.id)\n   * })\n   */\n  update(\n    id: string,\n    payload: AdminUpdatePaymentCollectionsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPaymentCollectionsRes> {\n    const path = `/admin/payment-collections/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a payment collection. Only payment collections with the statuses `canceled` or `not_paid` can be deleted.\n   * @param {string} id - The ID of the payment collection.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPaymentCollectionDeleteRes>} Resolves to the deletion operation's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.paymentCollections.delete(paymentCollectionId)\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id)\n   * })\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPaymentCollectionDeleteRes> {\n    const path = `/admin/payment-collections/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Set the status of a payment collection as `authorized`. This will also change the `authorized_amount` of the payment collection.\n   * @param {string} id - The ID of the payment collection.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPaymentCollectionsRes>} Resolves to the payment collection's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.paymentCollections.markAsAuthorized(paymentCollectionId)\n   * .then(({ payment_collection }) => {\n   *   console.log(payment_collection.id)\n   * })\n   */\n  markAsAuthorized(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPaymentCollectionsRes> {\n    const path = `/admin/payment-collections/${id}/authorize`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminPaymentCollectionsResource\n", "import {\n  AdminPaymentRes,\n  AdminPostPaymentRefundsReq,\n  AdminRefundRes,\n  GetPaymentsParams,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Payment API Routes](https://docs.medusajs.com/v1/api/admin#payments). All its method\n * are available in the JS Client under the `medusa.admin.payments` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * A payment can be related to an order, swap, return, or more. It can be captured or refunded.\n */\nclass AdminPaymentsResource extends BaseResource {\n  /**\n   * Retrieve a payment's details.\n   * @param {string} id - The payment's ID.\n   * @param {GetPaymentsParams} query - Configurations to apply on the retrieved payment.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPaymentRes>} Resolves to the payment's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.payments.retrieve(paymentId)\n   * .then(({ payment }) => {\n   *   console.log(payment.id);\n   * })\n   */\n  retrieve(\n    id: string,\n    query?: GetPaymentsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPaymentRes> {\n    let path = `/admin/payments/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/payments/${id}?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Capture a payment.\n   * @param {string} id - The payment's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPaymentRes>} Resolves to the payment's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.payments.capturePayment(paymentId)\n   * .then(({ payment }) => {\n   *   console.log(payment.id);\n   * })\n   */\n  capturePayment(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPaymentRes> {\n    const path = `/admin/payments/${id}/capture`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Refund a payment. The payment must be captured first.\n   * @param {string} id - The payment's ID.\n   * @param {AdminPostPaymentRefundsReq} payload - The refund to be created.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminRefundRes>} Resolves to the refund's details.\n   * \n   * @example\n   * import { RefundReason } from \"@medusajs/medusa\";\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.payments.refundPayment(paymentId, {\n   *   amount: 1000,\n   *   reason: RefundReason.RETURN,\n   *   note: \"Do not like it\",\n   * })\n   * .then(({ refund }) => {\n   *   console.log(refund.amount);\n   * })\n   */\n  refundPayment(\n    id: string,\n    payload: AdminPostPaymentRefundsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRefundRes> {\n    const path = `/admin/payments/${id}/refund`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminPaymentsResource\n", "import {\n  AdminDeletePriceListPricesPricesReq,\n  AdminDeletePriceListsPriceListProductsPricesBatchReq,\n  AdminGetPriceListPaginationParams,\n  AdminGetPriceListsPriceListProductsParams,\n  AdminPostPriceListPricesPricesReq,\n  AdminPostPriceListsPriceListPriceListReq,\n  AdminPostPriceListsPriceListReq,\n  AdminPriceListDeleteBatchRes,\n  AdminPriceListDeleteProductPricesRes,\n  AdminPriceListDeleteRes,\n  AdminPriceListDeleteVariantPricesRes,\n  AdminPriceListRes,\n  AdminPriceListsListRes,\n  AdminPriceListsProductsListRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Price List API Routes](https://docs.medusajs.com/v1/api/admin#price-lists). All its method\n * are available in the JS Client under the `medusa.admin.priceLists` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * A price list are special prices applied to products based on a set of conditions, such as customer group.\n * \n * Related Guide: [How to manage price lists](https://docs.medusajs.com/v1/modules/price-lists/admin/manage-price-lists).\n */\nclass AdminPriceListResource extends BaseResource {\n  /**\n   * Create a price list.\n   * @param {AdminPostPriceListsPriceListReq} payload - The price list to create.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPriceListRes>} Resolves to the price list details.\n   * \n   * @example\n   * medusa.admin.priceLists.create({\n   *   name: \"New Price List\",\n   *   description: \"A new price list\",\n   *   type: PriceListType.SALE,\n   *   prices: [\n   *     {\n   *       amount: 1000,\n   *       variant_id,\n   *       currency_code: \"eur\"\n   *     }\n   *   ]\n   * })\n   * .then(({ price_list }) => {\n   *   console.log(price_list.id);\n   * })\n   */\n  create(\n    payload: AdminPostPriceListsPriceListReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListRes> {\n    const path = `/admin/price-lists`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Update a price list's details.\n   * @param {string} id - The ID of the price list.\n   * @param {AdminPostPriceListsPriceListPriceListReq} payload - The attributes to update in the price list.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPriceListRes>} Resolves to the price list details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.priceLists.update(priceListId, {\n   *   name: \"New Price List\"\n   * })\n   * .then(({ price_list }) => {\n   *   console.log(price_list.id);\n   * })\n   */\n  update(\n    id: string,\n    payload: AdminPostPriceListsPriceListPriceListReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListRes> {\n    const path = `/admin/price-lists/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a price list and its associated prices.\n   * @param {string} id - The ID of the price list.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPriceListDeleteRes>} Resolves to the deletion operation's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.priceLists.delete(priceListId)\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id);\n   * })\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListDeleteRes> {\n    const path = `/admin/price-lists/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a price list's details.\n   * @param {string} id - The ID of the price list.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPriceListRes>} Resolves to the price list details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.priceLists.retrieve(priceListId)\n   * .then(({ price_list }) => {\n   *   console.log(price_list.id);\n   * })\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListRes> {\n    const path = `/admin/price-lists/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of price lists. The price lists can be filtered by fields such as `q` or `status` passed in the `query` parameter. The price lists can also be sorted or paginated.\n   * @param {AdminGetPriceListPaginationParams} query - Filters and pagination configurations to apply on the retrieved price lists.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPriceListsListRes>} Resolves to the list of price lists with pagination fields.\n   * \n   * @example\n   * To list price lists:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.priceLists.list()\n   * .then(({ price_lists, limit, offset, count }) => {\n   *   console.log(price_lists.length);\n   * })\n   * ```\n   * \n   * To specify relations that should be retrieved within the price lists:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.priceLists.list({\n   *   expand: \"prices\"\n   * })\n   * .then(({ price_lists, limit, offset, count }) => {\n   *   console.log(price_lists.length);\n   * })\n   * ```\n   * \n   * By default, only the first `10` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.priceLists.list({\n   *   expand: \"prices\",\n   *   limit,\n   *   offset\n   * })\n   * .then(({ price_lists, limit, offset, count }) => {\n   *   console.log(price_lists.length);\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetPriceListPaginationParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListsListRes> {\n    let path = `/admin/price-lists/`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/price-lists?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a price list's products. The products can be filtered by fields such as `q` or `status` passed in the `query` parameter. The products can also be sorted or paginated.\n   * @param {string} id - The ID of the price list.\n   * @param {AdminGetPriceListsPriceListProductsParams} query - Filters and pagination configurations applied on the retrieved products.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPriceListsProductsListRes>} Resolves to the list of products with pagination fields.\n   * \n   * @example\n   * To list products in a price list:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.priceLists.listProducts(priceListId)\n   * .then(({ products, limit, offset, count }) => {\n   *   console.log(products.length);\n   * })\n   * ```\n   * \n   * To specify relations that should be retrieved within the products:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.priceLists.listProducts(priceListId, {\n   *   expand: \"variants\"\n   * })\n   * .then(({ products, limit, offset, count }) => {\n   *   console.log(products.length);\n   * })\n   * ```\n   * \n   * By default, only the first `50` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.priceLists.listProducts(priceListId, {\n   *   expand: \"variants\",\n   *   limit,\n   *   offset\n   * })\n   * .then(({ products, limit, offset, count }) => {\n   *   console.log(products.length);\n   * })\n   * ```\n   */\n  listProducts(\n    id: string,\n    query?: AdminGetPriceListsPriceListProductsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListsProductsListRes> {\n    let path = `/admin/price-lists/${id}/products`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/price-lists/${id}/products?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Add or update a list of prices in a price list.\n   * @param {string} id - The ID of the price list.\n   * @param {AdminPostPriceListPricesPricesReq} payload - The details of prices to add or update.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPriceListRes>} Resolves to the price list's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.priceLists.addPrices(priceListId, {\n   *   prices: [\n   *     {\n   *       amount: 1000,\n   *       variant_id,\n   *       currency_code: \"eur\"\n   *     }\n   *   ]\n   * })\n   * .then(({ price_list }) => {\n   *   console.log(price_list.id);\n   * })\n   */\n  addPrices(\n    id: string,\n    payload: AdminPostPriceListPricesPricesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListRes> {\n    const path = `/admin/price-lists/${id}/prices/batch`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a list of prices in a price list\n   * @param {string} id - The ID of the price list.\n   * @param {AdminDeletePriceListPricesPricesReq} payload - The prices to delete.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPriceListDeleteBatchRes>} Resolves to the deletion operation's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.priceLists.deletePrices(priceListId, {\n   *   price_ids: [\n   *     price_id\n   *   ]\n   * })\n   * .then(({ ids, object, deleted }) => {\n   *   console.log(ids.length);\n   * })\n   */\n  deletePrices(\n    id: string,\n    payload: AdminDeletePriceListPricesPricesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListDeleteBatchRes> {\n    const path = `/admin/price-lists/${id}/prices/batch`\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete all the prices related to a specific product in a price list.\n   * @param {string} priceListId - The ID of the price list.\n   * @param {string} productId - The product's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPriceListDeleteProductPricesRes>} Resolves to the deletion operation's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.priceLists.deleteProductPrices(priceListId, productId)\n   * .then(({ ids, object, deleted }) => {\n   *   console.log(ids.length);\n   * })\n   */\n  deleteProductPrices(\n    priceListId: string,\n    productId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListDeleteProductPricesRes> {\n    const path = `/admin/price-lists/${priceListId}/products/${productId}/prices`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Delete all the prices related to a specific product variant in a price list.\n   * @param {string} priceListId - The ID of the price list.\n   * @param {string} variantId - The ID of the product variant.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPriceListDeleteVariantPricesRes>} Resolves to the deletion operation's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.priceLists.deleteVariantPrices(priceListId, variantId)\n   * .then(({ ids, object, deleted }) => {\n   *   console.log(ids);\n   * })\n   */\n  deleteVariantPrices(\n    priceListId: string,\n    variantId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListDeleteVariantPricesRes> {\n    const path = `/admin/price-lists/${priceListId}/variants/${variantId}/prices`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Delete all the prices associated with multiple products in a price list.\n   * @param {string} priceListId - The ID of the price list.\n   * @param {AdminDeletePriceListsPriceListProductsPricesBatchReq} payload - The products whose prices should be deleted.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPriceListDeleteProductPricesRes>} Resolves to the deletion operation's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.priceLists.deleteProductsPrices(priceListId, {\n   *   product_ids: [\n   *     productId1,\n   *     productId2,\n   *   ]\n   * })\n   * .then(({ ids, object, deleted }) => {\n   *   console.log(ids.length);\n   * })\n   */\n  deleteProductsPrices(\n    priceListId: string,\n    payload: AdminDeletePriceListsPriceListProductsPricesBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPriceListDeleteProductPricesRes> {\n    const path = `/admin/price-lists/${priceListId}/products/prices/batch`\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminPriceListResource\n", "import {\n  AdminDeleteProductCategoriesCategoryProductsBatchReq,\n  AdminGetProductCategoriesParams,\n  AdminPostProductCategoriesCategoryProductsBatchReq,\n  AdminPostProductCategoriesReq,\n  AdminProductCategoriesCategoryDeleteRes,\n  AdminProductCategoriesListRes,\n  AdminProductCategoriesCategoryRes,\n  AdminGetProductCategoryParams,\n  AdminPostProductCategoriesCategoryReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\n\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Product Category API Routes](https://docs.medusajs.com/v1/api/admin#product-categories). All its method\n * are available in the JS Client under the `medusa.admin.productCategories` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * Products can be categoriezed into categories. A product can be added into more than one category.\n * \n * Related Guide: [How to manage product categories](https://docs.medusajs.com/v1/modules/products/admin/manage-categories).\n * \n * @featureFlag product_categories\n */\nclass AdminProductCategoriesResource extends BaseResource {\n  /**\n   * Retrieve a product category's details.\n   * @param {string} productCategoryId - The ID of the product category.\n   * @param {AdminGetProductCategoryParams} query - Configurations to apply on the retrieved product category.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminProductCategoriesCategoryRes>} Resolves to the product category's details.\n   * \n   * @example\n   * A simple example that retrieves an order by its ID:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.productCategories.retrieve(productCategoryId)\n   * .then(({ product_category }) => {\n   *   console.log(product_category.id);\n   * })\n   * ```\n   * \n   * To specify relations that should be retrieved:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.productCategories.retrieve(productCategoryId, {\n   *   expand: \"category_children\"\n   * })\n   * .then(({ product_category }) => {\n   *   console.log(product_category.id);\n   * })\n   * ```\n   */\n  retrieve(\n    productCategoryId: string,\n    query?: AdminGetProductCategoryParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductCategoriesCategoryRes> {\n    let path = `/admin/product-categories/${productCategoryId}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `${path}?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Create a product category.\n   * @param {AdminPostProductCategoriesReq} payload - The product category's details.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminProductCategoriesCategoryRes>} Resolves to the product category's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.productCategories.create({\n   *   name: \"Skinny Jeans\",\n   * })\n   * .then(({ product_category }) => {\n   *   console.log(product_category.id);\n   * })\n   */\n  create(\n    payload: AdminPostProductCategoriesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductCategoriesCategoryRes> {\n    const path = `/admin/product-categories`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Updates a product category.\n   * @param {string} productCategoryId - The ID of the product category.\n   * @param {AdminPostProductCategoriesCategoryReq} payload - The attributes to update in the product category.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminProductCategoriesCategoryRes>} Resolves to the product category's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.productCategories.update(productCategoryId, {\n   *   name: \"Skinny Jeans\"\n   * })\n   * .then(({ product_category }) => {\n   *   console.log(product_category.id);\n   * })\n   */\n  update(\n    productCategoryId: string,\n    payload: AdminPostProductCategoriesCategoryReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductCategoriesCategoryRes> {\n    const path = `/admin/product-categories/${productCategoryId}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of product categories. The product categories can be filtered by fields such as `q` or `handle` passed in the `query` parameter. \n   * The product categories can also be paginated.\n   * @param {AdminGetProductCategoriesParams} query - Filters and pagination configurations to apply on the retrieved product categories.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminProductCategoriesListRes>} Resolves to the list of product categories with pagination fields.\n   * \n   * @example\n   * To list product categories:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.productCategories.list()\n   * .then(({ product_categories, limit, offset, count }) => {\n   *   console.log(product_categories.length);\n   * })\n   * ```\n   * \n   * To specify relations that should be retrieved within the product category:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.productCategories.list({\n   *   expand: \"category_children\"\n   * })\n   * .then(({ product_categories, limit, offset, count }) => {\n   *   console.log(product_categories.length);\n   * })\n   * ```\n   * \n   * By default, only the first `100` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.productCategories.list({\n   *   expand: \"category_children\",\n   *   limit,\n   *   offset\n   * })\n   * .then(({ product_categories, limit, offset, count }) => {\n   *   console.log(product_categories.length);\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetProductCategoriesParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductCategoriesListRes> {\n    let path = `/admin/product-categories`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Delete a product category. This does not delete associated products.\n   * @param {string} productCategoryId - The ID of the product category.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminProductCategoriesCategoryDeleteRes>} Resolves to the deletion operation's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.productCategories.delete(productCategoryId)\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id);\n   * })\n   */\n  delete(\n    productCategoryId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductCategoriesCategoryDeleteRes> {\n    const path = `/admin/product-categories/${productCategoryId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Remove a list of products from a product category.\n   * @param {string} productCategoryId - The ID of the product category.\n   * @param {AdminDeleteProductCategoriesCategoryProductsBatchReq} payload - The products to delete.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminProductCategoriesCategoryRes>} Resolves to the product category's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.productCategories.removeProducts(productCategoryId, {\n   *   product_ids: [\n   *     {\n   *       id: productId\n   *     }\n   *   ]\n   * })\n   * .then(({ product_category }) => {\n   *   console.log(product_category.id);\n   * })\n   */\n  removeProducts(\n    productCategoryId: string,\n    payload: AdminDeleteProductCategoriesCategoryProductsBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductCategoriesCategoryRes> {\n    const path = `/admin/product-categories/${productCategoryId}/products/batch`\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Add a list of products to a product category.\n   * @param {string} productCategoryId - The ID of the product category.\n   * @param {AdminPostProductCategoriesCategoryProductsBatchReq} payload - The products to add.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminProductCategoriesCategoryRes>} Resolves to the product category's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.productCategories.addProducts(productCategoryId, {\n   *   product_ids: [\n   *     {\n   *       id: productId\n   *     }\n   *   ]\n   * })\n   * .then(({ product_category }) => {\n   *   console.log(product_category.id);\n   * })\n   */\n  addProducts(\n    productCategoryId: string,\n    payload: AdminPostProductCategoriesCategoryProductsBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductCategoriesCategoryRes> {\n    const path = `/admin/product-categories/${productCategoryId}/products/batch`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminProductCategoriesResource\n", "import {\n  AdminGetProductTagsParams,\n  AdminProductTagsListRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Product Tag API Routes](https://docs.medusajs.com/v1/api/admin#product-tags). All its method\n * are available in the JS Client under the `medusa.admin.productTags` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * Product tags are string values created when you create or update a product with a new tag.\n * Products can have more than one tag, and products can share tags. This allows admins to associate products to similar tags that can be used to filter products.\n */\nclass AdminProductTagsResource extends BaseResource {\n  /**\n   * Retrieve a list of product tags. The product tags can be filtered by fields such as `q` or `value` passed in the `query` parameter. The product tags can also be sorted or paginated.\n   * @param {AdminGetProductTagsParams} query - Filters and pagination configurations to apply on the retrieved product tags.\n   * @returns {ResponsePromise<AdminProductTagsListRes>} Resolves to the list of product tags with pagination fields.\n   * \n   * @example\n   * To list product tags:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.productTags.list()\n   * .then(({ product_tags }) => {\n   *   console.log(product_tags.length);\n   * })\n   * ```\n   * \n   * By default, only the first `10` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.productTags.list({\n   *   limit,\n   *   offset\n   * })\n   * .then(({ product_tags }) => {\n   *   console.log(product_tags.length);\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetProductTagsParams\n  ): ResponsePromise<AdminProductTagsListRes> {\n    let path = `/admin/product-tags`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/product-tags?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path)\n  }\n}\n\nexport default AdminProductTagsResource\n", "import {\n  AdminGetProductTypesParams,\n  AdminProductTypesListRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Product Type API Routes](https://docs.medusajs.com/v1/api/admin#product-types). All its method\n * are available in the JS Client under the `medusa.admin.productTypes` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * Product types are string values created when you create or update a product with a new type.\n * Products can have one type, and products can share types. This allows admins to associate products with a type that can be used to filter products.\n */\nclass AdminProductTypesResource extends BaseResource {\n  /**\n   * Retrieve a list of product types. The product types can be filtered by fields such as `q` or `value` passed in the `query` parameter.\n   * The product types can also be sorted or paginated.\n   * @param {AdminGetProductTypesParams} query - Filters and pagination configurations to apply on the retrieved product types.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminProductTypesListRes>} Resolves to the list of product types with pagination fields.\n   * \n   * @example\n   * To list product types:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.productTypes.list()\n   * .then(({ product_types }) => {\n   *   console.log(product_types.length);\n   * })\n   * ```\n   * \n   * By default, only the first `20` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.productTypes.list({\n   *   limit,\n   *   offset\n   * })\n   * .then(({ product_types }) => {\n   *   console.log(product_types.length);\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetProductTypesParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductTypesListRes> {\n    let path = `/admin/product-types`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminProductTypesResource\n", "import {\n  AdminGetProductsParams,\n  AdminGetProductsVariantsParams,\n  AdminPostProductsProductMetadataReq,\n  AdminPostProductsProductOptionsOption,\n  AdminPostProductsProductOptionsReq,\n  AdminPostProductsProductReq,\n  AdminPostProductsProductVariantsReq,\n  AdminPostProductsProductVariantsVariantReq,\n  AdminPostProductsReq,\n  AdminProductsDeleteOptionRes,\n  AdminProductsDeleteRes,\n  AdminProductsDeleteVariantRes,\n  AdminProductsListRes,\n  AdminProductsListTagsRes,\n  AdminProductsListTypesRes,\n  AdminProductsListVariantsRes,\n  AdminProductsRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Product API Routes](https://docs.medusajs.com/v1/api/admin#products). All its method\n * are available in the JS Client under the `medusa.admin.products` property.\n *\n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n *\n * Products are saleable items in a store. This also includes [saleable gift cards](https://docs.medusajs.com/v1/modules/gift-cards/admin/manage-gift-cards#manage-gift-card-product) in a store.\n *\n * Related Guide: [How to manage products](https://docs.medusajs.com/v1/modules/products/admin/manage-products).\n */\nclass AdminProductsResource extends BaseResource {\n  /**\n   * Create a new Product. This API Route can also be used to create a gift card if the `is_giftcard` field is set to `true`.\n   * @param {AdminPostProductsReq} payload - The product to create.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminProductsRes>} Resolves to the product's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.products.create({\n   *   title: \"Shirt\",\n   *   is_giftcard: false,\n   *   discountable: true\n   * })\n   * .then(({ product }) => {\n   *   console.log(product.id);\n   * })\n   */\n  create(\n    payload: AdminPostProductsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsRes> {\n    const path = `/admin/products/`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a product's details.\n   * @param {string} id - The product's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminProductsRes>} Resolves to the product's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.products.retrieve(productId)\n   * .then(({ product }) => {\n   *   console.log(product.id);\n   * })\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsRes> {\n    const path = `/admin/products/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Update a Product's details.\n   * @param {string} id - The product's ID.\n   * @param {AdminPostProductsProductReq} payload - The attributes to update in a product.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminProductsRes>} Resolves to the product's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.products.update(productId, {\n   *   title: \"Shirt\",\n   * })\n   * .then(({ product }) => {\n   *   console.log(product.id);\n   * })\n   */\n  update(\n    id: string,\n    payload: AdminPostProductsProductReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsRes> {\n    const path = `/admin/products/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a product and its associated product variants and options.\n   * @param {string} id - The product's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminProductsDeleteRes>} Resolves to the deletion operation's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.products.delete(productId)\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id);\n   * })\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsDeleteRes> {\n    const path = `/admin/products/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of products. The products can be filtered by fields such as `q` or `status` passed in the `query` parameter. The products can also be sorted or paginated.\n   * @param {AdminGetProductsParams} query - Filters and pagination configurations to apply on the retrieved products.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminProductsListRes>} Resolves to the list of products with pagination fields.\n   *\n   * @example\n   * To list products:\n   *\n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.products.list()\n   * .then(({ products, limit, offset, count }) => {\n   *   console.log(products.length);\n   * })\n   * ```\n   *\n   * To specify relations that should be retrieved within the products:\n   *\n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.products.list({\n   *   expand: \"images\"\n   * })\n   * .then(({ products, limit, offset, count }) => {\n   *   console.log(products.length);\n   * })\n   * ```\n   *\n   * By default, only the first `50` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   *\n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.products.list({\n   *   expand: \"images\",\n   *   limit,\n   *   offset\n   * })\n   * .then(({ products, limit, offset, count }) => {\n   *   console.log(products.length);\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetProductsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsListRes> {\n    let path = `/admin/products`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/products?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * @ignore\n   *\n   * @deprecated Use {@link AdminProductTypesResource.list} instead.\n   */\n  listTypes(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsListTypesRes> {\n    const path = `/admin/products/types`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of Product Tags with how many times each is used in products.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminProductsListTagsRes>} Resolves to the list of tags.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.products.listTags()\n   * .then(({ tags }) => {\n   *   console.log(tags.length);\n   * })\n   */\n  listTags(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsListTagsRes> {\n    const path = `/admin/products/tag-usage`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Set the metadata of a product. It can be any key-value pair, which allows adding custom data to a product. Learn about how you can update and delete the metadata attribute\n   * [here](https://docs.medusajs.com/v1/development/entities/overview#metadata-attribute).\n   * @param {string} id - The product's ID.\n   * @param {AdminPostProductsProductMetadataReq} payload - The metadata details to add, update, or delete.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminProductsRes>} Resolves to the product's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.products.setMetadata(productId, {\n   *   key: \"test\",\n   *   value: \"true\"\n   * })\n   * .then(({ product }) => {\n   *   console.log(product.id);\n   * })\n   */\n  setMetadata(\n    id: string,\n    payload: AdminPostProductsProductMetadataReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsRes> {\n    const path = `/admin/products/${id}/metadata`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Create a product variant associated with a product. Each product variant must have a unique combination of product option values.\n   * @param {string} id - The ID of the product that the variant belongs to.\n   * @param {AdminPostProductsProductVariantsReq} payload - The product variant to create.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminProductsRes>} Resolves to the product's details. You can access the variant under the `variants` property.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.products.createVariant(productId, {\n   *   title: \"Color\",\n   *   prices: [\n   *     {\n   *       amount: 1000,\n   *       currency_code: \"eur\"\n   *     }\n   *   ],\n   *   options: [\n   *     {\n   *       option_id,\n   *       value: \"S\"\n   *     }\n   *   ],\n   *   inventory_quantity: 100\n   * })\n   * .then(({ product }) => {\n   *   console.log(product.id);\n   * })\n   */\n  createVariant(\n    id: string,\n    payload: AdminPostProductsProductVariantsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsRes> {\n    const path = `/admin/products/${id}/variants`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Update a product variant's details.\n   * @param {string} id - The ID of the product that the variant belongs to.\n   * @param {string} variantId - The ID of the product variant.\n   * @param {AdminPostProductsProductVariantsVariantReq} payload - The attributes to update in the product variant.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminProductsRes>} Resolves to the product's details. You can access the variant under the `variants` property.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.products.updateVariant(productId, variantId, {\n   *   title: \"Color\",\n   *   prices: [\n   *     {\n   *       amount: 1000,\n   *       currency_code: \"eur\"\n   *     }\n   *   ],\n   *   options: [\n   *     {\n   *       option_id,\n   *       value: \"S\"\n   *     }\n   *   ],\n   *   inventory_quantity: 100\n   * })\n   * .then(({ product }) => {\n   *   console.log(product.id);\n   * })\n   */\n  updateVariant(\n    id: string,\n    variantId: string,\n    payload: AdminPostProductsProductVariantsVariantReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsRes> {\n    const path = `/admin/products/${id}/variants/${variantId}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a product variant.\n   * @param {string} id - The ID of the product that the variant belongs to.\n   * @param {string} variantId - The ID of the product variant.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminProductsDeleteVariantRes>} Resolves to the deletion operation's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.products.deleteVariant(productId, variantId)\n   * .then(({ variant_id, object, deleted, product }) => {\n   *   console.log(product.id);\n   * })\n   */\n  deleteVariant(\n    id: string,\n    variantId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsDeleteVariantRes> {\n    const path = `/admin/products/${id}/variants/${variantId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * List the product variants associated with a product. The product variants can be filtered by fields such as `q` or `manage_inventory` passed in the `query` parameter. The product variants can also be sorted or paginated.\n   * @param {string} id - The ID of the product that the variants belongs to.\n   * @param {AdminGetProductsVariantsParams} query - Filters and pagination configurations to apply on the retrieved product variants. If undefined, the first 100 records are retrieved.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminProductsListVariantsRes>} Resolves to the list of product variants with pagination fields.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.products.listVariants(productId, {\n   *   limit: 10,\n   * })\n   * .then(({ variants, limit, offset, count }) => {\n   *  console.log(variants.length);\n   * })\n   */\n  listVariants(\n    id: string,\n    query?: AdminGetProductsVariantsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsListVariantsRes> {\n    let path = `/admin/products/${id}/variants`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/products/${id}/variants?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Add a product option to a product.\n   * @param {string} id - The product's ID.\n   * @param {AdminPostProductsProductOptionsReq} payload - The option to add.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminProductsRes>} Resolves to the product's details. You can access the variant under the `options` property.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.products.addOption(productId, {\n   *   title: \"Size\"\n   * })\n   * .then(({ product }) => {\n   *   console.log(product.id);\n   * })\n   */\n  addOption(\n    id: string,\n    payload: AdminPostProductsProductOptionsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsRes> {\n    const path = `/admin/products/${id}/options`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Update a product option's details.\n   * @param {string} id - The ID of the product that the option belongs to.\n   * @param {string} optionId - The ID of the product option.\n   * @param {AdminPostProductsProductOptionsOption} payload - The attributes to update in the product option.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminProductsRes>} Resolves to the product's details. You can access the variant under the `options` property.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.products.updateOption(productId, optionId, {\n   *   title: \"Size\"\n   * })\n   * .then(({ product }) => {\n   *   console.log(product.id);\n   * })\n   */\n  updateOption(\n    id: string,\n    optionId: string,\n    payload: AdminPostProductsProductOptionsOption,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsRes> {\n    const path = `/admin/products/${id}/options/${optionId}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a product option. If there are product variants that use this product option, they must be deleted before deleting the product option.\n   * @param {string} id - The ID of the product that the option belongs to.\n   * @param {string} optionId - The ID of the product option.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminProductsDeleteOptionRes>} Resolves to the deletion operation's details.\n   */\n  deleteOption(\n    id: string,\n    optionId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminProductsDeleteOptionRes> {\n    const path = `/admin/products/${id}/options/${optionId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminProductsResource\n", "import qs from \"qs\"\n\nimport {\n  AdminDeletePublishableApiKeySalesChannelsBatchReq,\n  AdminPostPublishableApiKeySalesChannelsBatchReq,\n  AdminPostPublishableApiKeysPublishableApiKeyReq,\n  AdminPostPublishableApiKeysReq,\n  AdminPublishableApiKeyDeleteRes,\n  AdminPublishableApiKeysListRes,\n  AdminPublishableApiKeysRes,\n  GetPublishableApiKeySalesChannelsParams,\n  GetPublishableApiKeysParams,\n} from \"@medusajs/medusa\"\n\nimport { AdminPublishableApiKeysListSalesChannelsRes } from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Publishable API Key API Routes](https://docs.medusajs.com/v1/api/admin#publishable-api-keys). All its method\n * are available in the JS Client under the `medusa.admin.publishableApiKeys` property.\n *\n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n *\n * Publishable API Keys can be used to scope Store API calls with an API key, determining what resources are retrieved when querying the API.\n * For example, a publishable API key can be associated with one or more sales channels. When it is passed in the header of a request to the List Product store API Route,\n * the sales channels are inferred from the key and only products associated with those sales channels are retrieved.\n * Admins can manage publishable API keys and their associated resources. Currently, only Sales Channels are supported as a resource.\n *\n * Related Guide: [How to manage publishable API keys](https://docs.medusajs.com/v1/development/publishable-api-keys/admin/manage-publishable-api-keys).\n */\nclass AdminPublishableApiKeyResource extends BaseResource {\n  /**\n   * Retrieve a publishable API key's details.\n   * @param {string} id - The ID of the publishable API key.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPublishableApiKeysRes>} Resolves to the publishable API key's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.publishableApiKeys.retrieve(publishableApiKeyId)\n   * .then(({ publishable_api_key }) => {\n   *   console.log(publishable_api_key.id)\n   * })\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPublishableApiKeysRes> {\n    let path = `/admin/publishable-api-keys/${id}`\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of publishable API keys. The publishable API keys can be filtered by fields such as `q` passed in `query`. The publishable API keys can also be paginated.\n   * @param {GetPublishableApiKeysParams} query - Filters and pagination configurations to apply on the retrieved publishable API keys.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPublishableApiKeysListRes>} Resolves to the list of publishable API keys with pagination fields.\n   *\n   * @example\n   * To list publishable API keys:\n   *\n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.publishableApiKeys.list()\n   * .then(({ publishable_api_keys, count, limit, offset }) => {\n   *   console.log(publishable_api_keys)\n   * })\n   * ```\n   *\n   * By default, only the first `20` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   *\n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.publishableApiKeys.list({\n   *   limit,\n   *   offset\n   * })\n   * .then(({ publishable_api_keys, count, limit, offset }) => {\n   *   console.log(publishable_api_keys)\n   * })\n   * ```\n   */\n  list(\n    query?: GetPublishableApiKeysParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPublishableApiKeysListRes> {\n    let path = `/admin/publishable-api-keys`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Create a publishable API key.\n   * @param {AdminPostPublishableApiKeysReq} payload - The publishable API key to be created.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPublishableApiKeysRes>} Resolves to the publishbale API key's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.publishableApiKeys.create({\n   *  title\n   * })\n   * .then(({ publishable_api_key }) => {\n   *   console.log(publishable_api_key.id)\n   * })\n   */\n  create(\n    payload: AdminPostPublishableApiKeysReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPublishableApiKeysRes> {\n    const path = `/admin/publishable-api-keys`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Update a publishable API key's details.\n   * @param {string} id - The ID of the publishable API key.\n   * @param {AdminPostPublishableApiKeysPublishableApiKeyReq} payload - The attributes to update in the publishable API key.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPublishableApiKeysRes>} Resolves to the publishbale API key's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.publishableApiKeys.update(publishableApiKeyId, {\n   *   title: \"new title\"\n   * })\n   * .then(({ publishable_api_key }) => {\n   *   console.log(publishable_api_key.id)\n   * })\n   */\n  update(\n    id: string,\n    payload: AdminPostPublishableApiKeysPublishableApiKeyReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPublishableApiKeysRes> {\n    const path = `/admin/publishable-api-keys/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a publishable API key. Associated resources, such as sales channels, are not deleted.\n   * @param {string} id  - The ID of the publishable API key\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPublishableApiKeyDeleteRes>} Resolves to the delete operation's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.publishableApiKeys.delete(publishableApiKeyId)\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id)\n   * })\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPublishableApiKeyDeleteRes> {\n    const path = `/admin/publishable-api-keys/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Revoke a publishable API key. Revoking the publishable API Key can't be undone, and the key can't be used in future requests.\n   * @param {string} id - The ID of the publishable API key.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPublishableApiKeysRes>} Resolves to the publishbale API key's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.publishableApiKeys.revoke(publishableApiKeyId)\n   * .then(({ publishable_api_key }) => {\n   *   console.log(publishable_api_key.id)\n   * })\n   */\n  revoke(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPublishableApiKeysRes> {\n    const path = `/admin/publishable-api-keys/${id}/revoke`\n    return this.client.request(\"POST\", path, {}, {}, customHeaders)\n  }\n\n  /**\n   * Add a list of sales channels to a publishable API key.\n   * @param {string} id - The ID of the publishable API key.\n   * @param {AdminPostPublishableApiKeySalesChannelsBatchReq} payload - The sales channels to add.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPublishableApiKeysRes>} Resolves to the publishbale API key's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.publishableApiKeys.addSalesChannelsBatch(publishableApiKeyId, {\n   *   sales_channel_ids: [\n   *     {\n   *       id: channelId\n   *     }\n   *   ]\n   * })\n   * .then(({ publishable_api_key }) => {\n   *   console.log(publishable_api_key.id);\n   * })\n   */\n  addSalesChannelsBatch(\n    id: string,\n    payload: AdminPostPublishableApiKeySalesChannelsBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPublishableApiKeysRes> {\n    const path = `/admin/publishable-api-keys/${id}/sales-channels/batch`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Remove a list of sales channels from a publishable API key. This doesn't delete the sales channels and only removes the association between them and the publishable API key.\n   * @param {string} id - The ID of the publishable API key.\n   * @param {AdminDeletePublishableApiKeySalesChannelsBatchReq} payload - The sales channels to delete from the publishable API key.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPublishableApiKeysRes>} Resolves to the publishbale API key's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.publishableApiKeys.deleteSalesChannelsBatch(publishableApiKeyId, {\n   *   sales_channel_ids: [\n   *     {\n   *       id: channelId\n   *     }\n   *   ]\n   * })\n   * .then(({ publishable_api_key }) => {\n   *   console.log(publishable_api_key.id);\n   * })\n   */\n  deleteSalesChannelsBatch(\n    id: string,\n    payload: AdminDeletePublishableApiKeySalesChannelsBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPublishableApiKeysRes> {\n    const path = `/admin/publishable-api-keys/${id}/sales-channels/batch`\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * List the sales channels associated with a publishable API key. The sales channels can be filtered by fields such as `q` passed in the `query` parameter.\n   * @param {string} id - The ID of the publishable API key.\n   * @param {GetPublishableApiKeySalesChannelsParams} query - Filters to apply on the retrieved sales channels.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPublishableApiKeysListSalesChannelsRes>} Resolves to the list of sales channels.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.publishableApiKeys.listSalesChannels()\n   * .then(({ sales_channels }) => {\n   *   console.log(sales_channels.length)\n   * })\n   */\n  listSalesChannels(\n    id: string,\n    query?: GetPublishableApiKeySalesChannelsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPublishableApiKeysListSalesChannelsRes> {\n    let path = `/admin/publishable-api-keys/${id}/sales-channels`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminPublishableApiKeyResource\n", "import {\n  AdminPostRegionsReq,\n  AdminRegionsRes,\n  AdminPostRegionsRegionReq,\n  AdminRegionsDeleteRes,\n  AdminRegionsListRes,\n  AdminGetRegionsParams,\n  AdminPostRegionsRegionCountriesReq,\n  AdminPostRegionsRegionFulfillmentProvidersReq,\n  AdminPostRegionsRegionPaymentProvidersReq,\n  AdminGetRegionsRegionFulfillmentOptionsRes,\n  AdminGetRegionsRegionParams,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Region API Routes](https://docs.medusajs.com/v1/api/admin#regions). All its method\n * are available in the JS Client under the `medusa.admin.regions` property.\n *\n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n *\n * Regions are different countries or geographical regions that the commerce store serves customers in.\n * Admins can manage these regions, their providers, and more.\n *\n * Related Guide: [How to manage regions](https://docs.medusajs.com/v1/modules/regions-and-currencies/admin/manage-regions).\n */\nclass AdminRegionsResource extends BaseResource {\n  /**\n   * Create a region.\n   * @param {AdminPostRegionsReq} payload - The region to create.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminRegionsRes>} Resolves to the region's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.regions.create({\n   *   name: \"Europe\",\n   *   currency_code: \"eur\",\n   *   tax_rate: 0,\n   *   payment_providers: [\n   *     \"manual\"\n   *   ],\n   *   fulfillment_providers: [\n   *     \"manual\"\n   *   ],\n   *   countries: [\n   *     \"DK\"\n   *   ]\n   * })\n   * .then(({ region }) => {\n   *   console.log(region.id);\n   * })\n   */\n  create(\n    payload: AdminPostRegionsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Update a region's details.\n   * @param {string} id - The region's ID.\n   * @param {AdminPostRegionsRegionReq} payload - The attributes to update in the region.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminRegionsRes>} Resolves to the region's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.regions.update(regionId, {\n   *   name: \"Europe\"\n   * })\n   * .then(({ region }) => {\n   *   console.log(region.id);\n   * })\n   */\n  update(\n    id: string,\n    payload: AdminPostRegionsRegionReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a region. Associated resources, such as providers or currencies are not deleted. Associated tax rates are deleted.\n   * @param {string} id - The region's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminRegionsDeleteRes>} Resolves to the deletion operation's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.regions.delete(regionId)\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id);\n   * })\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsDeleteRes> {\n    const path = `/admin/regions/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a region's details.\n   * @param {string} id - The region's ID.\n   * @param query - Query params\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminRegionsRes>}  Resolves to the region's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.regions.retrieve(regionId)\n   * .then(({ region }) => {\n   *   console.log(region.id);\n   * })\n   */\n  retrieve(\n    id: string,\n    query?: AdminGetRegionsRegionParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    let path = `/admin/regions/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/regions/${id}?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of Regions. The regions can be filtered by fields such as `created_at` passed in the `query` parameter. The regions can also be paginated.\n   * @param {AdminGetRegionsParams} query - Filters and pagination configurations to apply on the retrieved regions.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminRegionsListRes>} Resolves to the list of regions with pagination fields.\n   *\n   * @example\n   * To list regions:\n   *\n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.regions.list()\n   * .then(({ regions, limit, offset, count }) => {\n   *   console.log(regions.length);\n   * })\n   * ```\n   *\n   * By default, only the first `50` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   *\n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.regions.list({\n   *   limit,\n   *   offset\n   * })\n   * .then(({ regions, limit, offset, count }) => {\n   *   console.log(regions.length);\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetRegionsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsListRes> {\n    let path = `/admin/regions`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/regions?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Add a country to the list of countries in a region.\n   * @param {string} id - The region's ID.\n   * @param {AdminPostRegionsRegionCountriesReq} payload - The country to add.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminRegionsRes>} Resolves to the region's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.regions.addCountry(regionId, {\n   *   country_code: \"dk\"\n   * })\n   * .then(({ region }) => {\n   *   console.log(region.id);\n   * })\n   */\n  addCountry(\n    id: string,\n    payload: AdminPostRegionsRegionCountriesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions/${id}/countries`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a country from the list of countries in a region. The country will still be available in the system, and it can be used in other regions.\n   * @param {string} id - The region's ID.\n   * @param {string} country_code - The code of the country to delete from the region.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminRegionsRes>} Resolves to the region's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.regions.deleteCountry(regionId, \"dk\")\n   * .then(({ region }) => {\n   *   console.log(region.id);\n   * })\n   */\n  deleteCountry(\n    id: string,\n    country_code: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions/${id}/countries/${country_code}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Add a fulfillment provider to the list of fulfullment providers in a region.\n   * @param {string} id - The region's ID.\n   * @param {AdminPostRegionsRegionFulfillmentProvidersReq} payload - The fulfillment provider to add.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminRegionsRes>} Resolves to the region's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.regions.addFulfillmentProvider(regionId, {\n   *   provider_id: \"manual\"\n   * })\n   * .then(({ region }) => {\n   *   console.log(region.id);\n   * })\n   */\n  addFulfillmentProvider(\n    id: string,\n    payload: AdminPostRegionsRegionFulfillmentProvidersReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions/${id}/fulfillment-providers`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a fulfillment provider from a region. The fulfillment provider will still be available for usage in other regions.\n   * @param {string} id - The region's ID.\n   * @param {string} provider_id - The ID of the fulfillment provider to delete from the region.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminRegionsRes>} Resolves to the region's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.regions.deleteFulfillmentProvider(regionId, \"manual\")\n   * .then(({ region }) => {\n   *   console.log(region.id);\n   * })\n   */\n  deleteFulfillmentProvider(\n    id: string,\n    provider_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions/${id}/fulfillment-providers/${provider_id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of fulfillment options available in a region.\n   * @param {string} id - The region's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminGetRegionsRegionFulfillmentOptionsRes>} Resolves to the list of fulfillment options.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.regions.retrieveFulfillmentOptions(regionId)\n   * .then(({ fulfillment_options }) => {\n   *   console.log(fulfillment_options.length);\n   * })\n   */\n  retrieveFulfillmentOptions(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminGetRegionsRegionFulfillmentOptionsRes> {\n    const path = `/admin/regions/${id}/fulfillment-options`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Add a payment provider to the list of payment providers in a region.\n   * @param {string} id - The region's ID.\n   * @param {AdminPostRegionsRegionPaymentProvidersReq} payload - The payment provider to add.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminRegionsRes>} Resolves to the region's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.regions.addPaymentProvider(regionId, {\n   *   provider_id: \"manual\"\n   * })\n   * .then(({ region }) => {\n   *   console.log(region.id);\n   * })\n   */\n  addPaymentProvider(\n    id: string,\n    payload: AdminPostRegionsRegionPaymentProvidersReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions/${id}/payment-providers`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a payment provider from a region. The payment provider will still be available for usage in other regions.\n   * @param {string} id - The region's ID.\n   * @param {string} provider_id - The ID of the payment provider to delete from the region.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminRegionsRes>} Resolves to the region's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.regions.deletePaymentProvider(regionId, \"manual\")\n   * .then(({ region }) => {\n   *   console.log(region.id);\n   * })\n   */\n  deletePaymentProvider(\n    id: string,\n    provider_id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminRegionsRes> {\n    const path = `/admin/regions/${id}/payment-providers/${provider_id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminRegionsResource\n", "import {\n  AdminPostReservationsReq,\n  AdminPostReservationsReservationReq,\n  AdminReservationsDeleteRes,\n  AdminReservationsRes,\n  AdminGetReservationsParams,\n  AdminReservationsListRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Reservation API Routes](https://docs.medusajs.com/v1/api/admin#reservations). To use these API Routes, make sure to install the\n * [@medusajs/inventory](https://docs.medusajs.com/v1/modules/multiwarehouse/install-modules#inventory-module) module in your Medusa backend.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}. The methods\n * are available in the JS Client under the `medusa.admin.reservations` property.\n * \n * Reservations, provided by the [Inventory Module](https://docs.medusajs.com/v1/modules/multiwarehouse/inventory-module), are quantities of an item that are reserved, typically when an order is placed but not yet fulfilled.\n * Reservations can be associated with any resources, but commonly with line items of an order.\n * \n * Related Guide: [How to manage item allocations in orders](https://docs.medusajs.com/v1/modules/multiwarehouse/admin/manage-item-allocations-in-orders).\n */\nclass AdminReservationsResource extends BaseResource {\n  /**\n   * Retrieve a reservation's details.\n   * @param {string} id - The reservation's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminReservationsRes>} Resolves to the reservation's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.reservations.retrieve(reservationId)\n   * .then(({ reservation }) => {\n   *   console.log(reservation.id);\n   * })\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, unknown> = {}\n  ): ResponsePromise<AdminReservationsRes> {\n    const path = `/admin/reservations/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of reservations. The reservations can be filtered by fields such as `location_id` or `quantity` passed in the `query` parameter. The reservations can also be paginated.\n   * @param {AdminGetReservationsParams} query - Filters and pagination parameters to apply on the retrieved reservations.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminReservationsListRes>} Resolves to the list of reservations with pagination fields.\n   * \n   * @example\n   * To list reservations:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.reservations.list()\n   * .then(({ reservations, count, limit, offset }) => {\n   *   console.log(reservations.length)\n   * })\n   * ```\n   * \n   * To specify relations that should be retrieved within the reservations:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.reservations.list({\n   *   expand: \"location\"\n   * })\n   * .then(({ reservations, count, limit, offset }) => {\n   *   console.log(reservations.length)\n   * })\n   * ```\n   * \n   * By default, only the first `20` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.reservations.list({\n   *   expand: \"location\",\n   *   limit,\n   *   offset\n   * })\n   * .then(({ reservations, count, limit, offset }) => {\n   *   console.log(reservations.length)\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetReservationsParams,\n    customHeaders: Record<string, unknown> = {}\n  ): ResponsePromise<AdminReservationsListRes> {\n    let path = `/admin/reservations`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Create a reservation which can be associated with any resource, such as an order's line item.\n   * @param {AdminPostReservationsReq} payload - The reservation to be created.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminReservationsRes>} Resolves to the reservation's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.reservations.create({\n   *   line_item_id: \"item_123\",\n   *   location_id: \"loc_123\",\n   *   inventory_item_id: \"iitem_123\",\n   *   quantity: 1\n   * })\n   * .then(({ reservation }) => {\n   *   console.log(reservation.id);\n   * });\n   */\n  create(\n    payload: AdminPostReservationsReq,\n    customHeaders: Record<string, unknown> = {}\n  ): ResponsePromise<AdminReservationsRes> {\n    const path = `/admin/reservations`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Update a reservation's details.\n   * @param {string} id - The ID of the reservation.\n   * @param {AdminPostReservationsReservationReq} payload - The attributes to update in the reservation.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminReservationsRes>} Resolves to the reservation's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.reservations.update(reservationId, {\n   *   quantity: 3\n   * })\n   * .then(({ reservation }) => {\n   *   console.log(reservation.id);\n   * });\n   */\n  update(\n    id: string,\n    payload: AdminPostReservationsReservationReq,\n    customHeaders: Record<string, unknown> = {}\n  ): ResponsePromise<AdminReservationsRes> {\n    const path = `/admin/reservations/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a reservation. Associated resources, such as the line item, will not be deleted.\n   * @param {string} id - The ID of the reservation. \n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminReservationsDeleteRes>} Resolves to the deletion operation's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.reservations.delete(reservationId)\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id);\n   * });\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, unknown> = {}\n  ): ResponsePromise<AdminReservationsDeleteRes> {\n    const path = `/admin/reservations/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminReservationsResource\n", "import {\n  AdminPostReturnReasonsReq,\n  AdminReturnReasonsRes,\n  AdminReturnReasonsDeleteRes,\n  AdminReturnReasonsListRes,\n  AdminPostReturnReasonsReasonReq,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Return Reason API Routes](https://docs.medusajs.com/v1/api/admin#return-reasons). All its method\n * are available in the JS Client under the `medusa.admin.returnReasons` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * Return reasons are key-value pairs that are used to specify why an order return is being created.\n * Admins can manage available return reasons, and they can be used by both admins and customers when creating a return.\n * \n * Related Guide: [How to manage return reasons](https://docs.medusajs.com/v1/modules/orders/admin/manage-returns#manage-return-reasons).\n */\nclass AdminReturnReasonsResource extends BaseResource {\n  /**\n   * Create a return reason.\n   * @param {AdminPostReturnReasonsReq} payload - The return reason to create.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminReturnReasonsRes>} Resolves to the return reason's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.returnReasons.create({\n   *   label: \"Damaged\",\n   *   value: \"damaged\"\n   * })\n   * .then(({ return_reason }) => {\n   *   console.log(return_reason.id);\n   * });\n   */\n  create(\n    payload: AdminPostReturnReasonsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminReturnReasonsRes> {\n    const path = `/admin/return-reasons`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Update a return reason's details.\n   * @param {string} id - The return reason's ID.\n   * @param {AdminPostReturnReasonsReasonReq} payload - The attributes to update in the return reason.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminReturnReasonsRes>} Resolves to the return reason's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.returnReasons.update(returnReasonId, {\n   *   label: \"Damaged\"\n   * })\n   * .then(({ return_reason }) => {\n   *   console.log(return_reason.id);\n   * });\n   */\n  update(\n    id: string,\n    payload: AdminPostReturnReasonsReasonReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminReturnReasonsRes> {\n    const path = `/admin/return-reasons/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a return reason.\n   * @param {string} id - The ID of the return reason.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminReturnReasonsDeleteRes>} Resolves to the deletion operation's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.returnReasons.delete(returnReasonId)\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id);\n   * });\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminReturnReasonsDeleteRes> {\n    const path = `/admin/return-reasons/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a return reason's details.\n   * @param {string} id - The return reason's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminReturnReasonsRes>} Resolves to the return reason's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.returnReasons.retrieve(returnReasonId)\n   * .then(({ return_reason }) => {\n   *   console.log(return_reason.id);\n   * });\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminReturnReasonsRes> {\n    const path = `/admin/return-reasons/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of return reasons.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminReturnReasonsListRes>} Resolves to the list of return reasons.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.returnReasons.list()\n   * .then(({ return_reasons }) => {\n   *   console.log(return_reasons.length);\n   * });\n   */\n  list(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminReturnReasonsListRes> {\n    const path = `/admin/return-reasons`\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminReturnReasonsResource\n", "import {\n  AdminGetReturnsParams,\n  AdminPostReturnsReturnReceiveReq,\n  AdminReturnsCancelRes,\n  AdminReturnsListRes,\n  AdminReturnsRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Return API Routes](https://docs.medusajs.com/v1/api/admin#returns). All its method\n * are available in the JS Client under the `medusa.admin.returns` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * A return can be created by a customer or an admin to return items in an order.\n * Admins can manage these returns and change their state.\n * \n * Related Guide: [How to manage returns](https://docs.medusajs.com/v1/modules/orders/admin/manage-returns).\n */\nclass AdminReturnsResource extends BaseResource {\n  /**\n   * Register a return as canceled. The return can be associated with an order, claim, or swap.\n   * @param {string} id - The return's ID. \n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminReturnsCancelRes>} Resolves to the details of the order associated with the return. If the return is associated with a claim or a swap, then it'll be the order\n   * that the claim or swap belongs to.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.returns.cancel(returnId)\n   * .then(({ order }) => {\n   *   console.log(order.id);\n   * });\n   */\n  cancel(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminReturnsCancelRes> {\n    const path = `/admin/returns/${id}/cancel`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Mark a return as received. This also updates the status of associated order, claim, or swap accordingly.\n   * @param {string} id - The return's ID.\n   * @param {AdminPostReturnsReturnReceiveReq} payload - The received return.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminReturnsRes>} Resolves to the return's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.returns.receive(returnId, {\n   *   items: [\n   *     {\n   *       item_id,\n   *       quantity: 1\n   *     }\n   *   ]\n   * })\n   * .then((data) => {\n   *   console.log(data.return.id);\n   * });\n   */\n  receive(\n    id: string,\n    payload: AdminPostReturnsReturnReceiveReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminReturnsRes> {\n    const path = `/admin/returns/${id}/receive`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of Returns. The returns can be paginated.\n   * @param {AdminGetReturnsParams} query - Paignation configurations to be applied on the retrieved returns.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminReturnsListRes>} Resolves to the list of returns with pagination fields.\n   * \n   * @example\n   * To list returns:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.returns.list()\n   * .then(({ returns, limit, offset, count }) => {\n   *   console.log(returns.length)\n   * })\n   * ```\n   * \n   * By default, only the first `50` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.returns.list({\n   *   limit,\n   *   offset\n   * })\n   * .then(({ returns, limit, offset, count }) => {\n   *   console.log(returns.length)\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetReturnsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminReturnsListRes> {\n    let path = `/admin/returns/`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/returns?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminReturnsResource\n", "import {\n  AdminDeleteSalesChannelsChannelProductsBatchReq,\n  AdminDeleteSalesChannelsChannelStockLocationsReq,\n  AdminGetSalesChannelsParams,\n  AdminPostSalesChannelsChannelProductsBatchReq,\n  AdminPostSalesChannelsChannelStockLocationsReq,\n  AdminPostSalesChannelsReq,\n  AdminPostSalesChannelsSalesChannelReq,\n  AdminSalesChannelsDeleteRes,\n  AdminSalesChannelsListRes,\n  AdminSalesChannelsRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Sales Channel API Routes](https://docs.medusajs.com/v1/api/admin#sales-channels). All its method\n * are available in the JS Client under the `medusa.admin.salesChannels` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * A sales channel indicates a channel where products can be sold in. For example, a webshop or a mobile app.\n * Admins can manage sales channels and the products available in them.\n * \n * Related Guide: [How to manage sales channels](https://docs.medusajs.com/v1/modules/sales-channels/admin/manage).\n */\nclass AdminSalesChannelsResource extends BaseResource {\n  /**\n   * Retrieve a sales channel's details.\n   * @param {string} salesChannelId - The sales channel's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminSalesChannelsRes>} Resolves to the sales channel's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.salesChannels.retrieve(salesChannelId)\n   * .then(({ sales_channel }) => {\n   *   console.log(sales_channel.id)\n   * })\n   */\n  retrieve(\n    salesChannelId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsRes> {\n    const path = `/admin/sales-channels/${salesChannelId}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Create a sales channel.\n   * @param {AdminPostSalesChannelsReq} payload - The sales channel to create.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminSalesChannelsRes>} Resolves to the sales channel's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.salesChannels.create({\n   *   name: \"App\",\n   *   description: \"Mobile app\"\n   * })\n   * .then(({ sales_channel }) => {\n   *   console.log(sales_channel.id);\n   * })\n   */\n  create(\n    payload: AdminPostSalesChannelsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsRes> {\n    const path = `/admin/sales-channels`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Update a sales channel's details.\n   * @param {string} salesChannelId - The sales channel's ID.\n   * @param {AdminPostSalesChannelsSalesChannelReq} payload - The attributes to update in the sales channel.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminSalesChannelsRes>} Resolves to the sales channel's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.salesChannels.update(salesChannelId, {\n   *   name: \"App\"\n   * })\n   * .then(({ sales_channel }) => {\n   *   console.log(sales_channel.id)\n   * })\n   */\n  update(\n    salesChannelId: string,\n    payload: AdminPostSalesChannelsSalesChannelReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsRes> {\n    const path = `/admin/sales-channels/${salesChannelId}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of sales channels. The sales channels can be filtered by fields such as `q` or `name` passed in the `query` parameter. The sales channels can also be sorted or paginated.\n   * @param {AdminGetSalesChannelsParams} query - Filters and pagination configurations applied on the retrieved sales channels.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminSalesChannelsListRes>} Resolves to the list of sales channels with pagination fields.\n   * \n   * @example\n   * To list sales channels:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.salesChannels.list()\n   * .then(({ sales_channels, limit, offset, count }) => {\n   *   console.log(sales_channels.length)\n   * })\n   * ```\n   * \n   * To specify relations that should be retrieved within the sales channels:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.salesChannels.list({\n   *   expand: \"locations\"\n   * })\n   * .then(({ sales_channels, limit, offset, count }) => {\n   *   console.log(sales_channels.length)\n   * })\n   * ```\n   * \n   * By default, only the first `20` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.salesChannels.list({\n   *   expand: \"locations\",\n   *   limit,\n   *   offset\n   * })\n   * .then(({ sales_channels, limit, offset, count }) => {\n   *   console.log(sales_channels.length)\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetSalesChannelsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsListRes> {\n    let path = `/admin/sales-channels`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Delete a sales channel. Associated products, stock locations, and other resources are not deleted.\n   * @param {string} salesChannelId - The sales channel's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminSalesChannelsDeleteRes>} Resolves to the deletion operation's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.salesChannels.delete(salesChannelId)\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id)\n   * })\n   */\n  delete(\n    salesChannelId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsDeleteRes> {\n    const path = `/admin/sales-channels/${salesChannelId}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Remove a list of products from a sales channel. This doesn't delete the product. It only removes the association between the product and the sales channel.\n   * @param {string} salesChannelId - The sales channel's ID.\n   * @param {AdminDeleteSalesChannelsChannelProductsBatchReq} payload - The products to remove from the sales channel.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminSalesChannelsRes>} Resolves to the sales channel's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.salesChannels.removeProducts(salesChannelId, {\n   *   product_ids: [\n   *     {\n   *       id: productId\n   *     }\n   *   ]\n   * })\n   * .then(({ sales_channel }) => {\n   *   console.log(sales_channel.id)\n   * })\n   */\n  removeProducts(\n    salesChannelId: string,\n    payload: AdminDeleteSalesChannelsChannelProductsBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsRes> {\n    const path = `/admin/sales-channels/${salesChannelId}/products/batch`\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Add a list of products to a sales channel.\n   * @param {string} salesChannelId - The sales channel's ID. \n   * @param {AdminPostSalesChannelsChannelProductsBatchReq} payload - The products to add to the sales channel.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminSalesChannelsRes>} Resolves to the sales channel's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.salesChannels.addProducts(salesChannelId, {\n   *   product_ids: [\n   *     {\n   *       id: productId\n   *     }\n   *   ]\n   * })\n   * .then(({ sales_channel }) => {\n   *   console.log(sales_channel.id)\n   * })\n   */\n  addProducts(\n    salesChannelId: string,\n    payload: AdminPostSalesChannelsChannelProductsBatchReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsRes> {\n    const path = `/admin/sales-channels/${salesChannelId}/products/batch`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Associate a stock location with a sales channel. It requires the \n   * [@medusajs/stock-location](https://docs.medusajs.com/v1/modules/multiwarehouse/install-modules#stock-location-module) module to be installed in\n   * your Medusa backend.\n   * @param {string} salesChannelId - The sales channel's ID. \n   * @param {AdminPostSalesChannelsChannelStockLocationsReq} payload - The stock location to associate with the sales channel.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminSalesChannelsRes>} Resolves to the sales channel's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.salesChannels.addLocation(salesChannelId, {\n   *   location_id: \"loc_123\"\n   * })\n   * .then(({ sales_channel }) => {\n   *   console.log(sales_channel.id)\n   * })\n   */\n  addLocation(\n    salesChannelId: string,\n    payload: AdminPostSalesChannelsChannelStockLocationsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsRes> {\n    const path = `/admin/sales-channels/${salesChannelId}/stock-locations`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Remove a stock location from a sales channel. This only removes the association between the stock location and the sales channel. It does not delete the stock location.\n   * @param {string} salesChannelId - The sales channel's ID.\n   * @param {AdminDeleteSalesChannelsChannelStockLocationsReq} payload - The stock location to remove from the sales channel.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminSalesChannelsRes>} Resolves to the sales channel's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.salesChannels.removeLocation(salesChannelId, {\n   *   location_id: \"loc_id\"\n   * })\n   * .then(({ sales_channel }) => {\n   *   console.log(sales_channel.id);\n   * })\n   */\n  removeLocation(\n    salesChannelId: string,\n    payload: AdminDeleteSalesChannelsChannelStockLocationsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSalesChannelsRes> {\n    const path = `/admin/sales-channels/${salesChannelId}/stock-locations`\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n}\n\nexport default AdminSalesChannelsResource\n", "import {\n  AdminPostShippingOptionsReq,\n  AdminShippingOptionsRes,\n  AdminPostShippingOptionsOptionReq,\n  AdminShippingOptionsDeleteRes,\n  AdminShippingOptionsListRes,\n  AdminGetShippingOptionsParams,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Shipping Option API Routes](https://docs.medusajs.com/v1/api/admin#shipping-options). All its method\n * are available in the JS Client under the `medusa.admin.shippingOptions` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * A shipping option is used to define the available shipping methods during checkout or when creating a return.\n * Admins can create an unlimited number of shipping options, each associated with a shipping profile and fulfillment provider, among other resources.\n * \n * Related Guide: [Shipping Option architecture](https://docs.medusajs.com/v1/modules/carts-and-checkout/shipping#shipping-option).\n */\nclass AdminShippingOptionsResource extends BaseResource {\n  /**\n   * Create a shipping option.\n   * @param {AdminPostShippingOptionsReq} payload - The shipping option to create.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminShippingOptionsRes>} Resolves to the shipping option's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.shippingOptions.create({\n   *   name: \"PostFake\",\n   *   region_id,\n   *   provider_id,\n   *   data: {\n   *   },\n   *   price_type: \"flat_rate\"\n   * })\n   * .then(({ shipping_option }) => {\n   *   console.log(shipping_option.id)\n   * })\n   */\n  create(\n    payload: AdminPostShippingOptionsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingOptionsRes> {\n    const path = `/admin/shipping-options`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Update a shipping option's details.\n   * @param {string} id - The shipping option's ID. \n   * @param {AdminPostShippingOptionsOptionReq} payload - The attributes to update in the shipping option.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminShippingOptionsRes>} Resolves to the shipping option's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.shippingOptions.update(optionId, {\n   *   name: \"PostFake\",\n   *   requirements: [\n   *     {\n   *       id,\n   *       type: \"max_subtotal\",\n   *       amount: 1000\n   *     }\n   *   ]\n   * })\n   * .then(({ shipping_option }) => {\n   *   console.log(shipping_option.id)\n   * })\n   */\n  update(\n    id: string,\n    payload: AdminPostShippingOptionsOptionReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingOptionsRes> {\n    const path = `/admin/shipping-options/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a shipping option. Once deleted, it can't be used when creating orders or returns.\n   * @param {string} id - The shipping option's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminShippingOptionsDeleteRes>} Resolves to the deletion operation's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.shippingOptions.delete(optionId)\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id);\n   * })\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingOptionsDeleteRes> {\n    const path = `/admin/shipping-options/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a shipping option's details.\n   * @param {string} id - The shipping option's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminShippingOptionsRes>} Resolves to the shipping option's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.shippingOptions.retrieve(optionId)\n   * .then(({ shipping_option }) => {\n   *   console.log(shipping_option.id);\n   * })\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingOptionsRes> {\n    const path = `/admin/shipping-options/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of shipping options. The shipping options can be filtered by fields such as `region_id` or `is_return` passed in the `query` parameter.\n   * @param {AdminGetShippingOptionsParams} query - Filters to apply on the retrieved shipping options.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminShippingOptionsListRes>} Resolves to the list of shipping options.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.shippingOptions.list()\n   * .then(({ shipping_options, count }) => {\n   *   console.log(shipping_options.length);\n   * })\n   */\n  list(\n    query?: AdminGetShippingOptionsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingOptionsListRes> {\n    let path = `/admin/shipping-options`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/shipping-options?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminShippingOptionsResource\n", "import {\n  AdminDeleteShippingProfileRes,\n  AdminPostShippingProfilesProfileReq,\n  AdminPostShippingProfilesReq,\n  AdminShippingProfilesListRes,\n  AdminShippingProfilesRes,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Shipping Profile API Routes](https://docs.medusajs.com/v1/api/admin#shipping-profiles). All its method\n * are available in the JS Client under the `medusa.admin.shippingProfiles` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * A shipping profile is used to group products that can be shipped in the same manner.\n * They are created by the admin and they're not associated with a fulfillment provider.\n * \n * Related Guide: [Shipping Profile architecture](https://docs.medusajs.com/v1/modules/carts-and-checkout/shipping#shipping-profile).\n */\nclass AdminShippingProfilesResource extends BaseResource {\n  /**\n   * Create a shipping profile.\n   * @param {AdminPostShippingProfilesReq} payload - The shipping profile to create.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminShippingProfilesRes>} Resolves to the shipping profile's details.\n   * \n   * @example\n   * import { ShippingProfileType } from \"@medusajs/medusa\"\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.shippingProfiles.create({\n   *   name: \"Large Products\",\n   *   type: ShippingProfileType.DEFAULT\n   * })\n   * .then(({ shipping_profile }) => {\n   *   console.log(shipping_profile.id);\n   * })\n   */\n  create(\n    payload: AdminPostShippingProfilesReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingProfilesRes> {\n    const path = `/admin/shipping-profiles/`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Update a shipping profile's details.\n   * @param {string} id - The shipping profile's ID.\n   * @param {AdminPostShippingProfilesProfileReq} payload - The attributes to update in the shipping profile.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminShippingProfilesRes>} Resolves to the shipping profile's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.shippingProfiles.update(shippingProfileId, {\n   *   name: 'Large Products'\n   * })\n   * .then(({ shipping_profile }) => {\n   *   console.log(shipping_profile.id);\n   * })\n   */\n  update(\n    id: string,\n    payload: AdminPostShippingProfilesProfileReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingProfilesRes> {\n    const path = `/admin/shipping-profiles/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a shipping profile. Associated shipping options are deleted as well.\n   * @param {string} id - The shipping profile's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDeleteShippingProfileRes>} Resolves to the deletion operation's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.shippingProfiles.delete(profileId)\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id);\n   * })\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDeleteShippingProfileRes> {\n    const path = `/admin/shipping-profiles/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a shipping profile's details.\n   * @param {string} id - The shipping profile's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminShippingProfilesRes>} Resolves to the shipping profile's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.shippingProfiles.retrieve(profileId)\n   * .then(({ shipping_profile }) => {\n   *   console.log(shipping_profile.id);\n   * })\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingProfilesRes> {\n    const path = `/admin/shipping-profiles/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of shipping profiles.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminShippingProfilesListRes>} Resolves to the list of shipping profiles.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.shippingProfiles.list()\n   * .then(({ shipping_profiles }) => {\n   *   console.log(shipping_profiles.length);\n   * })\n   */\n  list(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminShippingProfilesListRes> {\n    const path = `/admin/shipping-profiles/`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminShippingProfilesResource\n", "import {\n  AdminGetStockLocationsParams,\n  AdminStockLocationsRes,\n  AdminPostStockLocationsLocationReq,\n  AdminPostStockLocationsReq,\n  AdminStockLocationsListRes,\n  AdminStockLocationsDeleteRes,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\nimport qs from \"qs\"\n\n/**\n * This class is used to send requests to [Admin Stock Location API Routes](https://docs.medusajs.com/v1/api/admin#stock-locations). To use these API Routes, make sure to install the\n * [@medusajs/stock-location](https://docs.medusajs.com/v1/modules/multiwarehouse/install-modules#stock-location-module) module in your Medusa backend.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}. The methods\n * are available in the JS Client under the `medusa.admin.stockLocations` property.\n * \n * A stock location, provided by the [Stock Location module](https://docs.medusajs.com/v1/modules/multiwarehouse/stock-location-module), indicates a physical address that stock-kept items, such as physical products, can be stored in.\n * An admin can create and manage available stock locations.\n * \n * Related Guide: [How to manage stock locations](https://docs.medusajs.com/v1/modules/multiwarehouse/admin/manage-stock-locations).\n */\nclass AdminStockLocationsResource extends BaseResource {\n  /**\n   * Create a stock location.\n   * @param {AdminPostStockLocationsReq} payload - The stock location to be created.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminStockLocationsRes>} Resolves to the stock location's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.stockLocations.create({\n   *   name: \"Main Warehouse\",\n   * })\n   * .then(({ stock_location }) => {\n   *   console.log(stock_location.id);\n   * })\n   */\n  create(\n    payload: AdminPostStockLocationsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminStockLocationsRes> {\n    const path = `/admin/stock-locations`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a stock location's details.\n   * @param {string} itemId - The stock location's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminStockLocationsRes>} Resolves to the stock location's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.stockLocations.retrieve(stockLocationId)\n   * .then(({ stock_location }) => {\n   *   console.log(stock_location.id);\n   * })\n   */\n  retrieve(\n    itemId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminStockLocationsRes> {\n    const path = `/admin/stock-locations/${itemId}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Update a stock location's details.\n   * @param {string} stockLocationId - The stock location's ID.\n   * @param {AdminPostStockLocationsLocationReq} payload - The attributes to be updated in the stock location.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminStockLocationsRes>} Resolves to the stock location's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.stockLocations.update(stockLocationId, {\n   *   name: 'Main Warehouse'\n   * })\n   * .then(({ stock_location }) => {\n   *   console.log(stock_location.id);\n   * })\n   */\n  update(\n    stockLocationId: string,\n    payload: AdminPostStockLocationsLocationReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminStockLocationsRes> {\n    const path = `/admin/stock-locations/${stockLocationId}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a stock location.\n   * @param {string} id - The stock location's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminStockLocationsDeleteRes>} Resolves to the deletion operation's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.stockLocations.delete(stockLocationId)\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id)\n   * })\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminStockLocationsDeleteRes> {\n    const path = `/admin/stock-locations/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of stock locations. The stock locations can be filtered by fields such as `name` or `created_at` passed in the `query` parameter.\n   * The stock locations can also be sorted or paginated.\n   * @param {AdminGetStockLocationsParams} query - Filters and pagination configurations to apply on the retrieved stock locations.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminStockLocationsListRes>} Resolves to the list of stock locations with pagination fields.\n   * \n   * @example\n   * To list stock locations:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.stockLocations.list()\n   * .then(({ stock_locations, limit, offset, count }) => {\n   *   console.log(stock_locations.length);\n   * })\n   * ```\n   * \n   * To specify relations that should be retrieved within the stock locations:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.stockLocations.list({\n   *   expand: \"address\"\n   * })\n   * .then(({ stock_locations, limit, offset, count }) => {\n   *   console.log(stock_locations.length);\n   * })\n   * ```\n   * \n   * By default, only the first `20` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.stockLocations.list({\n   *   expand: \"address\",\n   *   limit,\n   *   offset\n   * })\n   * .then(({ stock_locations, limit, offset, count }) => {\n   *   console.log(stock_locations.length);\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetStockLocationsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminStockLocationsListRes> {\n    let path = `/admin/stock-locations`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminStockLocationsResource\n", "import {\n  AdminExtendedStoresRes,\n  AdminPaymentProvidersList,\n  AdminPostStoreReq,\n  AdminStoresRes,\n  AdminTaxProvidersList,\n} from \"@medusajs/medusa\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Store API Routes](https://docs.medusajs.com/v1/api/admin#store). All its method\n * are available in the JS Client under the `medusa.admin.store` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * A store indicates the general configurations and details about the commerce store. By default, there's only one store in the Medusa backend.\n * Admins can manage the store and its details or configurations.\n */\nclass AdminStoresResource extends BaseResource {\n  /**\n   * Update the store's details.\n   * @param {AdminPostStoreReq} payload - The attributes to update in the store.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminStoresRes>} Resolves to the store's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.store.update({\n   *   name: \"Medusa Store\"\n   * })\n   * .then(({ store }) => {\n   *   console.log(store.id);\n   * })\n   */\n  update(\n    payload: AdminPostStoreReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminStoresRes> {\n    const path = `/admin/store/`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Add a currency code to the available currencies in a store. This doesn't create new currencies, as currencies are defined within the Medusa backend. \n   * To create a currency, you can [create a migration](https://docs.medusajs.com/v1/development/entities/migrations/create) that inserts the currency into the database.\n   * @param {string} currency_code - The code of the currency to add to the store.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminStoresRes>} Resolves to the store's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.store.addCurrency(\"eur\")\n   * .then(({ store }) => {\n   *   console.log(store.currencies);\n   * })\n   */\n  addCurrency(\n    currency_code: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminStoresRes> {\n    const path = `/admin/store/${currency_code}`\n    return this.client.request(\"POST\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Delete a currency code from the available currencies in a store. This doesn't completely delete the currency and it can be added again later to the store.\n   * @param {string} currency_code - The code of the currency to delete from the store.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminStoresRes>} Resolves to the store's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.store.deleteCurrency(\"eur\")\n   * .then(({ store }) => {\n   *   console.log(store.currencies);\n   * })\n   */\n  deleteCurrency(\n    currency_code: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminStoresRes> {\n    const path = `/admin/store/currencies/${currency_code}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve the store's details.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminExtendedStoresRes>} Resolves to the store's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.store.retrieve()\n   * .then(({ store }) => {\n   *   console.log(store.id);\n   * })\n   */\n  retrieve(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminExtendedStoresRes> {\n    const path = `/admin/store/`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of available payment providers in a store.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminPaymentProvidersList>} Resolves to the list of payment providers.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.store.listPaymentProviders()\n   * .then(({ payment_providers }) => {\n   *   console.log(payment_providers.length);\n   * })\n   */\n  listPaymentProviders(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminPaymentProvidersList> {\n    const path = `/admin/store/payment-providers`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of available tax providers in a store.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminTaxProvidersList>} Resolves to the list of tax providers.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.store.listTaxProviders()\n   * .then(({ tax_providers }) => {\n   *   console.log(tax_providers.length);\n   * })\n   */\n  listTaxProviders(\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxProvidersList> {\n    const path = `/admin/store/tax-providers`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminStoresResource\n", "import {\n  AdminSwapsRes,\n  AdminSwapsListRes,\n  AdminGetSwapsParams,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Swap API Routes](https://docs.medusajs.com/v1/api/admin#swaps). All its method\n * are available in the JS Client under the `medusa.admin.swaps` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * A swap is created by a customer or an admin to exchange an item with a new one.\n * Creating a swap implicitely includes creating a return for the item being exchanged.\n * \n * Related Guide: [How to manage swaps](https://docs.medusajs.com/v1/modules/orders/admin/manage-swaps)\n */\nclass AdminSwapsResource extends BaseResource {\n  /**\n   * Retrieve a swap's details.\n   * @param {string} id - The swap's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminSwapsRes>} Resolves to the swap's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.swaps.retrieve(swapId)\n   * .then(({ swap }) => {\n   *   console.log(swap.id);\n   * })\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSwapsRes> {\n    const path = `/admin/swaps/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of swaps. The swaps can be paginated.\n   * @param {AdminGetSwapsParams} query - Pagination configurations to apply on the retrieved swaps.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminSwapsListRes>} Resolves to the list of swaps with pagination fields.\n   * \n   * @example\n   * To list swaps:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.swaps.list()\n   * .then(({ swaps }) => {\n   *   console.log(swaps.length);\n   * })\n   * ```\n   * \n   * By default, only the first `50` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.swaps.list({\n   *   limit,\n   *   offset\n   * })\n   * .then(({ swaps }) => {\n   *   console.log(swaps.length);\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetSwapsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminSwapsListRes> {\n    let path = `/admin/swaps/`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/swaps?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminSwapsResource\n", "import {\n  AdminTaxRatesRes,\n  AdminTaxRatesListRes,\n  AdminTaxRatesDeleteRes,\n  AdminGetTaxRatesParams,\n  AdminGetTaxRatesTaxRateParams,\n  AdminDeleteTaxRatesTaxRateProductsReq,\n  AdminDeleteTaxRatesTaxRateProductsParams,\n  AdminDeleteTaxRatesTaxRateProductTypesReq,\n  AdminDeleteTaxRatesTaxRateProductTypesParams,\n  AdminDeleteTaxRatesTaxRateShippingOptionsReq,\n  AdminDeleteTaxRatesTaxRateShippingOptionsParams,\n  AdminPostTaxRatesReq,\n  AdminPostTaxRatesTaxRateReq,\n  AdminPostTaxRatesTaxRateProductsReq,\n  AdminPostTaxRatesTaxRateProductTypesReq,\n  AdminPostTaxRatesTaxRateShippingOptionsReq,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\nimport { AdminPostTaxRatesTaxRateProductsParams } from \"@medusajs/medusa\"\nimport { AdminPostTaxRatesTaxRateShippingOptionsParams } from \"@medusajs/medusa\"\nimport { AdminPostTaxRatesParams } from \"@medusajs/medusa\"\nimport { AdminPostTaxRatesTaxRateParams } from \"@medusajs/medusa\"\n\n/**\n * This class is used to send requests to [Admin Tax Rate API Routes](https://docs.medusajs.com/v1/api/admin#tax-rates). All its method\n * are available in the JS Client under the `medusa.admin.taxRates` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * Each region has at least a default tax rate. Admins can create and manage additional tax rates that can be applied for certain conditions, such as for specific product types.\n * \n * Related Guide: [How to manage tax rates](https://docs.medusajs.com/v1/modules/taxes/admin/manage-tax-rates).\n */\nclass AdminTaxRatesResource extends BaseResource {\n  /**\n   * Retrieve a tax rate's details.\n   * @param {string} id - The tax rate's ID.\n   * @param {AdminGetTaxRatesTaxRateParams} query - Configurations to apply on retrieved tax rates.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminTaxRatesRes>} Resolves to the tax rate's details.\n   * \n   * @example\n   * A simple example that retrieves a tax rate by its ID:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.taxRates.retrieve(taxRateId)\n   * .then(({ tax_rate }) => {\n   *   console.log(tax_rate.id);\n   * })\n   * ```\n   * \n   * To specify relations that should be retrieved:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.taxRates.retrieve(taxRateId, {\n   *   expand: \"shipping_options\"\n   * })\n   * .then(({ tax_rate }) => {\n   *   console.log(tax_rate.id);\n   * })\n   * ```\n   */\n  retrieve(\n    id: string,\n    query?: AdminGetTaxRatesTaxRateParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates/${id}?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a list of tax rates. The tax rates can be filtered by fields such as `name` or `rate` passed in the `query` parameter. The tax rates can also be paginated.\n   * @param {AdminGetTaxRatesParams} query - Filters and pagination configurations applied to the retrieved tax rates.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminTaxRatesListRes>} Resolves to the list of tax rates with pagination fields.\n   * \n   * @example\n   * To list tax rates:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.taxRates.list()\n   * .then(({ tax_rates, limit, offset, count }) => {\n   *   console.log(tax_rates.length);\n   * })\n   * ```\n   * \n   * To specify relations that should be retrieved within the tax rates:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.taxRates.list({\n   *   expand: [\"shipping_options\"]\n   * })\n   * .then(({ tax_rates, limit, offset, count }) => {\n   *   console.log(tax_rates.length);\n   * })\n   * ```\n   * \n   * By default, only the first `50` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.taxRates.list({\n   *   expand: [\"shipping_options\"],\n   *   limit,\n   *   offset\n   * })\n   * .then(({ tax_rates, limit, offset, count }) => {\n   *   console.log(tax_rates.length);\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetTaxRatesParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesListRes> {\n    let path = `/admin/tax-rates`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Create a tax rate.\n   * @param {AdminPostTaxRatesReq} payload - The tax rate to create.\n   * @param {AdminPostTaxRatesParams} query - Configurations to apply on the retrieved tax rate.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminTaxRatesRes>} Resolves to the tax rate's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.taxRates.create({\n   *   code: \"TEST\",\n   *   name: \"New Tax Rate\",\n   *   region_id\n   * })\n   * .then(({ tax_rate }) => {\n   *   console.log(tax_rate.id);\n   * })\n   */\n  create(\n    payload: AdminPostTaxRatesReq,\n    query?: AdminPostTaxRatesParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Update a tax rate's details.\n   * @param {string} id - The tax rate's ID.\n   * @param {AdminPostTaxRatesTaxRateReq} payload - The attributes to update in the tax rate.\n   * @param {AdminPostTaxRatesTaxRateParams} query - Configurations to apply on the retrieved tax rate.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminTaxRatesRes>} Resolves to the tax rate's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.taxRates.update(taxRateId, {\n   *   name: \"New Tax Rate\"\n   * })\n   * .then(({ tax_rate }) => {\n   *   console.log(tax_rate.id);\n   * })\n   */\n  update(\n    id: string,\n    payload: AdminPostTaxRatesTaxRateReq,\n    query?: AdminPostTaxRatesTaxRateParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates/${id}?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Add products to a tax rate.\n   * @param {string} id - The tax rate's ID.\n   * @param {AdminPostTaxRatesTaxRateProductsReq} payload - The products to add to the tax rate.\n   * @param {AdminPostTaxRatesTaxRateProductsParams} query - Configurations to apply on the retrieved tax rate.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminTaxRatesRes>} Resolves to the tax rate's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.taxRates.addProducts(taxRateId, {\n   *   products: [\n   *     productId\n   *   ]\n   * })\n   * .then(({ tax_rate }) => {\n   *   console.log(tax_rate.id);\n   * })\n   */\n  addProducts(\n    id: string,\n    payload: AdminPostTaxRatesTaxRateProductsReq,\n    query?: AdminPostTaxRatesTaxRateProductsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates/${id}/products/batch`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates/${id}/products/batch?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Add product types to a tax rate.\n   * @param {string} id - The tax rate's ID.\n   * @param {AdminPostTaxRatesTaxRateProductTypesReq} payload - The product types to add to the tax rate.\n   * @param {AdminGetTaxRatesTaxRateParams} query - Configurations to apply on the retrieved tax rate.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminTaxRatesRes>} Resolves to the tax rate's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.taxRates.addProductTypes(taxRateId, {\n   *   product_types: [\n   *     productTypeId\n   *   ]\n   * })\n   * .then(({ tax_rate }) => {\n   *   console.log(tax_rate.id);\n   * })\n   */\n  addProductTypes(\n    id: string,\n    payload: AdminPostTaxRatesTaxRateProductTypesReq,\n    query?: AdminGetTaxRatesTaxRateParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates/${id}/product-types/batch`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates/${id}/product-types/batch?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Add shipping options to a tax rate.\n   * @param {string} id - The tax rate's ID.\n   * @param {AdminPostTaxRatesTaxRateShippingOptionsReq} payload - The shipping options to add to the tax rate.\n   * @param {AdminPostTaxRatesTaxRateShippingOptionsParams} query - Configurations to apply on the retrieved tax rate.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminTaxRatesRes>} Resolves to the tax rate's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.taxRates.addShippingOptions(taxRateId, {\n   *   shipping_options: [\n   *     shippingOptionId\n   *   ]\n   * })\n   * .then(({ tax_rate }) => {\n   *   console.log(tax_rate.id);\n   * })\n   */\n  addShippingOptions(\n    id: string,\n    payload: AdminPostTaxRatesTaxRateShippingOptionsReq,\n    query?: AdminPostTaxRatesTaxRateShippingOptionsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates/${id}/shipping-options/batch`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates/${id}/shipping-options/batch?${queryString}`\n    }\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Remove products from a tax rate. This only removes the association between the products and the tax rate. It does not delete the products.\n   * @param {string} id - The tax rate's ID.\n   * @param {AdminDeleteTaxRatesTaxRateProductsReq} payload - The products to remove from the tax rate.\n   * @param {AdminGetTaxRatesTaxRateParams} query - Configurations to apply on the retrieved tax rate.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminTaxRatesRes>} Resolves to the tax rate's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.taxRates.removeProducts(taxRateId, {\n   *   products: [\n   *     productId\n   *   ]\n   * })\n   * .then(({ tax_rate }) => {\n   *   console.log(tax_rate.id);\n   * })\n   */\n  removeProducts(\n    id: string,\n    payload: AdminDeleteTaxRatesTaxRateProductsReq,\n    query?: AdminDeleteTaxRatesTaxRateProductsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates/${id}/products/batch`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates/${id}/products/batch?${queryString}`\n    }\n\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Remove product types from a tax rate. This only removes the association between the product types and the tax rate. It does not delete the product types.\n   * @param {string} id - The tax rate's ID.\n   * @param {AdminDeleteTaxRatesTaxRateProductTypesReq} payload - The product types to remove from the tax rate.\n   * @param {AdminGetTaxRatesTaxRateParams} query - Configurations to apply on the retrieved tax rate.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminTaxRatesRes>} Resolves to the tax rate's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.taxRates.removeProductTypes(taxRateId, {\n   *   product_types: [\n   *     productTypeId\n   *   ]\n   * })\n   * .then(({ tax_rate }) => {\n   *   console.log(tax_rate.id);\n   * })\n   */\n  removeProductTypes(\n    id: string,\n    payload: AdminDeleteTaxRatesTaxRateProductTypesReq,\n    query?: AdminDeleteTaxRatesTaxRateProductTypesParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates/${id}/product-types/batch`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates/${id}/product-types/batch?${queryString}`\n    }\n\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Remove shipping options from a tax rate. This only removes the association between the shipping options and the tax rate. It does not delete the shipping options.\n   * @param {string} id - The tax rate's ID.\n   * @param {AdminDeleteTaxRatesTaxRateShippingOptionsReq} payload - The shipping options to remove from the tax rate.\n   * @param {AdminGetTaxRatesTaxRateParams} query - Configurations to apply on the retrieved tax rate.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminTaxRatesRes>} Resolves to the tax rate's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.taxRates.removeShippingOptions(taxRateId, {\n   *   shipping_options: [\n   *     shippingOptionId\n   *   ]\n   * })\n   * .then(({ tax_rate }) => {\n   *   console.log(tax_rate.id);\n   * })\n   */\n  removeShippingOptions(\n    id: string,\n    payload: AdminDeleteTaxRatesTaxRateShippingOptionsReq,\n    query?: AdminDeleteTaxRatesTaxRateShippingOptionsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesRes> {\n    let path = `/admin/tax-rates/${id}/shipping-options/batch`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/tax-rates/${id}/shipping-options/batch?${queryString}`\n    }\n\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a tax rate. Resources associated with the tax rate, such as products or product types, are not deleted.\n   * @param {string} id - The tax rate's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminTaxRatesDeleteRes>} Resolves to the deletion operation's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.taxRates.delete(taxRateId)\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id);\n   * })\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminTaxRatesDeleteRes> {\n    const path = `/admin/tax-rates/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminTaxRatesResource\n", "import {\n  AdminDeleteUploadsReq,\n  AdminDeleteUploadsRes,\n  AdminPostUploadsDownloadUrlReq,\n  AdminUploadsDownloadUrlRes,\n  AdminUploadsRes,\n} from \"@medusajs/medusa\"\nimport { AdminCreateUploadPayload, ResponsePromise } from \"../../typings\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Upload API Routes](https://docs.medusajs.com/v1/api/admin#uploads). All its method\n * are available in the JS Client under the `medusa.admin.uploads` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * The methods in this class are used to upload any type of resources. For example, they can be used to upload CSV files that are used to import products into the store.\n * \n * Related Guide: [How to upload CSV file when importing a product](https://docs.medusajs.com/v1/modules/products/admin/import-products#1-upload-csv-file).\n */\nclass AdminUploadsResource extends BaseResource {\n  /**\n   * @ignore\n   * @privateRemarks No need to include this in the generated documentation.\n   */\n  private headers = {\n    \"Content-Type\": \"multipart/form-data\",\n  }\n\n  /**\n   * Upload a file or multiple files to a public bucket or storage. The file upload is handled by the file service installed on the Medusa backend.\n   * @param {AdminCreateUploadPayload} file - The file(s) to upload.\n   * @returns {ResponsePromise<AdminUploadsRes>} Resolves to the uploaded file details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.uploads.create(file)\n   * .then(({ uploads }) => {\n   *   console.log(uploads.length);\n   * })\n   */\n  create(file: AdminCreateUploadPayload): ResponsePromise<AdminUploadsRes> {\n    const path = `/admin/uploads`\n\n    const payload = this._createPayload(file)\n\n    return this.client.request(\"POST\", path, payload, {}, this.headers)\n  }\n\n  /**\n   * Upload a file to an ACL or a non-public bucket. The file upload is handled by the file service installed on the Medusa backend.\n   * @param {AdminCreateUploadPayload} file - The file to upload.\n   * @returns {ResponsePromise<AdminUploadsRes>} Resolves to the uploaded file details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.uploads.createProtected(file)\n   * .then(({ uploads }) => {\n   *   console.log(uploads.length);\n   * })\n   */\n  createProtected(\n    file: AdminCreateUploadPayload\n  ): ResponsePromise<AdminUploadsRes> {\n    const path = `/admin/uploads/protected`\n\n    const payload = this._createPayload(file)\n\n    return this.client.request(\"POST\", path, payload, {}, this.headers)\n  }\n\n  /**\n   * Delete an uploaded file from storage. The file is deleted using the installed file service on the Medusa backend.\n   * @param {AdminDeleteUploadsReq} payload - The uploaded file to delete.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDeleteUploadsRes>} Resolves to the deletion operation's details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.uploads.delete({\n   *   file_key\n   * })\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id);\n   * })\n   */\n  delete(\n    payload: AdminDeleteUploadsReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDeleteUploadsRes> {\n    const path = `/admin/uploads`\n\n    return this.client.request(\"DELETE\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Create and retrieve a presigned or public download URL for a file. The URL creation is handled by the file service installed on the Medusa backend.\n   * @param {AdminPostUploadsDownloadUrlReq} payload - The uploaded file to get a presigned download URL for.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminUploadsDownloadUrlRes>} Resolves to the download URL details.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.uploads.getPresignedDownloadUrl({\n   *   file_key\n   * })\n   * .then(({ download_url }) => {\n   *   console.log(download_url);\n   * })\n   */\n  getPresignedDownloadUrl(\n    payload: AdminPostUploadsDownloadUrlReq,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminUploadsDownloadUrlRes> {\n    const path = `/admin/uploads/download-url`\n\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  private _createPayload(file: AdminCreateUploadPayload) {\n    const payload = new FormData()\n\n    if (Array.isArray(file)) {\n      file.forEach((f) => payload.append(\"files\", f))\n    } else {\n      payload.append(\"files\", file)\n    }\n\n    return payload\n  }\n}\n\nexport default AdminUploadsResource\n", "import {\n  AdminDeleteUserRes,\n  AdminGetUsersParams,\n  AdminResetPasswordRequest,\n  AdminResetPasswordTokenRequest,\n  AdminUserRes,\n  AdminUsersListRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport {\n  AdminCreateUserPayload,\n  AdminUpdateUserPayload,\n  ResponsePromise,\n} from \"../..\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin User API Routes](https://docs.medusajs.com/v1/api/admin#users). All its method\n * are available in the JS Client under the `medusa.admin.users` property.\n *\n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n *\n * A store can have more than one user, each having the same privileges. Admins can manage users, their passwords, and more.\n *\n * Related Guide: [How to manage users](https://docs.medusajs.com/v1/modules/users/admin/manage-users).\n */\nclass AdminUsersResource extends BaseResource {\n  /**\n   * Generate a password token for an admin user with a given email. This also triggers the `user.password_reset` event. So, if you have a Notification Service installed\n   * that can handle this event, a notification, such as an email, will be sent to the user. The token is triggered as part of the `user.password_reset` event's payload.\n   * That token must be used later to reset the password using the {@link resetPassword} method.\n   * @param {AdminResetPasswordTokenRequest} payload - The user's reset details.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<void>} Resolves when the token is generated successfully.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.users.sendResetPasswordToken({\n   *   email: \"user@example.com\"\n   * })\n   * .then(() => {\n   *   // successful\n   * })\n   * .catch(() => {\n   *   // error occurred\n   * })\n   */\n  sendResetPasswordToken(\n    payload: AdminResetPasswordTokenRequest,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<void> {\n    const path = `/admin/users/password-token`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Reset the password of an admin user using their reset password token. You must generate a reset password token first for the user using the {@link sendResetPasswordToken} method,\n   * then use that token to reset the password in this method.\n   * @param {AdminResetPasswordRequest} payload - The reset details.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminUserRes>} Resolves to the user's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.users.resetPassword({\n   *   token: \"supersecrettoken\",\n   *   password: \"supersecret\"\n   * })\n   * .then(({ user }) => {\n   *   console.log(user.id);\n   * })\n   */\n  resetPassword(\n    payload: AdminResetPasswordRequest,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminUserRes> {\n    const path = `admin/users/reset-password`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve an admin user's details.\n   * @param {string} id - The user's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminUserRes>} Resolves to the user's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.users.retrieve(userId)\n   * .then(({ user }) => {\n   *   console.log(user.id);\n   * })\n   */\n  retrieve(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminUserRes> {\n    const path = `/admin/users/${id}`\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Create an admin user. The user has the same privileges as all admin users, and will be able to authenticate and perform admin functionalities right after creation.\n   * @param {AdminCreateUserPayload} payload - The user to create.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminUserRes>} Resolves to the user's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.users.create({\n   *   email: \"user@example.com\",\n   *   password: \"supersecret\"\n   * })\n   * .then(({ user }) => {\n   *   console.log(user.id);\n   * })\n   */\n  create(\n    payload: AdminCreateUserPayload,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminUserRes> {\n    const path = `/admin/users`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Update an admin user's details.\n   * @param {string} id - The user's ID.\n   * @param {AdminUpdateUserPayload} payload - The attributes to update in the user.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminUserRes>} Resolves to the user's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.users.update(userId, {\n   *   first_name: \"Marcellus\"\n   * })\n   * .then(({ user }) => {\n   *   console.log(user.id);\n   * })\n   */\n  update(\n    id: string,\n    payload: AdminUpdateUserPayload,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminUserRes> {\n    const path = `/admin/users/${id}`\n    return this.client.request(\"POST\", path, payload, {}, customHeaders)\n  }\n\n  /**\n   * Delete a user. Once deleted, the user will not be able to authenticate or perform admin functionalities.\n   * @param {string} id - The user's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminDeleteUserRes>} Resolves to the deletion operation's details.\n   *\n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.users.delete(userId)\n   * .then(({ id, object, deleted }) => {\n   *   console.log(id);\n   * })\n   */\n  delete(\n    id: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminDeleteUserRes> {\n    const path = `/admin/users/${id}`\n    return this.client.request(\"DELETE\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve all admin users.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminUsersListRes>} Resolves to the list of users.\n   *\n   * @example\n   * To list users:\n   *\n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.users.list()\n   * .then(({ users }) => {\n   *   console.log(users.length);\n   * })\n   * ```\n   *\n   * By default, only the first `20` users are returned. You can control pagination by specifying the `limit` and `offset` properties:\n   *\n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.users.list({\n   *   limit,\n   *   offset\n   * })\n   * .then(({ users, limit, offset, count }) => {\n   *   console.log(users.length);\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetUsersParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminUsersListRes> {\n    let path = `/admin/users`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path += `?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminUsersResource\n", "import {\n  AdminGetVariantParams,\n  AdminGetVariantsParams,\n  AdminGetVariantsVariantInventoryRes,\n  AdminVariantsListRes,\n  AdminVariantsRes,\n} from \"@medusajs/medusa\"\nimport qs from \"qs\"\nimport { ResponsePromise } from \"../..\"\nimport BaseResource from \"../base\"\n\n/**\n * This class is used to send requests to [Admin Product Variant API Routes](https://docs.medusajs.com/v1/api/admin#product-variants). All its method\n * are available in the JS Client under the `medusa.admin.variants` property.\n * \n * All methods in this class require {@link AdminAuthResource.createSession | user authentication}.\n * \n * Product variants are the actual salable item in your store. Each variant is a combination of the different option values available on the product.\n * Product variants can be managed through {@link AdminProductsResource}.\n * \n * Related Guide: [How to manage product variants](https://docs.medusajs.com/v1/modules/products/admin/manage-products#manage-product-variants).\n */\nclass AdminVariantsResource extends BaseResource {\n  /**\n   * Retrieve a list of product variants. The product variant can be filtered by fields such as `id` or `title` passed in the `query` parameter. The product variant can also be paginated.\n   * @param {AdminGetVariantsParams} query - Filters and pagination configurations to apply on the retrieved product variants.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminVariantsListRes>} Resolves to the list of product variants with pagination fields.\n   * \n   * @example\n   * To list product variants:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.variants.list()\n   * .then(({ variants, limit, offset, count }) => {\n   *   console.log(variants.length);\n   * })\n   * ```\n   * \n   * To specify relations that should be retrieved within the product variants:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.variants.list({\n   *   expand: \"options\"\n   * })\n   * .then(({ variants, limit, offset, count }) => {\n   *   console.log(variants.length);\n   * })\n   * ```\n   * \n   * By default, only the first `100` records are retrieved. You can control pagination by specifying the `limit` and `offset` properties:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.variants.list({\n   *   expand: \"options\",\n   *   limit,\n   *   offset\n   * })\n   * .then(({ variants, limit, offset, count }) => {\n   *   console.log(variants.length);\n   * })\n   * ```\n   */\n  list(\n    query?: AdminGetVariantsParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminVariantsListRes> {\n    let path = `/admin/variants`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/variants?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve a product variant's details.\n   * @param {string} id - The product variant's ID.\n   * @param {AdminGetVariantParams} query - Configurations to apply on the retrieved product variant.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminVariantsRes>} Resolves to the product variant's details.\n   * \n   * @example\n   * A simple example that retrieves a product variant by its ID:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.variants.retrieve(variantId)\n   * .then(({ variant }) => {\n   *   console.log(variant.id);\n   * })\n   * ```\n   * \n   * To specify relations that should be retrieved:\n   * \n   * ```ts\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.variants.retrieve(variantId, {\n   *   expand: \"options\"\n   * })\n   * .then(({ variant }) => {\n   *   console.log(variant.id);\n   * })\n   * ```\n   */\n  retrieve(\n    id: string,\n    query?: AdminGetVariantParams,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminVariantsRes> {\n    let path = `/admin/variants/${id}`\n\n    if (query) {\n      const queryString = qs.stringify(query)\n      path = `/admin/variants?${queryString}`\n    }\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n\n  /**\n   * Retrieve the available inventory of a product variant.\n   * @param {string} variantId - The product variant's ID.\n   * @param {Record<string, any>} customHeaders - Custom headers to attach to the request.\n   * @returns {ResponsePromise<AdminGetVariantsVariantInventoryRes>} Resolves to the inventory details of the product variant.\n   * \n   * @example\n   * import Medusa from \"@medusajs/medusa-js\"\n   * const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3 })\n   * // must be previously logged in or use api token\n   * medusa.admin.variants.getInventory(variantId)\n   * .then(({ variant }) => {\n   *   console.log(variant.inventory, variant.sales_channel_availability)\n   * })\n   */\n  getInventory(\n    variantId: string,\n    customHeaders: Record<string, any> = {}\n  ): ResponsePromise<AdminGetVariantsVariantInventoryRes> {\n    const path = `/admin/variants/${variantId}/inventory`\n\n    return this.client.request(\"GET\", path, undefined, {}, customHeaders)\n  }\n}\n\nexport default AdminVariantsResource\n", "import BaseResource from \"../base\"\nimport AdminAuthResource from \"./auth\"\nimport AdminBatchJobsResource from \"./batch-jobs\"\nimport AdminCollectionsResource from \"./collections\"\nimport AdminCurrenciesResource from \"./currencies\"\nimport AdminCustomResource from \"./custom\"\nimport AdminCustomerGroupsResource from \"./customer-groups\"\nimport AdminCustomersResource from \"./customers\"\nimport AdminDiscountsResource from \"./discounts\"\nimport AdminDraftOrdersResource from \"./draft-orders\"\nimport AdminGiftCardsResource from \"./gift-cards\"\nimport AdminInventoryItemsResource from \"./inventory-item\"\nimport AdminInvitesResource from \"./invites\"\nimport AdminNotesResource from \"./notes\"\nimport AdminNotificationsResource from \"./notifications\"\nimport AdminOrderEditsResource from \"./order-edits\"\nimport AdminOrdersResource from \"./orders\"\nimport AdminPaymentCollectionsResource from \"./payment-collections\"\nimport AdminPaymentsResource from \"./payments\"\nimport AdminPriceListResource from \"./price-lists\"\nimport AdminProductCategoriesResource from \"./product-categories\"\nimport AdminProductTagsResource from \"./product-tags\"\nimport AdminProductTypesResource from \"./product-types\"\nimport AdminProductsResource from \"./products\"\nimport AdminPublishableApiKeyResource from \"./publishable-api-keys\"\nimport AdminRegionsResource from \"./regions\"\nimport AdminReservationsResource from \"./reservations\"\nimport AdminReturnReasonsResource from \"./return-reasons\"\nimport AdminReturnsResource from \"./returns\"\nimport AdminSalesChannelsResource from \"./sales-channels\"\nimport AdminShippingOptionsResource from \"./shipping-options\"\nimport AdminShippingProfilesResource from \"./shipping-profiles\"\nimport AdminStockLocationsResource from \"./stock-locations\"\nimport AdminStoresResource from \"./store\"\nimport AdminSwapsResource from \"./swaps\"\nimport AdminTaxRatesResource from \"./tax-rates\"\nimport AdminUploadsResource from \"./uploads\"\nimport AdminUsersResource from \"./users\"\nimport AdminVariantsResource from \"./variants\"\n\n/**\n * This class includes properties used to send requests to the [Admin API Routes](https://docs.medusajs.com/v1/api/admin). All its properties\n * are available in the JS Client under the `medusa.admin` property.\n */\nclass Admin extends BaseResource {\n  /**\n   * An instance of {@link AdminAuthResource} used to send requests to [Admin Auth API Routes](https://docs.medusajs.com/v1/api/admin#auth).\n   */\n  public auth = new AdminAuthResource(this.client)\n  /**\n   * An instance of {@link AdminBatchJobsResource} used to send requests to [Admin Batch Job API Routes](https://docs.medusajs.com/v1/api/admin#batch-jobs).\n   */\n  public batchJobs = new AdminBatchJobsResource(this.client)\n  /**\n   * An instance of {@link AdminCustomersResource} used to send requests to [Admin Customer API Routes](https://docs.medusajs.com/v1/api/admin#customers).\n   */\n  public customers = new AdminCustomersResource(this.client)\n  /**\n   * An instance of {@link AdminCustomerGroupsResource} used to send requests to [Admin Customer Group API Routes](https://docs.medusajs.com/v1/api/admin#customer-groups).\n   */\n  public customerGroups = new AdminCustomerGroupsResource(this.client)\n  /**\n   * An instance of {@link AdminDiscountsResource} used to send requests to [Admin Discount API Routes](https://docs.medusajs.com/v1/api/admin#discounts).\n   */\n  public discounts = new AdminDiscountsResource(this.client)\n  /**\n   * An instance of {@link AdminCurrenciesResource} used to send requests to [Admin Currency API Routes](https://docs.medusajs.com/v1/api/admin#currencies_getcurrencies).\n   */\n  public currencies = new AdminCurrenciesResource(this.client)\n  /**\n   * An instance of {@link AdminCollectionsResource} used to send requests to [Admin Product Collection API Routes](https://docs.medusajs.com/v1/api/admin#product-collections).\n   */\n  public collections = new AdminCollectionsResource(this.client)\n  /**\n   * An instance of {@link AdminDraftOrdersResource} used to send requests to [Admin Draft Order API Routes](https://docs.medusajs.com/v1/api/admin#draft-orders).\n   */\n  public draftOrders = new AdminDraftOrdersResource(this.client)\n  /**\n   * An instance of {@link AdminGiftCardsResource} used to send requests to [Admin Gift Card API Routes](https://docs.medusajs.com/v1/api/admin#gift-cards).\n   */\n  public giftCards = new AdminGiftCardsResource(this.client)\n  /**\n   * An instance of {@link AdminInvitesResource} used to send requests to [Admin Invite API Routes](https://docs.medusajs.com/v1/api/admin#invites).\n   */\n  public invites = new AdminInvitesResource(this.client)\n  /**\n   * An instance of {@link AdminInventoryItemsResource} used to send requests to [Admin Inventory Item API Routes](https://docs.medusajs.com/v1/api/admin#inventory-items).\n   */\n  public inventoryItems = new AdminInventoryItemsResource(this.client)\n  /**\n   * An instance of {@link AdminNotesResource} used to send requests to [Admin Note API Routes](https://docs.medusajs.com/v1/api/admin#notes).\n   */\n  public notes = new AdminNotesResource(this.client)\n  /**\n   * An instance of {@link AdminPriceListResource} used to send requests to [Admin Price List API Routes](https://docs.medusajs.com/v1/api/admin#price-lists).\n   */\n  public priceLists = new AdminPriceListResource(this.client)\n  /**\n   * An instance of {@link AdminProductsResource} used to send requests to [Admin Product API Routes](https://docs.medusajs.com/v1/api/admin#products).\n   */\n  public products = new AdminProductsResource(this.client)\n  /**\n   * An instance of {@link AdminProductTagsResource} used to send requests to [Admin Product Tag API Routes](https://docs.medusajs.com/v1/api/admin#product-tags).\n   */\n  public productTags = new AdminProductTagsResource(this.client)\n  /**\n   * An instance of {@link AdminProductTypesResource} used to send requests to [Admin Product Type API Routes](https://docs.medusajs.com/v1/api/admin#product-types).\n   */\n  public productTypes = new AdminProductTypesResource(this.client)\n  /**\n   * An instance of {@link AdminUsersResource} used to send requests to [Admin User API Routes](https://docs.medusajs.com/v1/api/admin#users).\n   */\n  public users = new AdminUsersResource(this.client)\n  /**\n   * An instance of {@link AdminReturnsResource} used to send requests to [Admin Return API Routes](https://docs.medusajs.com/v1/api/admin#returns).\n   */\n  public returns = new AdminReturnsResource(this.client)\n  /**\n   * An instance of {@link AdminOrdersResource} used to send requests to [Admin Order API Routes](https://docs.medusajs.com/v1/api/admin#orders).\n   */\n  public orders = new AdminOrdersResource(this.client)\n  /**\n   * An instance of {@link AdminOrderEditsResource} used to send requests to [Admin Order Edit API Routes](https://docs.medusajs.com/v1/api/admin#order-edits).\n   */\n  public orderEdits = new AdminOrderEditsResource(this.client)\n  /**\n   * An instance of {@link AdminPublishableApiKeyResource} used to send requests to [Admin Publishable API Key API Routes](https://docs.medusajs.com/v1/api/admin#publishable-api-keys).\n   */\n  public publishableApiKeys = new AdminPublishableApiKeyResource(this.client)\n  /**\n   * An instance of {@link AdminReturnReasonsResource} used to send requests to [Admin Return Reason API Routes](https://docs.medusajs.com/v1/api/admin#return-reasons).\n   */\n  public returnReasons = new AdminReturnReasonsResource(this.client)\n  /**\n   * @props variants - An instance of {@link AdminVariantsResource} used to send requests to [Admin Product Variant API Routes](https://docs.medusajs.com/v1/api/admin#product-variants).\n   */\n  public variants = new AdminVariantsResource(this.client)\n  /**\n   * An instance of {@link AdminSalesChannelsResource} used to send requests to [Admin Sales Channel API Routes](https://docs.medusajs.com/v1/api/admin#sales-channels).\n   */\n  public salesChannels = new AdminSalesChannelsResource(this.client)\n  /**\n   * An instance of {@link AdminSwapsResource} used to send requests to [Admin Swap API Routes](https://docs.medusajs.com/v1/api/admin#swaps).\n   */\n  public swaps = new AdminSwapsResource(this.client)\n  /**\n   * An instance of {@link AdminShippingProfilesResource} used to send requests to [Admin Shipping Profile API Routes](https://docs.medusajs.com/v1/api/admin#shipping-profiles).\n   */\n  public shippingProfiles = new AdminShippingProfilesResource(this.client)\n  /**\n   * An instance of {@link AdminStockLocationsResource} used to send requests to [Admin Stock Location API Routes](https://docs.medusajs.com/v1/api/admin#stock-locations).\n   */\n  public stockLocations = new AdminStockLocationsResource(this.client)\n  /**\n   * An instance of {@link AdminStoresResource} used to send requests to [Admin Store API Routes](https://docs.medusajs.com/v1/api/admin#store).\n   */\n  public store = new AdminStoresResource(this.client)\n  /**\n   * An instance of {@link AdminShippingOptionsResource} used to send requests to [Admin Shipping Option API Routes](https://docs.medusajs.com/v1/api/admin#shipping-options).\n   */\n  public shippingOptions = new AdminShippingOptionsResource(this.client)\n  /**\n   * An instance of {@link AdminRegionsResource} used to send requests to [Admin Region API Routes](https://docs.medusajs.com/v1/api/admin#regions).\n   */\n  public regions = new AdminRegionsResource(this.client)\n  /**\n   * An instance of {@link AdminReservationsResource} used to send requests to [Admin Reservation API Routes](https://docs.medusajs.com/v1/api/admin#reservations).\n   */\n  public reservations = new AdminReservationsResource(this.client)\n  /**\n   * An instance of {@link AdminNotificationsResource} used to send requests to [Admin Notification API Routes](https://docs.medusajs.com/v1/api/admin#notifications).\n   */\n  public notifications = new AdminNotificationsResource(this.client)\n  /**\n   * An instance of {@link AdminTaxRatesResource} used to send requests to [Admin Tax Rate API Routes](https://docs.medusajs.com/v1/api/admin#tax-rates).\n   */\n  public taxRates = new AdminTaxRatesResource(this.client)\n  /**\n   * An instance of {@link AdminUploadsResource} used to send requests to [Admin Upload API Routes](https://docs.medusajs.com/v1/api/admin#uploads).\n   */\n  public uploads = new AdminUploadsResource(this.client)\n  /**\n   * An instance of {@link AdminPaymentCollectionsResource} used to send requests to [Admin Payment Collection API Routes](https://docs.medusajs.com/v1/api/admin#payment-collections).\n   */\n  public paymentCollections = new AdminPaymentCollectionsResource(this.client)\n  /**\n   * An instance of {@link AdminPaymentsResource} used to send requests to [Admin Payment API Routes](https://docs.medusajs.com/v1/api/admin#payments).\n   */\n  public payments = new AdminPaymentsResource(this.client)\n  /**\n   * An instance of {@link AdminProductCategoriesResource} used to send requests to [Admin Product Category API Routes](https://docs.medusajs.com/v1/api/admin#product-categories).\n   */\n  public productCategories = new AdminProductCategoriesResource(this.client)\n  /**\n   * An instance of {@link AdminCustomResource} used to send requests to custom API Routes.\n   */\n  public custom = new AdminCustomResource(this.client)\n}\n\nexport {\n  Admin,\n  AdminCustomResource,\n  AdminAuthResource,\n  AdminBatchJobsResource,\n  AdminCollectionsResource,\n  AdminCurrenciesResource,\n  AdminCustomerGroupsResource,\n  AdminCustomersResource,\n  AdminDiscountsResource,\n  AdminDraftOrdersResource,\n  AdminGiftCardsResource,\n  AdminInventoryItemsResource,\n  AdminInvitesResource,\n  AdminNotesResource,\n  AdminNotificationsResource,\n  AdminOrdersResource,\n  AdminOrderEditsResource,\n  AdminPriceListResource,\n  AdminProductTagsResource,\n  AdminProductTypesResource,\n  AdminProductsResource,\n  AdminPublishableApiKeyResource,\n  AdminRegionsResource,\n  AdminReservationsResource,\n  AdminReturnReasonsResource,\n  AdminReturnsResource,\n  AdminSalesChannelsResource,\n  AdminShippingOptionsResource,\n  AdminShippingProfilesResource,\n  AdminStockLocationsResource,\n  AdminStoresResource,\n  AdminSwapsResource,\n  AdminTaxRatesResource,\n  AdminUploadsResource,\n  AdminUsersResource,\n  AdminVariantsResource,\n  AdminPaymentCollectionsResource,\n  AdminPaymentsResource,\n  AdminProductCategoriesResource,\n}\n", "import MedusaError from \"./error\"\nimport KeyManager from \"./key-manager\"\nimport Client, { type Config, type RequestOptions } from \"./request\"\nimport {\n  Admin,\n  AuthResource,\n  CartsResource,\n  CollectionsResource,\n  CustomersResource,\n  GiftCardsResource,\n  OrderEditsResource,\n  OrdersResource,\n  PaymentCollectionsResource,\n  PaymentMethodsResource,\n  ProductCategoriesResource,\n  ProductsResource,\n  ProductTagsResource,\n  ProductTypesResource,\n  RegionsResource,\n  ReturnReasonsResource,\n  ReturnsResource,\n  ShippingOptionsResource,\n  SwapsResource,\n} from \"./resources\"\n\nclass Medusa {\n  public client: Client\n  public admin: Admin\n\n  public auth: AuthResource\n  public carts: CartsResource\n  public customers: CustomersResource\n  public errors: MedusaError\n  public orders: OrdersResource\n  public orderEdits: OrderEditsResource\n  public products: ProductsResource\n  public productTypes: ProductTypesResource\n  public regions: RegionsResource\n  public returnReasons: ReturnReasonsResource\n  public returns: ReturnsResource\n  public shippingOptions: ShippingOptionsResource\n  public swaps: SwapsResource\n  public collections: CollectionsResource\n  public giftCards: GiftCardsResource\n  public paymentMethods: PaymentMethodsResource\n  public paymentCollections: PaymentCollectionsResource\n  public productTags: ProductTagsResource\n  public productCategories: ProductCategoriesResource\n\n  constructor(config: Config) {\n    this.client = new Client(config)\n\n    this.admin = new Admin(this.client)\n\n    this.auth = new AuthResource(this.client)\n    this.carts = new CartsResource(this.client)\n    this.customers = new CustomersResource(this.client)\n    this.errors = new MedusaError()\n    this.orders = new OrdersResource(this.client)\n    this.orderEdits = new OrderEditsResource(this.client)\n    this.products = new ProductsResource(this.client)\n    this.productTypes = new ProductTypesResource(this.client)\n    this.regions = new RegionsResource(this.client)\n    this.returnReasons = new ReturnReasonsResource(this.client)\n    this.returns = new ReturnsResource(this.client)\n    this.shippingOptions = new ShippingOptionsResource(this.client)\n    this.swaps = new SwapsResource(this.client)\n    this.collections = new CollectionsResource(this.client)\n    this.giftCards = new GiftCardsResource(this.client)\n    this.paymentMethods = new PaymentMethodsResource(this.client)\n    this.paymentCollections = new PaymentCollectionsResource(this.client)\n    this.productTags = new ProductTagsResource(this.client)\n    this.productCategories = new ProductCategoriesResource(this.client)\n  }\n\n  /**\n   * Set a PublishableApiKey that will be sent with each request\n   * to define the scope of available resources.\n   *\n   * @param key - PublishableApiKey identifier\n   */\n  setPublishableKey(key: string) {\n    KeyManager.registerPublishableApiKey(key)\n  }\n}\n\nexport default Medusa\nexport * from \"./resources\"\nexport * from \"./typings\"\nexport type { Config, RequestOptions }\nexport { MedusaError, KeyManager, Client }\n", "import axios, {\n  AxiosError,\n  AxiosInstance,\n  AxiosRequestConfig,\n  AxiosResponse,\n} from 'axios';\n\n/**\n * Configuration for the Axios `request` method.\n */\nexport interface RetryConfig {\n  /**\n   * The number of times to retry the request.  Defaults to 3.\n   */\n  retry?: number;\n\n  /**\n   * The number of retries already attempted.\n   */\n  currentRetryAttempt?: number;\n\n  /**\n   * The amount of time to initially delay the retry.  Defaults to 100.\n   */\n  retryDelay?: number;\n\n  /**\n   * The instance of the axios object to which the interceptor is attached.\n   */\n  instance?: AxiosInstance;\n\n  /**\n   * The HTTP Methods that will be automatically retried.\n   * Defaults to ['GET','PUT','HEAD','OPTIONS','DELETE']\n   */\n  httpMethodsToRetry?: string[];\n\n  /**\n   * The HTTP response status codes that will automatically be retried.\n   * Defaults to: [[100, 199], [429, 429], [500, 599]]\n   */\n  statusCodesToRetry?: number[][];\n\n  /**\n   * Function to invoke when a retry attempt is made.\n   */\n  onRetryAttempt?: (err: AxiosError) => void;\n\n  /**\n   * Function to invoke which determines if you should retry\n   */\n  shouldRetry?: (err: AxiosError) => boolean;\n\n  /**\n   * When there is no response, the number of retries to attempt. Defaults to 2.\n   */\n  noResponseRetries?: number;\n\n  /**\n   * Backoff Type; 'linear', 'static' or 'exponential'.\n   */\n  backoffType?: 'linear' | 'static' | 'exponential';\n\n  /**\n   * Whether to check for 'Retry-After' header in response and use value as delay. Defaults to true.\n   */\n  checkRetryAfter?: boolean;\n\n  /**\n   * Max permitted Retry-After value (in ms) - rejects if greater. Defaults to 5 mins.\n   */\n  maxRetryAfter?: number;\n\n  /**\n   * Ceiling for calculated delay (in ms) - delay will not exceed this value.\n   */\n  maxRetryDelay?: number;\n}\n\nexport type RaxConfig = {\n  raxConfig: RetryConfig;\n} & AxiosRequestConfig;\n\n/**\n * Attach the interceptor to the Axios instance.\n * @param instance The optional Axios instance on which to attach the\n * interceptor.\n * @returns The id of the interceptor attached to the axios instance.\n */\nexport function attach(instance?: AxiosInstance) {\n  instance = instance || axios;\n  return instance.interceptors.response.use(onFulfilled, onError);\n}\n\n/**\n * Eject the Axios interceptor that is providing retry capabilities.\n * @param interceptorId The interceptorId provided in the config.\n * @param instance The axios instance using this interceptor.\n */\nexport function detach(interceptorId: number, instance?: AxiosInstance) {\n  instance = instance || axios;\n  instance.interceptors.response.eject(interceptorId);\n}\n\nfunction onFulfilled(res: AxiosResponse) {\n  return res;\n}\n\n/**\n * Some versions of axios are converting arrays into objects during retries.\n * This will attempt to convert an object with the following structure into\n * an array, where the keys correspond to the indices:\n * {\n *   0: {\n *     // some property\n *   },\n *   1: {\n *     // another\n *   }\n * }\n * @param obj The object that (may) have integers that correspond to an index\n * @returns An array with the pucked values\n */\nfunction normalizeArray<T>(obj?: T[]): T[] | undefined {\n  const arr: T[] = [];\n  if (!obj) {\n    return undefined;\n  }\n  if (Array.isArray(obj)) {\n    return obj;\n  }\n  if (typeof obj === 'object') {\n    Object.keys(obj).forEach(key => {\n      if (typeof key === 'number') {\n        arr[key] = obj[key];\n      }\n    });\n  }\n  return arr;\n}\n\n/**\n * Parse the Retry-After header.\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n * @param header Retry-After header value\n * @returns Number of milliseconds, or undefined if invalid\n */\nfunction parseRetryAfter(header: string): number | undefined {\n  // Header value may be string containing integer seconds\n  const value = Number(header);\n  if (!Number.isNaN(value)) {\n    return value * 1000;\n  }\n  // Or HTTP date time string\n  const dateTime = Date.parse(header);\n  if (!Number.isNaN(dateTime)) {\n    return dateTime - Date.now();\n  }\n  return undefined;\n}\n\nfunction onError(err: AxiosError) {\n  if (axios.isCancel(err)) {\n    return Promise.reject(err);\n  }\n\n  const config = getConfig(err) || {};\n  config.currentRetryAttempt = config.currentRetryAttempt || 0;\n  config.retry = typeof config.retry === 'number' ? config.retry : 3;\n  config.retryDelay =\n    typeof config.retryDelay === 'number' ? config.retryDelay : 100;\n  config.instance = config.instance || axios;\n  config.backoffType = config.backoffType || 'exponential';\n  config.httpMethodsToRetry = normalizeArray(config.httpMethodsToRetry) || [\n    'GET',\n    'HEAD',\n    'PUT',\n    'OPTIONS',\n    'DELETE',\n  ];\n  config.noResponseRetries =\n    typeof config.noResponseRetries === 'number' ? config.noResponseRetries : 2;\n  config.checkRetryAfter =\n    typeof config.checkRetryAfter === 'boolean' ? config.checkRetryAfter : true;\n  config.maxRetryAfter =\n    typeof config.maxRetryAfter === 'number' ? config.maxRetryAfter : 60000 * 5;\n\n  // If this wasn't in the list of status codes where we want\n  // to automatically retry, return.\n  const retryRanges = [\n    // https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n    // 1xx - Retry (Informational, request still processing)\n    // 2xx - Do not retry (Success)\n    // 3xx - Do not retry (Redirect)\n    // 4xx - Do not retry (Client errors)\n    // 429 - Retry (\"Too Many Requests\")\n    // 5xx - Retry (Server errors)\n    [100, 199],\n    [429, 429],\n    [500, 599],\n  ];\n  config.statusCodesToRetry =\n    normalizeArray(config.statusCodesToRetry) || retryRanges;\n\n  // Put the config back into the err\n  err.config = err.config || {}; // allow for wider range of errors\n  (err.config as RaxConfig).raxConfig = {...config};\n\n  // Determine if we should retry the request\n  const shouldRetryFn = config.shouldRetry || shouldRetryRequest;\n  if (!shouldRetryFn(err)) {\n    return Promise.reject(err);\n  }\n\n  // Create a promise that invokes the retry after the backOffDelay\n  const onBackoffPromise = new Promise((resolve, reject) => {\n    let delay = 0;\n    // If enabled, check for 'Retry-After' header in response to use as delay\n    if (\n      config.checkRetryAfter &&\n      err.response &&\n      err.response.headers['retry-after']\n    ) {\n      const retryAfter = parseRetryAfter(err.response.headers['retry-after']);\n      if (retryAfter && retryAfter > 0 && retryAfter <= config.maxRetryAfter!) {\n        delay = retryAfter;\n      } else {\n        return reject(err);\n      }\n    }\n\n    // Now it's certain that a retry is supposed to happen. Incremenent the\n    // counter, critical for linear and exp backoff delay calc. Note that\n    // `config.currentRetryAttempt` is local to this function whereas\n    // `(err.config as RaxConfig).raxConfig` is state that is tranferred across\n    // retries. That is, we want to mutate `(err.config as\n    // RaxConfig).raxConfig`. Another important note is about the definition of\n    // `currentRetryAttempt`: When we are here becasue the first and actual\n    // HTTP request attempt failed then `currentRetryAttempt` is still zero. We\n    // have found that a retry is indeed required. Since that is (will be)\n    // indeed the first retry it makes sense to now increase\n    // `currentRetryAttempt` by 1. So that it is in fact 1 for the first retry\n    // (as opposed to 0 or 2); an intuitive convention to use for the math\n    // below.\n    (err.config as RaxConfig).raxConfig!.currentRetryAttempt! += 1;\n\n    // store with shorter and more expressive variable name.\n    const retrycount = (err.config as RaxConfig).raxConfig!\n      .currentRetryAttempt!;\n\n    // Calculate delay according to chosen strategy\n    // Default to exponential backoff - formula: ((2^c - 1) / 2) * 1000\n    if (delay === 0) {\n      // was not set by Retry-After logic\n      if (config.backoffType === 'linear') {\n        // The delay between the first (actual) attempt and the first retry\n        // should be non-zero. Rely on the convention that `retrycount` is\n        // equal to 1 for the first retry when we are in here (was once 0,\n        // which was a bug -- see #122).\n        delay = retrycount * 1000;\n      } else if (config.backoffType === 'static') {\n        delay = config.retryDelay!;\n      } else {\n        delay = ((Math.pow(2, retrycount) - 1) / 2) * 1000;\n      }\n      if (typeof config.maxRetryDelay === 'number') {\n        delay = Math.min(delay, config.maxRetryDelay);\n      }\n    }\n    setTimeout(resolve, delay);\n  });\n\n  // Notify the user if they added an `onRetryAttempt` handler\n  const onRetryAttemptPromise = config.onRetryAttempt\n    ? Promise.resolve(config.onRetryAttempt(err))\n    : Promise.resolve();\n\n  // Return the promise in which recalls axios to retry the request\n  return Promise.resolve()\n    .then(() => onBackoffPromise)\n    .then(() => onRetryAttemptPromise)\n    .then(() => config.instance!.request(err.config));\n}\n\n/**\n * Determine based on config if we should retry the request.\n * @param err The AxiosError passed to the interceptor.\n */\nexport function shouldRetryRequest(err: AxiosError) {\n  const config = (err.config as RaxConfig).raxConfig;\n\n  // If there's no config, or retries are disabled, return.\n  if (!config || config.retry === 0) {\n    return false;\n  }\n\n  // Check if this error has no response (ETIMEDOUT, ENOTFOUND, etc)\n  if (\n    !err.response &&\n    (config.currentRetryAttempt || 0) >= config.noResponseRetries!\n  ) {\n    return false;\n  }\n\n  // Only retry with configured HttpMethods.\n  if (\n    !err.config.method ||\n    config.httpMethodsToRetry!.indexOf(err.config.method.toUpperCase()) < 0\n  ) {\n    return false;\n  }\n\n  // If this wasn't in the list of status codes where we want\n  // to automatically retry, return.\n  if (err.response && err.response.status) {\n    let isInRange = false;\n    for (const [min, max] of config.statusCodesToRetry!) {\n      const status = err.response.status;\n      if (status >= min && status <= max) {\n        isInRange = true;\n        break;\n      }\n    }\n    if (!isInRange) {\n      return false;\n    }\n  }\n\n  // If we are out of retry attempts, return\n  config.currentRetryAttempt = config.currentRetryAttempt || 0;\n  if (config.currentRetryAttempt >= config.retry!) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Acquire the raxConfig object from an AxiosError if available.\n * @param err The Axios error with a config object.\n */\nexport function getConfig(err: AxiosError) {\n  if (err && err.config) {\n    return (err.config as RaxConfig).raxConfig;\n  }\n  return;\n}\n\n// Include this so `config.raxConfig` works easily.\n// See https://github.com/JustinBeckwith/retry-axios/issues/64.\ndeclare module 'axios' {\n  export interface AxiosRequestConfig {\n    raxConfig?: RetryConfig;\n  }\n}\n", "// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}", "export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;", "import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "import validate from './validate.js';\n\nfunction parse(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  let v;\n  const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nexport default parse;", "import { unsafeStringify } from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function v35(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    var _namespace;\n\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return unsafeStringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}", "/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nexport default md5;", "import v35 from './v35.js';\nimport md5 from './md5.js';\nconst v3 = v35('v3', 0x30, md5);\nexport default v3;", "const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;", "// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nexport default sha1;", "import v35 from './v35.js';\nimport sha1 from './sha1.js';\nconst v5 = v35('v5', 0x50, sha1);\nexport default v5;"],
  "mappings": "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",
  "names": ["i", "i", "l", "b", "v", "i", "i", "i", "l", "c", "require_axios", "O", "s", "i", "xs", "ys", "f", "m", "x", "l", "c", "n", "k", "j", "isNaN", "_", "concatty", "b", "i", "j", "slicy", "Empty", "O", "undefined", "doEval", "stringToPath", "getBaseIntrinsic", "i", "require_utils", "i", "compactQueue", "j", "arrayToObject", "merge", "encode", "c", "compact", "isRegExp", "isBuffer", "combine", "b", "maybeMap", "isNonNullishPrimitive", "v", "stringify", "value", "j", "normalizeStringifyOptions", "i", "i", "normalizeParseOptions", "parse", "import_axios", "attach", "instance", "axios", "interceptors", "response", "use", "onFulfilled", "onError", "onFulfilled", "res", "normalizeArray", "obj", "arr", "Array", "isArray", "Object", "keys", "forEach", "key", "onError", "err", "axios", "isCancel", "Promise", "reject", "config", "getConfig", "currentRetryAttempt", "retry", "retryDelay", "instance", "backoffType", "httpMethodsToRetry", "noResponseRetries", "checkRetryAfter", "maxRetryAfter", "statusCodesToRetry", "raxConfig", "shouldRetry", "shouldRetryRequest", "onBackoffPromise", "resolve", "delay", "response", "headers", "retryAfter", "header", "value", "Number", "isNaN", "dateTime", "Date", "parse", "now", "retrycount", "Math", "pow", "maxRetryDelay", "min", "setTimeout", "onRetryAttemptPromise", "onRetryAttempt", "then", "request", "method", "indexOf", "toUpperCase", "status", "isInRange", "n", "o", "const", "i", "v", "i", "i", "x", "b", "c", "y", "q", "s", "i", "f", "s", "x", "y", "z", "n", "K", "H", "i", "l", "N", "M", "j", "W", "b", "c", "T", "import_qs", "MedusaError", "type", "MedusaInvalidRequestError", "MedusaAuthenticationError", "MedusaAPIError", "MedusaPermissionError", "MedusaConnectionError", "KeyManager", "key", "key_manager_default", "JwtTokenManager", "token", "domain", "jwt_token_manager_default", "unAuthenticatedAdminEndpoints", "defaultConfig", "Client", "config", "err", "numRetries", "maxRetries", "obj", "result", "header", "text", "path", "method", "userHeaders", "customHeaders", "defaultHeaders", "publishableApiKey", "uuidv4", "client", "axios", "cfg", "payload", "options", "reqOpts", "data", "response", "request_default", "BaseResource", "AddressesResource", "address_id", "addresses_default", "AuthResource", "email", "res", "auth_default", "LineItemsResource", "cart_id", "line_id", "line_items_default", "CartsResource", "code", "provider_id", "carts_default", "CollectionsResource", "id", "query", "qs", "collections_default", "PaymentMethodsResource", "payment_methods_default", "CustomerResource", "params", "customers_default", "GiftCardsResource", "gift_cards_default", "OrderEditsResource", "order_edits_default", "OrdersResource", "orders_default", "PaymentCollectionsResource", "queryString", "session_id", "payment_collections_default", "ProductCategoriesResource", "product_categories_default", "ProductTagsResource", "product_tags_default", "ProductTypesResource", "product_types_default", "ProductVariantsResource", "product_variants_default", "ProductsResource", "searchOptions", "products_default", "RegionsResource", "regions_default", "ReturnReasonsResource", "return_reasons_default", "ReturnsResource", "returns_default", "ShippingOptionsResource", "shipping_options_default", "SwapsResource", "swaps_default", "AdminAuthResource", "stringifyNullProperties", "input", "convertProperties", "acc", "createAdminPath", "formattedPath", "AdminBatchJobsResource", "batchJobId", "batch_jobs_default", "AdminCollectionsResource", "AdminCurrenciesResource", "currencies_default", "AdminCustomResource", "custom_default", "AdminCustomerGroupsResource", "customer_groups_default", "AdminCustomersResource", "AdminDiscountsResource", "regionId", "discountId", "conditionId", "discounts_default", "AdminDraftOrdersResource", "itemId", "draft_orders_default", "AdminGiftCardsResource", "AdminInventoryItemsResource", "inventoryItemId", "locationId", "inventory_item_default", "AdminInvitesResource", "invites_default", "AdminNotesResource", "notes_default", "AdminNotificationsResource", "notifications_default", "AdminOrderEditsResource", "orderEditId", "itemChangeId", "AdminOrdersResource", "fulfillmentId", "swapId", "claimId", "AdminPaymentCollectionsResource", "AdminPaymentsResource", "payments_default", "AdminPriceListResource", "priceListId", "productId", "variantId", "price_lists_default", "AdminProductCategoriesResource", "productCategoryId", "AdminProductTagsResource", "AdminProductTypesResource", "AdminProductsResource", "optionId", "AdminPublishableApiKeyResource", "publishable_api_keys_default", "AdminRegionsResource", "country_code", "AdminReservationsResource", "reservations_default", "AdminReturnReasonsResource", "AdminReturnsResource", "AdminSalesChannelsResource", "salesChannelId", "sales_channels_default", "AdminShippingOptionsResource", "AdminShippingProfilesResource", "shipping_profiles_default", "AdminStockLocationsResource", "stockLocationId", "stock_locations_default", "AdminStoresResource", "currency_code", "store_default", "AdminSwapsResource", "AdminTaxRatesResource", "tax_rates_default", "AdminUploadsResource", "file", "f", "uploads_default", "AdminUsersResource", "users_default", "AdminVariantsResource", "variants_default", "Admin", "Medusa", "src_default"]
}
