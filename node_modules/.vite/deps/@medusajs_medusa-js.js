import {
  axios_default
} from "./chunk-FQA4EKRV.js";
import {
  __commonJS,
  __toESM
} from "./chunk-5WWUZCGV.js";

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/bind.js"(exports, module) {
    "use strict";
    module.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i3 = 0; i3 < args.length; i3++) {
          args[i3] = arguments[i3];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/utils.js
var require_utils = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/utils.js"(exports, module) {
    "use strict";
    var bind = require_bind();
    var toString = Object.prototype.toString;
    function isArray(val) {
      return toString.call(val) === "[object Array]";
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    function isArrayBuffer(val) {
      return toString.call(val) === "[object ArrayBuffer]";
    }
    function isFormData(val) {
      return typeof FormData !== "undefined" && val instanceof FormData;
    }
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && val.buffer instanceof ArrayBuffer;
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (toString.call(val) !== "[object Object]") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    function isDate(val) {
      return toString.call(val) === "[object Date]";
    }
    function isFile(val) {
      return toString.call(val) === "[object File]";
    }
    function isBlob(val) {
      return toString.call(val) === "[object Blob]";
    }
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isURLSearchParams(val) {
      return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
    }
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i3 = 0, l2 = obj.length; i3 < l2; i3++) {
          fn.call(null, obj[i3], i3, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i3 = 0, l2 = arguments.length; i3 < l2; i3++) {
        forEach(arguments[i3], assignValue);
      }
      return result;
    }
    function extend(a, b2, thisArg) {
      forEach(b2, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    module.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/buildURL.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v2) {
            if (utils.isDate(v2)) {
              v2 = v2.toISOString();
            } else if (utils.isObject(v2)) {
              v2 = JSON.stringify(v2);
            }
            parts.push(encode(key) + "=" + encode(v2));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/InterceptorManager.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };
    module.exports = InterceptorManager;
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/enhanceError.js
var require_enhanceError = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/enhanceError.js"(exports, module) {
    "use strict";
    module.exports = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }
      error.request = request;
      error.response = response;
      error.isAxiosError = true;
      error.toJSON = function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      };
      return error;
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/createError.js
var require_createError = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/createError.js"(exports, module) {
    "use strict";
    var enhanceError = require_enhanceError();
    module.exports = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/settle.js"(exports, module) {
    "use strict";
    var createError = require_createError();
    module.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError(
          "Request failed with status code " + response.status,
          response.config,
          null,
          response.request,
          response
        ));
      }
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/cookies.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs support document.cookie
      function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) {
              cookie.push("expires=" + new Date(expires).toGMTString());
            }
            if (utils.isString(path)) {
              cookie.push("path=" + path);
            }
            if (utils.isString(domain)) {
              cookie.push("domain=" + domain);
            }
            if (secure === true) {
              cookie.push("secure");
            }
            document.cookie = cookie.join("; ");
          },
          read: function read(name) {
            var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
          },
          remove: function remove(name) {
            this.write(name, "", Date.now() - 864e5);
          }
        };
      }()
    ) : (
      // Non standard browser env (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return {
          write: function write() {
          },
          read: function read() {
            return null;
          },
          remove: function remove() {
          }
        };
      }()
    );
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module) {
    "use strict";
    module.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/combineURLs.js"(exports, module) {
    "use strict";
    module.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/buildFullPath.js"(exports, module) {
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/parseHeaders.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i3;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i3 = line.indexOf(":");
        key = utils.trim(line.substr(0, i3)).toLowerCase();
        val = utils.trim(line.substr(i3 + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      function standardBrowserEnv() {
        var msie = /(msie|trident)/i.test(navigator.userAgent);
        var urlParsingNode = document.createElement("a");
        var originURL;
        function resolveURL(url) {
          var href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin(requestURL) {
          var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      }()
    );
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/cancel/Cancel.js
var require_Cancel = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/cancel/Cancel.js"(exports, module) {
    "use strict";
    function Cancel(message) {
      this.message = message;
    }
    Cancel.prototype.toString = function toString() {
      return "Cancel" + (this.message ? ": " + this.message : "");
    };
    Cancel.prototype.__CANCEL__ = true;
    module.exports = Cancel;
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/adapters/xhr.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var createError = require_createError();
    var defaults = require_defaults();
    var Cancel = require_Cancel();
    module.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData)) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(createError("Request aborted", config, "ECONNABORTED", request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(createError("Network Error", config, null, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          var transitional = config.transitional || defaults.transitional;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError(
            timeoutErrorMessage,
            config,
            transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED",
            request
          ));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken || config.signal) {
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || cancel && cancel.type ? new Cancel("canceled") : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        if (!requestData) {
          requestData = null;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/defaults.js
var require_defaults = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/defaults.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var normalizeHeaderName = require_normalizeHeaderName();
    var enhanceError = require_enhanceError();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_xhr();
      }
      return adapter;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        if (utils.isObject(data) || headers && headers["Content-Type"] === "application/json") {
          setContentTypeIfUnset(headers, "application/json");
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
        if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw enhanceError(e, this, "E_JSON_PARSE");
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module.exports = defaults;
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/transformData.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var defaults = require_defaults();
    module.exports = function transformData(data, headers, fns) {
      var context = this || defaults;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });
      return data;
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/cancel/isCancel.js"(exports, module) {
    "use strict";
    module.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/dispatchRequest.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    var Cancel = require_Cancel();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new Cancel("canceled");
      }
    }
    module.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );
      config.headers = utils.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );
      utils.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/mergeConfig.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        }
      }
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
      };
      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/env/data.js
var require_data = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/env/data.js"(exports, module) {
    module.exports = {
      "version": "0.24.0"
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/validator.js"(exports, module) {
    "use strict";
    var VERSION = require_data().version;
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i3) {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i3 < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (validator === false) {
          throw new Error(formatMessage(opt, " has been removed" + (version ? " in " + version : "")));
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new TypeError("options must be an object");
      }
      var keys = Object.keys(options);
      var i3 = keys.length;
      while (i3-- > 0) {
        var opt = keys[i3];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === void 0 || validator(value, opt, options);
          if (result !== true) {
            throw new TypeError("option " + opt + " must be " + result);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw Error("Unknown option " + opt);
        }
      }
    }
    module.exports = {
      assertOptions,
      validators
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/Axios.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var validator = require_validator();
    var validators = validator.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(config) {
      if (typeof config === "string") {
        config = arguments[1] || {};
        config.url = arguments[0];
      } else {
        config = config || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var transitional = config.transitional;
      if (transitional !== void 0) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data
        }));
      };
    });
    module.exports = Axios;
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/cancel/CancelToken.js"(exports, module) {
    "use strict";
    var Cancel = require_Cancel();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      this.promise.then(function(cancel) {
        if (!token._listeners)
          return;
        var i3;
        var l2 = token._listeners.length;
        for (i3 = 0; i3 < l2; i3++) {
          token._listeners[i3](cancel);
        }
        token._listeners = null;
      });
      this.promise.then = function(onfulfilled) {
        var _resolve;
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c2) {
        cancel = c2;
      });
      return {
        token,
        cancel
      };
    };
    module.exports = CancelToken;
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/spread.js"(exports, module) {
    "use strict";
    module.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/isAxiosError.js"(exports, module) {
    "use strict";
    module.exports = function isAxiosError(payload) {
      return typeof payload === "object" && payload.isAxiosError === true;
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/axios.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults);
    axios.Axios = Axios;
    axios.Cancel = require_Cancel();
    axios.CancelToken = require_CancelToken();
    axios.isCancel = require_isCancel();
    axios.VERSION = require_data().version;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = require_spread();
    axios.isAxiosError = require_isAxiosError();
    module.exports = axios;
    module.exports.default = axios;
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/index.js"(exports, module) {
    module.exports = require_axios();
  }
});

// node_modules/es-errors/type.js
var require_type = __commonJS({
  "node_modules/es-errors/type.js"(exports, module) {
    "use strict";
    module.exports = TypeError;
  }
});

// (disabled):node_modules/object-inspect/util.inspect
var require_util = __commonJS({
  "(disabled):node_modules/object-inspect/util.inspect"() {
  }
});

// node_modules/object-inspect/index.js
var require_object_inspect = __commonJS({
  "node_modules/object-inspect/index.js"(exports, module) {
    var hasMap = typeof Map === "function" && Map.prototype;
    var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
    var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
    var mapForEach = hasMap && Map.prototype.forEach;
    var hasSet = typeof Set === "function" && Set.prototype;
    var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
    var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
    var setForEach = hasSet && Set.prototype.forEach;
    var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
    var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
    var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
    var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
    var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
    var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
    var booleanValueOf = Boolean.prototype.valueOf;
    var objectToString = Object.prototype.toString;
    var functionToString = Function.prototype.toString;
    var $match = String.prototype.match;
    var $slice = String.prototype.slice;
    var $replace = String.prototype.replace;
    var $toUpperCase = String.prototype.toUpperCase;
    var $toLowerCase = String.prototype.toLowerCase;
    var $test = RegExp.prototype.test;
    var $concat = Array.prototype.concat;
    var $join = Array.prototype.join;
    var $arrSlice = Array.prototype.slice;
    var $floor = Math.floor;
    var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
    var gOPS = Object.getOwnPropertySymbols;
    var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
    var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
    var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O2) {
      return O2.__proto__;
    } : null);
    function addNumericSeparator(num, str) {
      if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str)) {
        return str;
      }
      var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
      if (typeof num === "number") {
        var int = num < 0 ? -$floor(-num) : $floor(num);
        if (int !== num) {
          var intStr = String(int);
          var dec = $slice.call(str, intStr.length + 1);
          return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
        }
      }
      return $replace.call(str, sepRegex, "$&_");
    }
    var utilInspect = require_util();
    var inspectCustom = utilInspect.custom;
    var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
    var quotes = {
      __proto__: null,
      "double": '"',
      single: "'"
    };
    var quoteREs = {
      __proto__: null,
      "double": /(["\\])/g,
      single: /(['\\])/g
    };
    module.exports = function inspect_(obj, options, depth, seen) {
      var opts = options || {};
      if (has(opts, "quoteStyle") && !has(quotes, opts.quoteStyle)) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
      }
      if (has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
      }
      var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
      if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
        throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
      }
      if (has(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
      }
      if (has(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
      }
      var numericSeparator = opts.numericSeparator;
      if (typeof obj === "undefined") {
        return "undefined";
      }
      if (obj === null) {
        return "null";
      }
      if (typeof obj === "boolean") {
        return obj ? "true" : "false";
      }
      if (typeof obj === "string") {
        return inspectString(obj, opts);
      }
      if (typeof obj === "number") {
        if (obj === 0) {
          return Infinity / obj > 0 ? "0" : "-0";
        }
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
      }
      if (typeof obj === "bigint") {
        var bigIntStr = String(obj) + "n";
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
      }
      var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
      if (typeof depth === "undefined") {
        depth = 0;
      }
      if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
        return isArray(obj) ? "[Array]" : "[Object]";
      }
      var indent = getIndent(opts, depth);
      if (typeof seen === "undefined") {
        seen = [];
      } else if (indexOf(seen, obj) >= 0) {
        return "[Circular]";
      }
      function inspect(value, from, noIndent) {
        if (from) {
          seen = $arrSlice.call(seen);
          seen.push(from);
        }
        if (noIndent) {
          var newOpts = {
            depth: opts.depth
          };
          if (has(opts, "quoteStyle")) {
            newOpts.quoteStyle = opts.quoteStyle;
          }
          return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
      }
      if (typeof obj === "function" && !isRegExp(obj)) {
        var name = nameOf(obj);
        var keys = arrObjKeys(obj, inspect);
        return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
      }
      if (isSymbol(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
        return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
      }
      if (isElement(obj)) {
        var s2 = "<" + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i3 = 0; i3 < attrs.length; i3++) {
          s2 += " " + attrs[i3].name + "=" + wrapQuotes(quote(attrs[i3].value), "double", opts);
        }
        s2 += ">";
        if (obj.childNodes && obj.childNodes.length) {
          s2 += "...";
        }
        s2 += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
        return s2;
      }
      if (isArray(obj)) {
        if (obj.length === 0) {
          return "[]";
        }
        var xs2 = arrObjKeys(obj, inspect);
        if (indent && !singleLineValues(xs2)) {
          return "[" + indentedJoin(xs2, indent) + "]";
        }
        return "[ " + $join.call(xs2, ", ") + " ]";
      }
      if (isError(obj)) {
        var parts = arrObjKeys(obj, inspect);
        if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) {
          return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect(obj.cause), parts), ", ") + " }";
        }
        if (parts.length === 0) {
          return "[" + String(obj) + "]";
        }
        return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
      }
      if (typeof obj === "object" && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) {
          return utilInspect(obj, { depth: maxDepth - depth });
        } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
          return obj.inspect();
        }
      }
      if (isMap(obj)) {
        var mapParts = [];
        if (mapForEach) {
          mapForEach.call(obj, function(value, key) {
            mapParts.push(inspect(key, obj, true) + " => " + inspect(value, obj));
          });
        }
        return collectionOf("Map", mapSize.call(obj), mapParts, indent);
      }
      if (isSet(obj)) {
        var setParts = [];
        if (setForEach) {
          setForEach.call(obj, function(value) {
            setParts.push(inspect(value, obj));
          });
        }
        return collectionOf("Set", setSize.call(obj), setParts, indent);
      }
      if (isWeakMap(obj)) {
        return weakCollectionOf("WeakMap");
      }
      if (isWeakSet(obj)) {
        return weakCollectionOf("WeakSet");
      }
      if (isWeakRef(obj)) {
        return weakCollectionOf("WeakRef");
      }
      if (isNumber(obj)) {
        return markBoxed(inspect(Number(obj)));
      }
      if (isBigInt(obj)) {
        return markBoxed(inspect(bigIntValueOf.call(obj)));
      }
      if (isBoolean(obj)) {
        return markBoxed(booleanValueOf.call(obj));
      }
      if (isString(obj)) {
        return markBoxed(inspect(String(obj)));
      }
      if (typeof window !== "undefined" && obj === window) {
        return "{ [object Window] }";
      }
      if (typeof globalThis !== "undefined" && obj === globalThis || typeof global !== "undefined" && obj === global) {
        return "{ [object globalThis] }";
      }
      if (!isDate(obj) && !isRegExp(obj)) {
        var ys2 = arrObjKeys(obj, inspect);
        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? "" : "null prototype";
        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
        var constructorTag = isPlainObject || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
        var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
        if (ys2.length === 0) {
          return tag + "{}";
        }
        if (indent) {
          return tag + "{" + indentedJoin(ys2, indent) + "}";
        }
        return tag + "{ " + $join.call(ys2, ", ") + " }";
      }
      return String(obj);
    };
    function wrapQuotes(s2, defaultStyle, opts) {
      var style = opts.quoteStyle || defaultStyle;
      var quoteChar = quotes[style];
      return quoteChar + s2 + quoteChar;
    }
    function quote(s2) {
      return $replace.call(String(s2), /"/g, "&quot;");
    }
    function canTrustToString(obj) {
      return !toStringTag || !(typeof obj === "object" && (toStringTag in obj || typeof obj[toStringTag] !== "undefined"));
    }
    function isArray(obj) {
      return toStr(obj) === "[object Array]" && canTrustToString(obj);
    }
    function isDate(obj) {
      return toStr(obj) === "[object Date]" && canTrustToString(obj);
    }
    function isRegExp(obj) {
      return toStr(obj) === "[object RegExp]" && canTrustToString(obj);
    }
    function isError(obj) {
      return toStr(obj) === "[object Error]" && canTrustToString(obj);
    }
    function isString(obj) {
      return toStr(obj) === "[object String]" && canTrustToString(obj);
    }
    function isNumber(obj) {
      return toStr(obj) === "[object Number]" && canTrustToString(obj);
    }
    function isBoolean(obj) {
      return toStr(obj) === "[object Boolean]" && canTrustToString(obj);
    }
    function isSymbol(obj) {
      if (hasShammedSymbols) {
        return obj && typeof obj === "object" && obj instanceof Symbol;
      }
      if (typeof obj === "symbol") {
        return true;
      }
      if (!obj || typeof obj !== "object" || !symToString) {
        return false;
      }
      try {
        symToString.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isBigInt(obj) {
      if (!obj || typeof obj !== "object" || !bigIntValueOf) {
        return false;
      }
      try {
        bigIntValueOf.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    var hasOwn = Object.prototype.hasOwnProperty || function(key) {
      return key in this;
    };
    function has(obj, key) {
      return hasOwn.call(obj, key);
    }
    function toStr(obj) {
      return objectToString.call(obj);
    }
    function nameOf(f4) {
      if (f4.name) {
        return f4.name;
      }
      var m2 = $match.call(functionToString.call(f4), /^function\s*([\w$]+)/);
      if (m2) {
        return m2[1];
      }
      return null;
    }
    function indexOf(xs2, x2) {
      if (xs2.indexOf) {
        return xs2.indexOf(x2);
      }
      for (var i3 = 0, l2 = xs2.length; i3 < l2; i3++) {
        if (xs2[i3] === x2) {
          return i3;
        }
      }
      return -1;
    }
    function isMap(x2) {
      if (!mapSize || !x2 || typeof x2 !== "object") {
        return false;
      }
      try {
        mapSize.call(x2);
        try {
          setSize.call(x2);
        } catch (s2) {
          return true;
        }
        return x2 instanceof Map;
      } catch (e) {
      }
      return false;
    }
    function isWeakMap(x2) {
      if (!weakMapHas || !x2 || typeof x2 !== "object") {
        return false;
      }
      try {
        weakMapHas.call(x2, weakMapHas);
        try {
          weakSetHas.call(x2, weakSetHas);
        } catch (s2) {
          return true;
        }
        return x2 instanceof WeakMap;
      } catch (e) {
      }
      return false;
    }
    function isWeakRef(x2) {
      if (!weakRefDeref || !x2 || typeof x2 !== "object") {
        return false;
      }
      try {
        weakRefDeref.call(x2);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isSet(x2) {
      if (!setSize || !x2 || typeof x2 !== "object") {
        return false;
      }
      try {
        setSize.call(x2);
        try {
          mapSize.call(x2);
        } catch (m2) {
          return true;
        }
        return x2 instanceof Set;
      } catch (e) {
      }
      return false;
    }
    function isWeakSet(x2) {
      if (!weakSetHas || !x2 || typeof x2 !== "object") {
        return false;
      }
      try {
        weakSetHas.call(x2, weakSetHas);
        try {
          weakMapHas.call(x2, weakMapHas);
        } catch (s2) {
          return true;
        }
        return x2 instanceof WeakSet;
      } catch (e) {
      }
      return false;
    }
    function isElement(x2) {
      if (!x2 || typeof x2 !== "object") {
        return false;
      }
      if (typeof HTMLElement !== "undefined" && x2 instanceof HTMLElement) {
        return true;
      }
      return typeof x2.nodeName === "string" && typeof x2.getAttribute === "function";
    }
    function inspectString(str, opts) {
      if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
      }
      var quoteRE = quoteREs[opts.quoteStyle || "single"];
      quoteRE.lastIndex = 0;
      var s2 = $replace.call($replace.call(str, quoteRE, "\\$1"), /[\x00-\x1f]/g, lowbyte);
      return wrapQuotes(s2, "single", opts);
    }
    function lowbyte(c2) {
      var n2 = c2.charCodeAt(0);
      var x2 = {
        8: "b",
        9: "t",
        10: "n",
        12: "f",
        13: "r"
      }[n2];
      if (x2) {
        return "\\" + x2;
      }
      return "\\x" + (n2 < 16 ? "0" : "") + $toUpperCase.call(n2.toString(16));
    }
    function markBoxed(str) {
      return "Object(" + str + ")";
    }
    function weakCollectionOf(type) {
      return type + " { ? }";
    }
    function collectionOf(type, size, entries, indent) {
      var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
      return type + " (" + size + ") {" + joinedEntries + "}";
    }
    function singleLineValues(xs2) {
      for (var i3 = 0; i3 < xs2.length; i3++) {
        if (indexOf(xs2[i3], "\n") >= 0) {
          return false;
        }
      }
      return true;
    }
    function getIndent(opts, depth) {
      var baseIndent;
      if (opts.indent === "	") {
        baseIndent = "	";
      } else if (typeof opts.indent === "number" && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), " ");
      } else {
        return null;
      }
      return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
      };
    }
    function indentedJoin(xs2, indent) {
      if (xs2.length === 0) {
        return "";
      }
      var lineJoiner = "\n" + indent.prev + indent.base;
      return lineJoiner + $join.call(xs2, "," + lineJoiner) + "\n" + indent.prev;
    }
    function arrObjKeys(obj, inspect) {
      var isArr = isArray(obj);
      var xs2 = [];
      if (isArr) {
        xs2.length = obj.length;
        for (var i3 = 0; i3 < obj.length; i3++) {
          xs2[i3] = has(obj, i3) ? inspect(obj[i3], obj) : "";
        }
      }
      var syms = typeof gOPS === "function" ? gOPS(obj) : [];
      var symMap;
      if (hasShammedSymbols) {
        symMap = {};
        for (var k2 = 0; k2 < syms.length; k2++) {
          symMap["$" + syms[k2]] = syms[k2];
        }
      }
      for (var key in obj) {
        if (!has(obj, key)) {
          continue;
        }
        if (isArr && String(Number(key)) === key && key < obj.length) {
          continue;
        }
        if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
          continue;
        } else if ($test.call(/[^\w$]/, key)) {
          xs2.push(inspect(key, obj) + ": " + inspect(obj[key], obj));
        } else {
          xs2.push(key + ": " + inspect(obj[key], obj));
        }
      }
      if (typeof gOPS === "function") {
        for (var j2 = 0; j2 < syms.length; j2++) {
          if (isEnumerable.call(obj, syms[j2])) {
            xs2.push("[" + inspect(syms[j2]) + "]: " + inspect(obj[syms[j2]], obj));
          }
        }
      }
      return xs2;
    }
  }
});

// node_modules/side-channel-list/index.js
var require_side_channel_list = __commonJS({
  "node_modules/side-channel-list/index.js"(exports, module) {
    "use strict";
    var inspect = require_object_inspect();
    var $TypeError = require_type();
    var listGetNode = function(list, key, isDelete) {
      var prev = list;
      var curr;
      for (; (curr = prev.next) != null; prev = curr) {
        if (curr.key === key) {
          prev.next = curr.next;
          if (!isDelete) {
            curr.next = /** @type {NonNullable<typeof list.next>} */
            list.next;
            list.next = curr;
          }
          return curr;
        }
      }
    };
    var listGet = function(objects, key) {
      if (!objects) {
        return void 0;
      }
      var node = listGetNode(objects, key);
      return node && node.value;
    };
    var listSet = function(objects, key, value) {
      var node = listGetNode(objects, key);
      if (node) {
        node.value = value;
      } else {
        objects.next = /** @type {import('./list.d.ts').ListNode<typeof value, typeof key>} */
        {
          // eslint-disable-line no-param-reassign, no-extra-parens
          key,
          next: objects.next,
          value
        };
      }
    };
    var listHas = function(objects, key) {
      if (!objects) {
        return false;
      }
      return !!listGetNode(objects, key);
    };
    var listDelete = function(objects, key) {
      if (objects) {
        return listGetNode(objects, key, true);
      }
    };
    module.exports = function getSideChannelList() {
      var $o;
      var channel = {
        assert: function(key) {
          if (!channel.has(key)) {
            throw new $TypeError("Side channel does not contain " + inspect(key));
          }
        },
        "delete": function(key) {
          var root = $o && $o.next;
          var deletedNode = listDelete($o, key);
          if (deletedNode && root && root === deletedNode) {
            $o = void 0;
          }
          return !!deletedNode;
        },
        get: function(key) {
          return listGet($o, key);
        },
        has: function(key) {
          return listHas($o, key);
        },
        set: function(key, value) {
          if (!$o) {
            $o = {
              next: void 0
            };
          }
          listSet(
            /** @type {NonNullable<typeof $o>} */
            $o,
            key,
            value
          );
        }
      };
      return channel;
    };
  }
});

// node_modules/es-object-atoms/index.js
var require_es_object_atoms = __commonJS({
  "node_modules/es-object-atoms/index.js"(exports, module) {
    "use strict";
    module.exports = Object;
  }
});

// node_modules/es-errors/index.js
var require_es_errors = __commonJS({
  "node_modules/es-errors/index.js"(exports, module) {
    "use strict";
    module.exports = Error;
  }
});

// node_modules/es-errors/eval.js
var require_eval = __commonJS({
  "node_modules/es-errors/eval.js"(exports, module) {
    "use strict";
    module.exports = EvalError;
  }
});

// node_modules/es-errors/range.js
var require_range = __commonJS({
  "node_modules/es-errors/range.js"(exports, module) {
    "use strict";
    module.exports = RangeError;
  }
});

// node_modules/es-errors/ref.js
var require_ref = __commonJS({
  "node_modules/es-errors/ref.js"(exports, module) {
    "use strict";
    module.exports = ReferenceError;
  }
});

// node_modules/es-errors/syntax.js
var require_syntax = __commonJS({
  "node_modules/es-errors/syntax.js"(exports, module) {
    "use strict";
    module.exports = SyntaxError;
  }
});

// node_modules/es-errors/uri.js
var require_uri = __commonJS({
  "node_modules/es-errors/uri.js"(exports, module) {
    "use strict";
    module.exports = URIError;
  }
});

// node_modules/math-intrinsics/abs.js
var require_abs = __commonJS({
  "node_modules/math-intrinsics/abs.js"(exports, module) {
    "use strict";
    module.exports = Math.abs;
  }
});

// node_modules/math-intrinsics/floor.js
var require_floor = __commonJS({
  "node_modules/math-intrinsics/floor.js"(exports, module) {
    "use strict";
    module.exports = Math.floor;
  }
});

// node_modules/math-intrinsics/max.js
var require_max = __commonJS({
  "node_modules/math-intrinsics/max.js"(exports, module) {
    "use strict";
    module.exports = Math.max;
  }
});

// node_modules/math-intrinsics/min.js
var require_min = __commonJS({
  "node_modules/math-intrinsics/min.js"(exports, module) {
    "use strict";
    module.exports = Math.min;
  }
});

// node_modules/math-intrinsics/pow.js
var require_pow = __commonJS({
  "node_modules/math-intrinsics/pow.js"(exports, module) {
    "use strict";
    module.exports = Math.pow;
  }
});

// node_modules/math-intrinsics/round.js
var require_round = __commonJS({
  "node_modules/math-intrinsics/round.js"(exports, module) {
    "use strict";
    module.exports = Math.round;
  }
});

// node_modules/math-intrinsics/isNaN.js
var require_isNaN = __commonJS({
  "node_modules/math-intrinsics/isNaN.js"(exports, module) {
    "use strict";
    module.exports = Number.isNaN || function isNaN2(a) {
      return a !== a;
    };
  }
});

// node_modules/math-intrinsics/sign.js
var require_sign = __commonJS({
  "node_modules/math-intrinsics/sign.js"(exports, module) {
    "use strict";
    var $isNaN = require_isNaN();
    module.exports = function sign(number) {
      if ($isNaN(number) || number === 0) {
        return number;
      }
      return number < 0 ? -1 : 1;
    };
  }
});

// node_modules/gopd/gOPD.js
var require_gOPD = __commonJS({
  "node_modules/gopd/gOPD.js"(exports, module) {
    "use strict";
    module.exports = Object.getOwnPropertyDescriptor;
  }
});

// node_modules/gopd/index.js
var require_gopd = __commonJS({
  "node_modules/gopd/index.js"(exports, module) {
    "use strict";
    var $gOPD = require_gOPD();
    if ($gOPD) {
      try {
        $gOPD([], "length");
      } catch (e) {
        $gOPD = null;
      }
    }
    module.exports = $gOPD;
  }
});

// node_modules/es-define-property/index.js
var require_es_define_property = __commonJS({
  "node_modules/es-define-property/index.js"(exports, module) {
    "use strict";
    var $defineProperty = Object.defineProperty || false;
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = false;
      }
    }
    module.exports = $defineProperty;
  }
});

// node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  "node_modules/has-symbols/shams.js"(exports, module) {
    "use strict";
    module.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (var _2 in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = (
          /** @type {PropertyDescriptor} */
          Object.getOwnPropertyDescriptor(obj, sym)
        );
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  "node_modules/has-symbols/index.js"(exports, module) {
    "use strict";
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// node_modules/get-proto/Reflect.getPrototypeOf.js
var require_Reflect_getPrototypeOf = __commonJS({
  "node_modules/get-proto/Reflect.getPrototypeOf.js"(exports, module) {
    "use strict";
    module.exports = typeof Reflect !== "undefined" && Reflect.getPrototypeOf || null;
  }
});

// node_modules/get-proto/Object.getPrototypeOf.js
var require_Object_getPrototypeOf = __commonJS({
  "node_modules/get-proto/Object.getPrototypeOf.js"(exports, module) {
    "use strict";
    var $Object = require_es_object_atoms();
    module.exports = $Object.getPrototypeOf || null;
  }
});

// node_modules/function-bind/implementation.js
var require_implementation = __commonJS({
  "node_modules/function-bind/implementation.js"(exports, module) {
    "use strict";
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var toStr = Object.prototype.toString;
    var max = Math.max;
    var funcType = "[object Function]";
    var concatty = function concatty2(a, b2) {
      var arr = [];
      for (var i3 = 0; i3 < a.length; i3 += 1) {
        arr[i3] = a[i3];
      }
      for (var j2 = 0; j2 < b2.length; j2 += 1) {
        arr[j2 + a.length] = b2[j2];
      }
      return arr;
    };
    var slicy = function slicy2(arrLike, offset) {
      var arr = [];
      for (var i3 = offset || 0, j2 = 0; i3 < arrLike.length; i3 += 1, j2 += 1) {
        arr[j2] = arrLike[i3];
      }
      return arr;
    };
    var joiny = function(arr, joiner) {
      var str = "";
      for (var i3 = 0; i3 < arr.length; i3 += 1) {
        str += arr[i3];
        if (i3 + 1 < arr.length) {
          str += joiner;
        }
      }
      return str;
    };
    module.exports = function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slicy(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result = target.apply(
            this,
            concatty(args, arguments)
          );
          if (Object(result) === result) {
            return result;
          }
          return this;
        }
        return target.apply(
          that,
          concatty(args, arguments)
        );
      };
      var boundLength = max(0, target.length - args.length);
      var boundArgs = [];
      for (var i3 = 0; i3 < boundLength; i3++) {
        boundArgs[i3] = "$" + i3;
      }
      bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  }
});

// node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  "node_modules/function-bind/index.js"(exports, module) {
    "use strict";
    var implementation = require_implementation();
    module.exports = Function.prototype.bind || implementation;
  }
});

// node_modules/call-bind-apply-helpers/functionCall.js
var require_functionCall = __commonJS({
  "node_modules/call-bind-apply-helpers/functionCall.js"(exports, module) {
    "use strict";
    module.exports = Function.prototype.call;
  }
});

// node_modules/call-bind-apply-helpers/functionApply.js
var require_functionApply = __commonJS({
  "node_modules/call-bind-apply-helpers/functionApply.js"(exports, module) {
    "use strict";
    module.exports = Function.prototype.apply;
  }
});

// node_modules/call-bind-apply-helpers/reflectApply.js
var require_reflectApply = __commonJS({
  "node_modules/call-bind-apply-helpers/reflectApply.js"(exports, module) {
    "use strict";
    module.exports = typeof Reflect !== "undefined" && Reflect && Reflect.apply;
  }
});

// node_modules/call-bind-apply-helpers/actualApply.js
var require_actualApply = __commonJS({
  "node_modules/call-bind-apply-helpers/actualApply.js"(exports, module) {
    "use strict";
    var bind = require_function_bind();
    var $apply = require_functionApply();
    var $call = require_functionCall();
    var $reflectApply = require_reflectApply();
    module.exports = $reflectApply || bind.call($call, $apply);
  }
});

// node_modules/call-bind-apply-helpers/index.js
var require_call_bind_apply_helpers = __commonJS({
  "node_modules/call-bind-apply-helpers/index.js"(exports, module) {
    "use strict";
    var bind = require_function_bind();
    var $TypeError = require_type();
    var $call = require_functionCall();
    var $actualApply = require_actualApply();
    module.exports = function callBindBasic(args) {
      if (args.length < 1 || typeof args[0] !== "function") {
        throw new $TypeError("a function is required");
      }
      return $actualApply(bind, $call, args);
    };
  }
});

// node_modules/dunder-proto/get.js
var require_get = __commonJS({
  "node_modules/dunder-proto/get.js"(exports, module) {
    "use strict";
    var callBind = require_call_bind_apply_helpers();
    var gOPD = require_gopd();
    var hasProtoAccessor;
    try {
      hasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */
      [].__proto__ === Array.prototype;
    } catch (e) {
      if (!e || typeof e !== "object" || !("code" in e) || e.code !== "ERR_PROTO_ACCESS") {
        throw e;
      }
    }
    var desc = !!hasProtoAccessor && gOPD && gOPD(
      Object.prototype,
      /** @type {keyof typeof Object.prototype} */
      "__proto__"
    );
    var $Object = Object;
    var $getPrototypeOf = $Object.getPrototypeOf;
    module.exports = desc && typeof desc.get === "function" ? callBind([desc.get]) : typeof $getPrototypeOf === "function" ? (
      /** @type {import('./get')} */
      function getDunder(value) {
        return $getPrototypeOf(value == null ? value : $Object(value));
      }
    ) : false;
  }
});

// node_modules/get-proto/index.js
var require_get_proto = __commonJS({
  "node_modules/get-proto/index.js"(exports, module) {
    "use strict";
    var reflectGetProto = require_Reflect_getPrototypeOf();
    var originalGetProto = require_Object_getPrototypeOf();
    var getDunderProto = require_get();
    module.exports = reflectGetProto ? function getProto(O2) {
      return reflectGetProto(O2);
    } : originalGetProto ? function getProto(O2) {
      if (!O2 || typeof O2 !== "object" && typeof O2 !== "function") {
        throw new TypeError("getProto: not an object");
      }
      return originalGetProto(O2);
    } : getDunderProto ? function getProto(O2) {
      return getDunderProto(O2);
    } : null;
  }
});

// node_modules/hasown/index.js
var require_hasown = __commonJS({
  "node_modules/hasown/index.js"(exports, module) {
    "use strict";
    var call = Function.prototype.call;
    var $hasOwn = Object.prototype.hasOwnProperty;
    var bind = require_function_bind();
    module.exports = bind.call(call, $hasOwn);
  }
});

// node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  "node_modules/get-intrinsic/index.js"(exports, module) {
    "use strict";
    var undefined2;
    var $Object = require_es_object_atoms();
    var $Error = require_es_errors();
    var $EvalError = require_eval();
    var $RangeError = require_range();
    var $ReferenceError = require_ref();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var $URIError = require_uri();
    var abs = require_abs();
    var floor = require_floor();
    var max = require_max();
    var min = require_min();
    var pow = require_pow();
    var round = require_round();
    var sign = require_sign();
    var $Function = Function;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e) {
      }
    };
    var $gOPD = require_gopd();
    var $defineProperty = require_es_define_property();
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var getProto = require_get_proto();
    var $ObjectGPO = require_Object_getPrototypeOf();
    var $ReflectGPO = require_Reflect_getPrototypeOf();
    var $apply = require_functionApply();
    var $call = require_functionCall();
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      __proto__: null,
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
      "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": $Error,
      "%eval%": eval,
      // eslint-disable-line no-eval
      "%EvalError%": $EvalError,
      "%Float16Array%": typeof Float16Array === "undefined" ? undefined2 : Float16Array,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": $Object,
      "%Object.getOwnPropertyDescriptor%": $gOPD,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": $RangeError,
      "%ReferenceError%": $ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": $URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet,
      "%Function.prototype.call%": $call,
      "%Function.prototype.apply%": $apply,
      "%Object.defineProperty%": $defineProperty,
      "%Object.getPrototypeOf%": $ObjectGPO,
      "%Math.abs%": abs,
      "%Math.floor%": floor,
      "%Math.max%": max,
      "%Math.min%": min,
      "%Math.pow%": pow,
      "%Math.round%": round,
      "%Math.sign%": sign,
      "%Reflect.getPrototypeOf%": $ReflectGPO
    };
    if (getProto) {
      try {
        null.error;
      } catch (e) {
        errorProto = getProto(getProto(e));
        INTRINSICS["%Error.prototype%"] = errorProto;
      }
    }
    var errorProto;
    var doEval = function doEval2(name) {
      var value;
      if (name === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value = fn.prototype;
        }
      } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen && getProto) {
          value = getProto(gen.prototype);
        }
      }
      INTRINSICS[name] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      __proto__: null,
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind = require_function_bind();
    var hasOwn = require_hasown();
    var $concat = bind.call($call, Array.prototype.concat);
    var $spliceApply = bind.call($apply, Array.prototype.splice);
    var $replace = bind.call($call, String.prototype.replace);
    var $strSlice = bind.call($call, String.prototype.slice);
    var $exec = bind.call($call, RegExp.prototype.exec);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    };
    module.exports = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== "string" || name.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name) === null) {
        throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
      }
      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i3 = 1, isOwn = true; i3 < parts.length; i3 += 1) {
        var part = parts[i3];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i3 + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  }
});

// node_modules/call-bound/index.js
var require_call_bound = __commonJS({
  "node_modules/call-bound/index.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBindBasic = require_call_bind_apply_helpers();
    var $indexOf = callBindBasic([GetIntrinsic("%String.prototype.indexOf%")]);
    module.exports = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = (
        /** @type {(this: unknown, ...args: unknown[]) => unknown} */
        GetIntrinsic(name, !!allowMissing)
      );
      if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
        return callBindBasic(
          /** @type {const} */
          [intrinsic]
        );
      }
      return intrinsic;
    };
  }
});

// node_modules/side-channel-map/index.js
var require_side_channel_map = __commonJS({
  "node_modules/side-channel-map/index.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_call_bound();
    var inspect = require_object_inspect();
    var $TypeError = require_type();
    var $Map = GetIntrinsic("%Map%", true);
    var $mapGet = callBound("Map.prototype.get", true);
    var $mapSet = callBound("Map.prototype.set", true);
    var $mapHas = callBound("Map.prototype.has", true);
    var $mapDelete = callBound("Map.prototype.delete", true);
    var $mapSize = callBound("Map.prototype.size", true);
    module.exports = !!$Map && /** @type {Exclude<import('.'), false>} */
    function getSideChannelMap() {
      var $m;
      var channel = {
        assert: function(key) {
          if (!channel.has(key)) {
            throw new $TypeError("Side channel does not contain " + inspect(key));
          }
        },
        "delete": function(key) {
          if ($m) {
            var result = $mapDelete($m, key);
            if ($mapSize($m) === 0) {
              $m = void 0;
            }
            return result;
          }
          return false;
        },
        get: function(key) {
          if ($m) {
            return $mapGet($m, key);
          }
        },
        has: function(key) {
          if ($m) {
            return $mapHas($m, key);
          }
          return false;
        },
        set: function(key, value) {
          if (!$m) {
            $m = new $Map();
          }
          $mapSet($m, key, value);
        }
      };
      return channel;
    };
  }
});

// node_modules/side-channel-weakmap/index.js
var require_side_channel_weakmap = __commonJS({
  "node_modules/side-channel-weakmap/index.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_call_bound();
    var inspect = require_object_inspect();
    var getSideChannelMap = require_side_channel_map();
    var $TypeError = require_type();
    var $WeakMap = GetIntrinsic("%WeakMap%", true);
    var $weakMapGet = callBound("WeakMap.prototype.get", true);
    var $weakMapSet = callBound("WeakMap.prototype.set", true);
    var $weakMapHas = callBound("WeakMap.prototype.has", true);
    var $weakMapDelete = callBound("WeakMap.prototype.delete", true);
    module.exports = $WeakMap ? (
      /** @type {Exclude<import('.'), false>} */
      function getSideChannelWeakMap() {
        var $wm;
        var $m;
        var channel = {
          assert: function(key) {
            if (!channel.has(key)) {
              throw new $TypeError("Side channel does not contain " + inspect(key));
            }
          },
          "delete": function(key) {
            if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
              if ($wm) {
                return $weakMapDelete($wm, key);
              }
            } else if (getSideChannelMap) {
              if ($m) {
                return $m["delete"](key);
              }
            }
            return false;
          },
          get: function(key) {
            if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
              if ($wm) {
                return $weakMapGet($wm, key);
              }
            }
            return $m && $m.get(key);
          },
          has: function(key) {
            if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
              if ($wm) {
                return $weakMapHas($wm, key);
              }
            }
            return !!$m && $m.has(key);
          },
          set: function(key, value) {
            if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
              if (!$wm) {
                $wm = new $WeakMap();
              }
              $weakMapSet($wm, key, value);
            } else if (getSideChannelMap) {
              if (!$m) {
                $m = getSideChannelMap();
              }
              $m.set(key, value);
            }
          }
        };
        return channel;
      }
    ) : getSideChannelMap;
  }
});

// node_modules/side-channel/index.js
var require_side_channel = __commonJS({
  "node_modules/side-channel/index.js"(exports, module) {
    "use strict";
    var $TypeError = require_type();
    var inspect = require_object_inspect();
    var getSideChannelList = require_side_channel_list();
    var getSideChannelMap = require_side_channel_map();
    var getSideChannelWeakMap = require_side_channel_weakmap();
    var makeChannel = getSideChannelWeakMap || getSideChannelMap || getSideChannelList;
    module.exports = function getSideChannel() {
      var $channelData;
      var channel = {
        assert: function(key) {
          if (!channel.has(key)) {
            throw new $TypeError("Side channel does not contain " + inspect(key));
          }
        },
        "delete": function(key) {
          return !!$channelData && $channelData["delete"](key);
        },
        get: function(key) {
          return $channelData && $channelData.get(key);
        },
        has: function(key) {
          return !!$channelData && $channelData.has(key);
        },
        set: function(key, value) {
          if (!$channelData) {
            $channelData = makeChannel();
          }
          $channelData.set(key, value);
        }
      };
      return channel;
    };
  }
});

// node_modules/qs/lib/formats.js
var require_formats = __commonJS({
  "node_modules/qs/lib/formats.js"(exports, module) {
    "use strict";
    var replace = String.prototype.replace;
    var percentTwenties = /%20/g;
    var Format = {
      RFC1738: "RFC1738",
      RFC3986: "RFC3986"
    };
    module.exports = {
      "default": Format.RFC3986,
      formatters: {
        RFC1738: function(value) {
          return replace.call(value, percentTwenties, "+");
        },
        RFC3986: function(value) {
          return String(value);
        }
      },
      RFC1738: Format.RFC1738,
      RFC3986: Format.RFC3986
    };
  }
});

// node_modules/qs/lib/utils.js
var require_utils2 = __commonJS({
  "node_modules/qs/lib/utils.js"(exports, module) {
    "use strict";
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var hexTable = function() {
      var array = [];
      for (var i3 = 0; i3 < 256; ++i3) {
        array.push("%" + ((i3 < 16 ? "0" : "") + i3.toString(16)).toUpperCase());
      }
      return array;
    }();
    var compactQueue = function compactQueue2(queue) {
      while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];
        if (isArray(obj)) {
          var compacted = [];
          for (var j2 = 0; j2 < obj.length; ++j2) {
            if (typeof obj[j2] !== "undefined") {
              compacted.push(obj[j2]);
            }
          }
          item.obj[item.prop] = compacted;
        }
      }
    };
    var arrayToObject = function arrayToObject2(source, options) {
      var obj = options && options.plainObjects ? { __proto__: null } : {};
      for (var i3 = 0; i3 < source.length; ++i3) {
        if (typeof source[i3] !== "undefined") {
          obj[i3] = source[i3];
        }
      }
      return obj;
    };
    var merge = function merge2(target, source, options) {
      if (!source) {
        return target;
      }
      if (typeof source !== "object" && typeof source !== "function") {
        if (isArray(target)) {
          target.push(source);
        } else if (target && typeof target === "object") {
          if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
            target[source] = true;
          }
        } else {
          return [target, source];
        }
        return target;
      }
      if (!target || typeof target !== "object") {
        return [target].concat(source);
      }
      var mergeTarget = target;
      if (isArray(target) && !isArray(source)) {
        mergeTarget = arrayToObject(target, options);
      }
      if (isArray(target) && isArray(source)) {
        source.forEach(function(item, i3) {
          if (has.call(target, i3)) {
            var targetItem = target[i3];
            if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
              target[i3] = merge2(targetItem, item, options);
            } else {
              target.push(item);
            }
          } else {
            target[i3] = item;
          }
        });
        return target;
      }
      return Object.keys(source).reduce(function(acc, key) {
        var value = source[key];
        if (has.call(acc, key)) {
          acc[key] = merge2(acc[key], value, options);
        } else {
          acc[key] = value;
        }
        return acc;
      }, mergeTarget);
    };
    var assign = function assignSingleSource(target, source) {
      return Object.keys(source).reduce(function(acc, key) {
        acc[key] = source[key];
        return acc;
      }, target);
    };
    var decode = function(str, defaultDecoder, charset) {
      var strWithoutPlus = str.replace(/\+/g, " ");
      if (charset === "iso-8859-1") {
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
      }
      try {
        return decodeURIComponent(strWithoutPlus);
      } catch (e) {
        return strWithoutPlus;
      }
    };
    var limit = 1024;
    var encode = function encode2(str, defaultEncoder, charset, kind, format) {
      if (str.length === 0) {
        return str;
      }
      var string = str;
      if (typeof str === "symbol") {
        string = Symbol.prototype.toString.call(str);
      } else if (typeof str !== "string") {
        string = String(str);
      }
      if (charset === "iso-8859-1") {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
          return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
        });
      }
      var out = "";
      for (var j2 = 0; j2 < string.length; j2 += limit) {
        var segment = string.length >= limit ? string.slice(j2, j2 + limit) : string;
        var arr = [];
        for (var i3 = 0; i3 < segment.length; ++i3) {
          var c2 = segment.charCodeAt(i3);
          if (c2 === 45 || c2 === 46 || c2 === 95 || c2 === 126 || c2 >= 48 && c2 <= 57 || c2 >= 65 && c2 <= 90 || c2 >= 97 && c2 <= 122 || format === formats.RFC1738 && (c2 === 40 || c2 === 41)) {
            arr[arr.length] = segment.charAt(i3);
            continue;
          }
          if (c2 < 128) {
            arr[arr.length] = hexTable[c2];
            continue;
          }
          if (c2 < 2048) {
            arr[arr.length] = hexTable[192 | c2 >> 6] + hexTable[128 | c2 & 63];
            continue;
          }
          if (c2 < 55296 || c2 >= 57344) {
            arr[arr.length] = hexTable[224 | c2 >> 12] + hexTable[128 | c2 >> 6 & 63] + hexTable[128 | c2 & 63];
            continue;
          }
          i3 += 1;
          c2 = 65536 + ((c2 & 1023) << 10 | segment.charCodeAt(i3) & 1023);
          arr[arr.length] = hexTable[240 | c2 >> 18] + hexTable[128 | c2 >> 12 & 63] + hexTable[128 | c2 >> 6 & 63] + hexTable[128 | c2 & 63];
        }
        out += arr.join("");
      }
      return out;
    };
    var compact = function compact2(value) {
      var queue = [{ obj: { o: value }, prop: "o" }];
      var refs = [];
      for (var i3 = 0; i3 < queue.length; ++i3) {
        var item = queue[i3];
        var obj = item.obj[item.prop];
        var keys = Object.keys(obj);
        for (var j2 = 0; j2 < keys.length; ++j2) {
          var key = keys[j2];
          var val = obj[key];
          if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
            queue.push({ obj, prop: key });
            refs.push(val);
          }
        }
      }
      compactQueue(queue);
      return value;
    };
    var isRegExp = function isRegExp2(obj) {
      return Object.prototype.toString.call(obj) === "[object RegExp]";
    };
    var isBuffer = function isBuffer2(obj) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
    };
    var combine = function combine2(a, b2) {
      return [].concat(a, b2);
    };
    var maybeMap = function maybeMap2(val, fn) {
      if (isArray(val)) {
        var mapped = [];
        for (var i3 = 0; i3 < val.length; i3 += 1) {
          mapped.push(fn(val[i3]));
        }
        return mapped;
      }
      return fn(val);
    };
    module.exports = {
      arrayToObject,
      assign,
      combine,
      compact,
      decode,
      encode,
      isBuffer,
      isRegExp,
      maybeMap,
      merge
    };
  }
});

// node_modules/qs/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/qs/lib/stringify.js"(exports, module) {
    "use strict";
    var getSideChannel = require_side_channel();
    var utils = require_utils2();
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var arrayPrefixGenerators = {
      brackets: function brackets(prefix) {
        return prefix + "[]";
      },
      comma: "comma",
      indices: function indices(prefix, key) {
        return prefix + "[" + key + "]";
      },
      repeat: function repeat(prefix) {
        return prefix;
      }
    };
    var isArray = Array.isArray;
    var push = Array.prototype.push;
    var pushToArray = function(arr, valueOrArray) {
      push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
    };
    var toISO = Date.prototype.toISOString;
    var defaultFormat = formats["default"];
    var defaults = {
      addQueryPrefix: false,
      allowDots: false,
      allowEmptyArrays: false,
      arrayFormat: "indices",
      charset: "utf-8",
      charsetSentinel: false,
      commaRoundTrip: false,
      delimiter: "&",
      encode: true,
      encodeDotInKeys: false,
      encoder: utils.encode,
      encodeValuesOnly: false,
      filter: void 0,
      format: defaultFormat,
      formatter: formats.formatters[defaultFormat],
      // deprecated
      indices: false,
      serializeDate: function serializeDate(date) {
        return toISO.call(date);
      },
      skipNulls: false,
      strictNullHandling: false
    };
    var isNonNullishPrimitive = function isNonNullishPrimitive2(v2) {
      return typeof v2 === "string" || typeof v2 === "number" || typeof v2 === "boolean" || typeof v2 === "symbol" || typeof v2 === "bigint";
    };
    var sentinel = {};
    var stringify = function stringify2(object, prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
      var obj = object;
      var tmpSc = sideChannel;
      var step = 0;
      var findFlag = false;
      while ((tmpSc = tmpSc.get(sentinel)) !== void 0 && !findFlag) {
        var pos = tmpSc.get(object);
        step += 1;
        if (typeof pos !== "undefined") {
          if (pos === step) {
            throw new RangeError("Cyclic object value");
          } else {
            findFlag = true;
          }
        }
        if (typeof tmpSc.get(sentinel) === "undefined") {
          step = 0;
        }
      }
      if (typeof filter === "function") {
        obj = filter(prefix, obj);
      } else if (obj instanceof Date) {
        obj = serializeDate(obj);
      } else if (generateArrayPrefix === "comma" && isArray(obj)) {
        obj = utils.maybeMap(obj, function(value2) {
          if (value2 instanceof Date) {
            return serializeDate(value2);
          }
          return value2;
        });
      }
      if (obj === null) {
        if (strictNullHandling) {
          return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, "key", format) : prefix;
        }
        obj = "";
      }
      if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
          var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format);
          return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset, "value", format))];
        }
        return [formatter(prefix) + "=" + formatter(String(obj))];
      }
      var values = [];
      if (typeof obj === "undefined") {
        return values;
      }
      var objKeys;
      if (generateArrayPrefix === "comma" && isArray(obj)) {
        if (encodeValuesOnly && encoder) {
          obj = utils.maybeMap(obj, encoder);
        }
        objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
      } else if (isArray(filter)) {
        objKeys = filter;
      } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
      }
      var encodedPrefix = encodeDotInKeys ? String(prefix).replace(/\./g, "%2E") : String(prefix);
      var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? encodedPrefix + "[]" : encodedPrefix;
      if (allowEmptyArrays && isArray(obj) && obj.length === 0) {
        return adjustedPrefix + "[]";
      }
      for (var j2 = 0; j2 < objKeys.length; ++j2) {
        var key = objKeys[j2];
        var value = typeof key === "object" && key && typeof key.value !== "undefined" ? key.value : obj[key];
        if (skipNulls && value === null) {
          continue;
        }
        var encodedKey = allowDots && encodeDotInKeys ? String(key).replace(/\./g, "%2E") : String(key);
        var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, encodedKey) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + encodedKey : "[" + encodedKey + "]");
        sideChannel.set(object, step);
        var valueSideChannel = getSideChannel();
        valueSideChannel.set(sentinel, sideChannel);
        pushToArray(values, stringify2(
          value,
          keyPrefix,
          generateArrayPrefix,
          commaRoundTrip,
          allowEmptyArrays,
          strictNullHandling,
          skipNulls,
          encodeDotInKeys,
          generateArrayPrefix === "comma" && encodeValuesOnly && isArray(obj) ? null : encoder,
          filter,
          sort,
          allowDots,
          serializeDate,
          format,
          formatter,
          encodeValuesOnly,
          charset,
          valueSideChannel
        ));
      }
      return values;
    };
    var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (typeof opts.allowEmptyArrays !== "undefined" && typeof opts.allowEmptyArrays !== "boolean") {
        throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
      }
      if (typeof opts.encodeDotInKeys !== "undefined" && typeof opts.encodeDotInKeys !== "boolean") {
        throw new TypeError("`encodeDotInKeys` option can only be `true` or `false`, when provided");
      }
      if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
        throw new TypeError("Encoder has to be a function.");
      }
      var charset = opts.charset || defaults.charset;
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var format = formats["default"];
      if (typeof opts.format !== "undefined") {
        if (!has.call(formats.formatters, opts.format)) {
          throw new TypeError("Unknown format option provided.");
        }
        format = opts.format;
      }
      var formatter = formats.formatters[format];
      var filter = defaults.filter;
      if (typeof opts.filter === "function" || isArray(opts.filter)) {
        filter = opts.filter;
      }
      var arrayFormat;
      if (opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
      } else if ("indices" in opts) {
        arrayFormat = opts.indices ? "indices" : "repeat";
      } else {
        arrayFormat = defaults.arrayFormat;
      }
      if ("commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") {
        throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
      }
      var allowDots = typeof opts.allowDots === "undefined" ? opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;
      return {
        addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots,
        allowEmptyArrays: typeof opts.allowEmptyArrays === "boolean" ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
        arrayFormat,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        commaRoundTrip: !!opts.commaRoundTrip,
        delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
        encodeDotInKeys: typeof opts.encodeDotInKeys === "boolean" ? opts.encodeDotInKeys : defaults.encodeDotInKeys,
        encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter,
        format,
        formatter,
        serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === "function" ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module.exports = function(object, opts) {
      var obj = object;
      var options = normalizeStringifyOptions(opts);
      var objKeys;
      var filter;
      if (typeof options.filter === "function") {
        filter = options.filter;
        obj = filter("", obj);
      } else if (isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
      }
      var keys = [];
      if (typeof obj !== "object" || obj === null) {
        return "";
      }
      var generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat];
      var commaRoundTrip = generateArrayPrefix === "comma" && options.commaRoundTrip;
      if (!objKeys) {
        objKeys = Object.keys(obj);
      }
      if (options.sort) {
        objKeys.sort(options.sort);
      }
      var sideChannel = getSideChannel();
      for (var i3 = 0; i3 < objKeys.length; ++i3) {
        var key = objKeys[i3];
        var value = obj[key];
        if (options.skipNulls && value === null) {
          continue;
        }
        pushToArray(keys, stringify(
          value,
          key,
          generateArrayPrefix,
          commaRoundTrip,
          options.allowEmptyArrays,
          options.strictNullHandling,
          options.skipNulls,
          options.encodeDotInKeys,
          options.encode ? options.encoder : null,
          options.filter,
          options.sort,
          options.allowDots,
          options.serializeDate,
          options.format,
          options.formatter,
          options.encodeValuesOnly,
          options.charset,
          sideChannel
        ));
      }
      var joined = keys.join(options.delimiter);
      var prefix = options.addQueryPrefix === true ? "?" : "";
      if (options.charsetSentinel) {
        if (options.charset === "iso-8859-1") {
          prefix += "utf8=%26%2310003%3B&";
        } else {
          prefix += "utf8=%E2%9C%93&";
        }
      }
      return joined.length > 0 ? prefix + joined : "";
    };
  }
});

// node_modules/qs/lib/parse.js
var require_parse = __commonJS({
  "node_modules/qs/lib/parse.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var defaults = {
      allowDots: false,
      allowEmptyArrays: false,
      allowPrototypes: false,
      allowSparse: false,
      arrayLimit: 20,
      charset: "utf-8",
      charsetSentinel: false,
      comma: false,
      decodeDotInKeys: false,
      decoder: utils.decode,
      delimiter: "&",
      depth: 5,
      duplicates: "combine",
      ignoreQueryPrefix: false,
      interpretNumericEntities: false,
      parameterLimit: 1e3,
      parseArrays: true,
      plainObjects: false,
      strictDepth: false,
      strictNullHandling: false,
      throwOnLimitExceeded: false
    };
    var interpretNumericEntities = function(str) {
      return str.replace(/&#(\d+);/g, function($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
      });
    };
    var parseArrayValue = function(val, options, currentArrayLength) {
      if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
        return val.split(",");
      }
      if (options.throwOnLimitExceeded && currentArrayLength >= options.arrayLimit) {
        throw new RangeError("Array limit exceeded. Only " + options.arrayLimit + " element" + (options.arrayLimit === 1 ? "" : "s") + " allowed in an array.");
      }
      return val;
    };
    var isoSentinel = "utf8=%26%2310003%3B";
    var charsetSentinel = "utf8=%E2%9C%93";
    var parseValues = function parseQueryStringValues(str, options) {
      var obj = { __proto__: null };
      var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
      cleanStr = cleanStr.replace(/%5B/gi, "[").replace(/%5D/gi, "]");
      var limit = options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
      var parts = cleanStr.split(
        options.delimiter,
        options.throwOnLimitExceeded ? limit + 1 : limit
      );
      if (options.throwOnLimitExceeded && parts.length > limit) {
        throw new RangeError("Parameter limit exceeded. Only " + limit + " parameter" + (limit === 1 ? "" : "s") + " allowed.");
      }
      var skipIndex = -1;
      var i3;
      var charset = options.charset;
      if (options.charsetSentinel) {
        for (i3 = 0; i3 < parts.length; ++i3) {
          if (parts[i3].indexOf("utf8=") === 0) {
            if (parts[i3] === charsetSentinel) {
              charset = "utf-8";
            } else if (parts[i3] === isoSentinel) {
              charset = "iso-8859-1";
            }
            skipIndex = i3;
            i3 = parts.length;
          }
        }
      }
      for (i3 = 0; i3 < parts.length; ++i3) {
        if (i3 === skipIndex) {
          continue;
        }
        var part = parts[i3];
        var bracketEqualsPos = part.indexOf("]=");
        var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
        var key;
        var val;
        if (pos === -1) {
          key = options.decoder(part, defaults.decoder, charset, "key");
          val = options.strictNullHandling ? null : "";
        } else {
          key = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
          val = utils.maybeMap(
            parseArrayValue(
              part.slice(pos + 1),
              options,
              isArray(obj[key]) ? obj[key].length : 0
            ),
            function(encodedVal) {
              return options.decoder(encodedVal, defaults.decoder, charset, "value");
            }
          );
        }
        if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
          val = interpretNumericEntities(String(val));
        }
        if (part.indexOf("[]=") > -1) {
          val = isArray(val) ? [val] : val;
        }
        var existing = has.call(obj, key);
        if (existing && options.duplicates === "combine") {
          obj[key] = utils.combine(obj[key], val);
        } else if (!existing || options.duplicates === "last") {
          obj[key] = val;
        }
      }
      return obj;
    };
    var parseObject = function(chain, val, options, valuesParsed) {
      var currentArrayLength = 0;
      if (chain.length > 0 && chain[chain.length - 1] === "[]") {
        var parentKey = chain.slice(0, -1).join("");
        currentArrayLength = Array.isArray(val) && val[parentKey] ? val[parentKey].length : 0;
      }
      var leaf = valuesParsed ? val : parseArrayValue(val, options, currentArrayLength);
      for (var i3 = chain.length - 1; i3 >= 0; --i3) {
        var obj;
        var root = chain[i3];
        if (root === "[]" && options.parseArrays) {
          obj = options.allowEmptyArrays && (leaf === "" || options.strictNullHandling && leaf === null) ? [] : utils.combine([], leaf);
        } else {
          obj = options.plainObjects ? { __proto__: null } : {};
          var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
          var decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, ".") : cleanRoot;
          var index = parseInt(decodedRoot, 10);
          if (!options.parseArrays && decodedRoot === "") {
            obj = { 0: leaf };
          } else if (!isNaN(index) && root !== decodedRoot && String(index) === decodedRoot && index >= 0 && (options.parseArrays && index <= options.arrayLimit)) {
            obj = [];
            obj[index] = leaf;
          } else if (decodedRoot !== "__proto__") {
            obj[decodedRoot] = leaf;
          }
        }
        leaf = obj;
      }
      return leaf;
    };
    var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
      if (!givenKey) {
        return;
      }
      var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
      var brackets = /(\[[^[\]]*])/;
      var child = /(\[[^[\]]*])/g;
      var segment = options.depth > 0 && brackets.exec(key);
      var parent = segment ? key.slice(0, segment.index) : key;
      var keys = [];
      if (parent) {
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(parent);
      }
      var i3 = 0;
      while (options.depth > 0 && (segment = child.exec(key)) !== null && i3 < options.depth) {
        i3 += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(segment[1]);
      }
      if (segment) {
        if (options.strictDepth === true) {
          throw new RangeError("Input depth exceeded depth option of " + options.depth + " and strictDepth is true");
        }
        keys.push("[" + key.slice(segment.index) + "]");
      }
      return parseObject(keys, val, options, valuesParsed);
    };
    var normalizeParseOptions = function normalizeParseOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (typeof opts.allowEmptyArrays !== "undefined" && typeof opts.allowEmptyArrays !== "boolean") {
        throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
      }
      if (typeof opts.decodeDotInKeys !== "undefined" && typeof opts.decodeDotInKeys !== "boolean") {
        throw new TypeError("`decodeDotInKeys` option can only be `true` or `false`, when provided");
      }
      if (opts.decoder !== null && typeof opts.decoder !== "undefined" && typeof opts.decoder !== "function") {
        throw new TypeError("Decoder has to be a function.");
      }
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      if (typeof opts.throwOnLimitExceeded !== "undefined" && typeof opts.throwOnLimitExceeded !== "boolean") {
        throw new TypeError("`throwOnLimitExceeded` option must be a boolean");
      }
      var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
      var duplicates = typeof opts.duplicates === "undefined" ? defaults.duplicates : opts.duplicates;
      if (duplicates !== "combine" && duplicates !== "first" && duplicates !== "last") {
        throw new TypeError("The duplicates option must be either combine, first, or last");
      }
      var allowDots = typeof opts.allowDots === "undefined" ? opts.decodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;
      return {
        allowDots,
        allowEmptyArrays: typeof opts.allowEmptyArrays === "boolean" ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
        allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
        allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults.allowSparse,
        arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
        decodeDotInKeys: typeof opts.decodeDotInKeys === "boolean" ? opts.decodeDotInKeys : defaults.decodeDotInKeys,
        decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
        depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
        duplicates,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
        strictDepth: typeof opts.strictDepth === "boolean" ? !!opts.strictDepth : defaults.strictDepth,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling,
        throwOnLimitExceeded: typeof opts.throwOnLimitExceeded === "boolean" ? opts.throwOnLimitExceeded : false
      };
    };
    module.exports = function(str, opts) {
      var options = normalizeParseOptions(opts);
      if (str === "" || str === null || typeof str === "undefined") {
        return options.plainObjects ? { __proto__: null } : {};
      }
      var tempObj = typeof str === "string" ? parseValues(str, options) : str;
      var obj = options.plainObjects ? { __proto__: null } : {};
      var keys = Object.keys(tempObj);
      for (var i3 = 0; i3 < keys.length; ++i3) {
        var key = keys[i3];
        var newObj = parseKeys(key, tempObj[key], options, typeof str === "string");
        obj = utils.merge(obj, newObj, options);
      }
      if (options.allowSparse === true) {
        return obj;
      }
      return utils.compact(obj);
    };
  }
});

// node_modules/qs/lib/index.js
var require_lib = __commonJS({
  "node_modules/qs/lib/index.js"(exports, module) {
    "use strict";
    var stringify = require_stringify();
    var parse2 = require_parse();
    var formats = require_formats();
    module.exports = {
      formats,
      parse: parse2,
      stringify
    };
  }
});

// node_modules/@medusajs/medusa-js/dist/index.mjs
var import_axios2 = __toESM(require_axios2(), 1);

// node_modules/retry-axios/dist/index.module.js
function r(r2) {
  return (r2 = r2 || axios_default).interceptors.response.use(n, s);
}
function n(e) {
  return e;
}
function o(e) {
  var r2 = [];
  if (e)
    return Array.isArray(e) ? e : ("object" == typeof e && Object.keys(e).forEach(function(t) {
      "number" == typeof t && (r2[t] = e[t]);
    }), r2);
}
function s(r2) {
  if (axios_default.isCancel(r2))
    return Promise.reject(r2);
  var t = i(r2) || {};
  if (t.currentRetryAttempt = t.currentRetryAttempt || 0, t.retry = "number" == typeof t.retry ? t.retry : 3, t.retryDelay = "number" == typeof t.retryDelay ? t.retryDelay : 100, t.instance = t.instance || axios_default, t.backoffType = t.backoffType || "exponential", t.httpMethodsToRetry = o(t.httpMethodsToRetry) || ["GET", "HEAD", "PUT", "OPTIONS", "DELETE"], t.noResponseRetries = "number" == typeof t.noResponseRetries ? t.noResponseRetries : 2, t.checkRetryAfter = "boolean" != typeof t.checkRetryAfter || t.checkRetryAfter, t.maxRetryAfter = "number" == typeof t.maxRetryAfter ? t.maxRetryAfter : 3e5, t.statusCodesToRetry = o(t.statusCodesToRetry) || [[100, 199], [429, 429], [500, 599]], r2.config = r2.config || {}, r2.config.raxConfig = Object.assign({}, t), !(t.shouldRetry || f)(r2))
    return Promise.reject(r2);
  var n2 = new Promise(function(e, n3) {
    var o2 = 0;
    if (t.checkRetryAfter && r2.response && r2.response.headers["retry-after"]) {
      var s3 = function(e2) {
        var r3 = Number(e2);
        if (!Number.isNaN(r3))
          return 1e3 * r3;
        var t2 = Date.parse(e2);
        return Number.isNaN(t2) ? void 0 : t2 - Date.now();
      }(r2.response.headers["retry-after"]);
      if (!(s3 && s3 > 0 && s3 <= t.maxRetryAfter))
        return n3(r2);
      o2 = s3;
    }
    r2.config.raxConfig.currentRetryAttempt += 1;
    var f4 = r2.config.raxConfig.currentRetryAttempt;
    0 === o2 && (o2 = "linear" === t.backoffType ? 1e3 * f4 : "static" === t.backoffType ? t.retryDelay : (Math.pow(2, f4) - 1) / 2 * 1e3, "number" == typeof t.maxRetryDelay && (o2 = Math.min(o2, t.maxRetryDelay))), setTimeout(e, o2);
  }), s2 = t.onRetryAttempt ? Promise.resolve(t.onRetryAttempt(r2)) : Promise.resolve();
  return Promise.resolve().then(function() {
    return n2;
  }).then(function() {
    return s2;
  }).then(function() {
    return t.instance.request(r2.config);
  });
}
function f(e) {
  var r2 = e.config.raxConfig;
  if (!r2 || 0 === r2.retry)
    return false;
  if (!e.response && (r2.currentRetryAttempt || 0) >= r2.noResponseRetries)
    return false;
  if (!e.config.method || r2.httpMethodsToRetry.indexOf(e.config.method.toUpperCase()) < 0)
    return false;
  if (e.response && e.response.status) {
    for (var t = false, n2 = 0, o2 = r2.statusCodesToRetry; n2 < o2.length; n2 += 1) {
      var s2 = o2[n2], f4 = e.response.status;
      if (f4 >= s2[0] && f4 <= s2[1]) {
        t = true;
        break;
      }
    }
    if (!t)
      return false;
  }
  return r2.currentRetryAttempt = r2.currentRetryAttempt || 0, !(r2.currentRetryAttempt >= r2.retry);
}
function i(e) {
  if (e && e.config)
    return e.config.raxConfig;
}

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/regex.js
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

// node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i3 = 0; i3 < 256; ++i3) {
  byteToHex.push((i3 + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}

// node_modules/uuid/dist/esm-browser/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v2;
  const arr = new Uint8Array(16);
  arr[0] = (v2 = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v2 >>> 16 & 255;
  arr[2] = v2 >>> 8 & 255;
  arr[3] = v2 & 255;
  arr[4] = (v2 = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v2 & 255;
  arr[6] = (v2 = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v2 & 255;
  arr[8] = (v2 = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v2 & 255;
  arr[10] = (v2 = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v2 / 4294967296 & 255;
  arr[12] = v2 >>> 24 & 255;
  arr[13] = v2 >>> 16 & 255;
  arr[14] = v2 >>> 8 & 255;
  arr[15] = v2 & 255;
  return arr;
}
var parse_default = parse;

// node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i3 = 0; i3 < str.length; ++i3) {
    bytes.push(str.charCodeAt(i3));
  }
  return bytes;
}
var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
var URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i3 = 0; i3 < 16; ++i3) {
        buf[offset + i3] = bytes[i3];
      }
      return buf;
    }
    return unsafeStringify(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

// node_modules/uuid/dist/esm-browser/md5.js
function md5(bytes) {
  if (typeof bytes === "string") {
    const msg = unescape(encodeURIComponent(bytes));
    bytes = new Uint8Array(msg.length);
    for (let i3 = 0; i3 < msg.length; ++i3) {
      bytes[i3] = msg.charCodeAt(i3);
    }
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
function md5ToHexEncodedArray(input) {
  const output = [];
  const length32 = input.length * 32;
  const hexTab = "0123456789abcdef";
  for (let i3 = 0; i3 < length32; i3 += 8) {
    const x2 = input[i3 >> 5] >>> i3 % 32 & 255;
    const hex = parseInt(hexTab.charAt(x2 >>> 4 & 15) + hexTab.charAt(x2 & 15), 16);
    output.push(hex);
  }
  return output;
}
function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(x2, len) {
  x2[len >> 5] |= 128 << len % 32;
  x2[getOutputLength(len) - 1] = len;
  let a = 1732584193;
  let b2 = -271733879;
  let c2 = -1732584194;
  let d = 271733878;
  for (let i3 = 0; i3 < x2.length; i3 += 16) {
    const olda = a;
    const oldb = b2;
    const oldc = c2;
    const oldd = d;
    a = md5ff(a, b2, c2, d, x2[i3], 7, -680876936);
    d = md5ff(d, a, b2, c2, x2[i3 + 1], 12, -389564586);
    c2 = md5ff(c2, d, a, b2, x2[i3 + 2], 17, 606105819);
    b2 = md5ff(b2, c2, d, a, x2[i3 + 3], 22, -1044525330);
    a = md5ff(a, b2, c2, d, x2[i3 + 4], 7, -176418897);
    d = md5ff(d, a, b2, c2, x2[i3 + 5], 12, 1200080426);
    c2 = md5ff(c2, d, a, b2, x2[i3 + 6], 17, -1473231341);
    b2 = md5ff(b2, c2, d, a, x2[i3 + 7], 22, -45705983);
    a = md5ff(a, b2, c2, d, x2[i3 + 8], 7, 1770035416);
    d = md5ff(d, a, b2, c2, x2[i3 + 9], 12, -1958414417);
    c2 = md5ff(c2, d, a, b2, x2[i3 + 10], 17, -42063);
    b2 = md5ff(b2, c2, d, a, x2[i3 + 11], 22, -1990404162);
    a = md5ff(a, b2, c2, d, x2[i3 + 12], 7, 1804603682);
    d = md5ff(d, a, b2, c2, x2[i3 + 13], 12, -40341101);
    c2 = md5ff(c2, d, a, b2, x2[i3 + 14], 17, -1502002290);
    b2 = md5ff(b2, c2, d, a, x2[i3 + 15], 22, 1236535329);
    a = md5gg(a, b2, c2, d, x2[i3 + 1], 5, -165796510);
    d = md5gg(d, a, b2, c2, x2[i3 + 6], 9, -1069501632);
    c2 = md5gg(c2, d, a, b2, x2[i3 + 11], 14, 643717713);
    b2 = md5gg(b2, c2, d, a, x2[i3], 20, -373897302);
    a = md5gg(a, b2, c2, d, x2[i3 + 5], 5, -701558691);
    d = md5gg(d, a, b2, c2, x2[i3 + 10], 9, 38016083);
    c2 = md5gg(c2, d, a, b2, x2[i3 + 15], 14, -660478335);
    b2 = md5gg(b2, c2, d, a, x2[i3 + 4], 20, -405537848);
    a = md5gg(a, b2, c2, d, x2[i3 + 9], 5, 568446438);
    d = md5gg(d, a, b2, c2, x2[i3 + 14], 9, -1019803690);
    c2 = md5gg(c2, d, a, b2, x2[i3 + 3], 14, -187363961);
    b2 = md5gg(b2, c2, d, a, x2[i3 + 8], 20, 1163531501);
    a = md5gg(a, b2, c2, d, x2[i3 + 13], 5, -1444681467);
    d = md5gg(d, a, b2, c2, x2[i3 + 2], 9, -51403784);
    c2 = md5gg(c2, d, a, b2, x2[i3 + 7], 14, 1735328473);
    b2 = md5gg(b2, c2, d, a, x2[i3 + 12], 20, -1926607734);
    a = md5hh(a, b2, c2, d, x2[i3 + 5], 4, -378558);
    d = md5hh(d, a, b2, c2, x2[i3 + 8], 11, -2022574463);
    c2 = md5hh(c2, d, a, b2, x2[i3 + 11], 16, 1839030562);
    b2 = md5hh(b2, c2, d, a, x2[i3 + 14], 23, -35309556);
    a = md5hh(a, b2, c2, d, x2[i3 + 1], 4, -1530992060);
    d = md5hh(d, a, b2, c2, x2[i3 + 4], 11, 1272893353);
    c2 = md5hh(c2, d, a, b2, x2[i3 + 7], 16, -155497632);
    b2 = md5hh(b2, c2, d, a, x2[i3 + 10], 23, -1094730640);
    a = md5hh(a, b2, c2, d, x2[i3 + 13], 4, 681279174);
    d = md5hh(d, a, b2, c2, x2[i3], 11, -358537222);
    c2 = md5hh(c2, d, a, b2, x2[i3 + 3], 16, -722521979);
    b2 = md5hh(b2, c2, d, a, x2[i3 + 6], 23, 76029189);
    a = md5hh(a, b2, c2, d, x2[i3 + 9], 4, -640364487);
    d = md5hh(d, a, b2, c2, x2[i3 + 12], 11, -421815835);
    c2 = md5hh(c2, d, a, b2, x2[i3 + 15], 16, 530742520);
    b2 = md5hh(b2, c2, d, a, x2[i3 + 2], 23, -995338651);
    a = md5ii(a, b2, c2, d, x2[i3], 6, -198630844);
    d = md5ii(d, a, b2, c2, x2[i3 + 7], 10, 1126891415);
    c2 = md5ii(c2, d, a, b2, x2[i3 + 14], 15, -1416354905);
    b2 = md5ii(b2, c2, d, a, x2[i3 + 5], 21, -57434055);
    a = md5ii(a, b2, c2, d, x2[i3 + 12], 6, 1700485571);
    d = md5ii(d, a, b2, c2, x2[i3 + 3], 10, -1894986606);
    c2 = md5ii(c2, d, a, b2, x2[i3 + 10], 15, -1051523);
    b2 = md5ii(b2, c2, d, a, x2[i3 + 1], 21, -2054922799);
    a = md5ii(a, b2, c2, d, x2[i3 + 8], 6, 1873313359);
    d = md5ii(d, a, b2, c2, x2[i3 + 15], 10, -30611744);
    c2 = md5ii(c2, d, a, b2, x2[i3 + 6], 15, -1560198380);
    b2 = md5ii(b2, c2, d, a, x2[i3 + 13], 21, 1309151649);
    a = md5ii(a, b2, c2, d, x2[i3 + 4], 6, -145523070);
    d = md5ii(d, a, b2, c2, x2[i3 + 11], 10, -1120210379);
    c2 = md5ii(c2, d, a, b2, x2[i3 + 2], 15, 718787259);
    b2 = md5ii(b2, c2, d, a, x2[i3 + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b2 = safeAdd(b2, oldb);
    c2 = safeAdd(c2, oldc);
    d = safeAdd(d, oldd);
  }
  return [a, b2, c2, d];
}
function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }
  const length8 = input.length * 8;
  const output = new Uint32Array(getOutputLength(length8));
  for (let i3 = 0; i3 < length8; i3 += 8) {
    output[i3 >> 5] |= (input[i3 / 8] & 255) << i3 % 32;
  }
  return output;
}
function safeAdd(x2, y2) {
  const lsw = (x2 & 65535) + (y2 & 65535);
  const msw = (x2 >> 16) + (y2 >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn(q2, a, b2, x2, s2, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q2), safeAdd(x2, t)), s2), b2);
}
function md5ff(a, b2, c2, d, x2, s2, t) {
  return md5cmn(b2 & c2 | ~b2 & d, a, b2, x2, s2, t);
}
function md5gg(a, b2, c2, d, x2, s2, t) {
  return md5cmn(b2 & d | c2 & ~d, a, b2, x2, s2, t);
}
function md5hh(a, b2, c2, d, x2, s2, t) {
  return md5cmn(b2 ^ c2 ^ d, a, b2, x2, s2, t);
}
function md5ii(a, b2, c2, d, x2, s2, t) {
  return md5cmn(c2 ^ (b2 | ~d), a, b2, x2, s2, t);
}
var md5_default = md5;

// node_modules/uuid/dist/esm-browser/v3.js
var v3 = v35("v3", 48, md5_default);

// node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i3 = 0; i3 < 16; ++i3) {
      buf[offset + i3] = rnds[i3];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// node_modules/uuid/dist/esm-browser/sha1.js
function f2(s2, x2, y2, z2) {
  switch (s2) {
    case 0:
      return x2 & y2 ^ ~x2 & z2;
    case 1:
      return x2 ^ y2 ^ z2;
    case 2:
      return x2 & y2 ^ x2 & z2 ^ y2 & z2;
    case 3:
      return x2 ^ y2 ^ z2;
  }
}
function ROTL(x2, n2) {
  return x2 << n2 | x2 >>> 32 - n2;
}
function sha1(bytes) {
  const K2 = [1518500249, 1859775393, 2400959708, 3395469782];
  const H2 = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof bytes === "string") {
    const msg = unescape(encodeURIComponent(bytes));
    bytes = [];
    for (let i3 = 0; i3 < msg.length; ++i3) {
      bytes.push(msg.charCodeAt(i3));
    }
  } else if (!Array.isArray(bytes)) {
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(128);
  const l2 = bytes.length / 4 + 2;
  const N2 = Math.ceil(l2 / 16);
  const M2 = new Array(N2);
  for (let i3 = 0; i3 < N2; ++i3) {
    const arr = new Uint32Array(16);
    for (let j2 = 0; j2 < 16; ++j2) {
      arr[j2] = bytes[i3 * 64 + j2 * 4] << 24 | bytes[i3 * 64 + j2 * 4 + 1] << 16 | bytes[i3 * 64 + j2 * 4 + 2] << 8 | bytes[i3 * 64 + j2 * 4 + 3];
    }
    M2[i3] = arr;
  }
  M2[N2 - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M2[N2 - 1][14] = Math.floor(M2[N2 - 1][14]);
  M2[N2 - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (let i3 = 0; i3 < N2; ++i3) {
    const W2 = new Uint32Array(80);
    for (let t = 0; t < 16; ++t) {
      W2[t] = M2[i3][t];
    }
    for (let t = 16; t < 80; ++t) {
      W2[t] = ROTL(W2[t - 3] ^ W2[t - 8] ^ W2[t - 14] ^ W2[t - 16], 1);
    }
    let a = H2[0];
    let b2 = H2[1];
    let c2 = H2[2];
    let d = H2[3];
    let e = H2[4];
    for (let t = 0; t < 80; ++t) {
      const s2 = Math.floor(t / 20);
      const T2 = ROTL(a, 5) + f2(s2, b2, c2, d) + e + K2[s2] + W2[t] >>> 0;
      e = d;
      d = c2;
      c2 = ROTL(b2, 30) >>> 0;
      b2 = a;
      a = T2;
    }
    H2[0] = H2[0] + a >>> 0;
    H2[1] = H2[1] + b2 >>> 0;
    H2[2] = H2[2] + c2 >>> 0;
    H2[3] = H2[3] + d >>> 0;
    H2[4] = H2[4] + e >>> 0;
  }
  return [H2[0] >> 24 & 255, H2[0] >> 16 & 255, H2[0] >> 8 & 255, H2[0] & 255, H2[1] >> 24 & 255, H2[1] >> 16 & 255, H2[1] >> 8 & 255, H2[1] & 255, H2[2] >> 24 & 255, H2[2] >> 16 & 255, H2[2] >> 8 & 255, H2[2] & 255, H2[3] >> 24 & 255, H2[3] >> 16 & 255, H2[3] >> 8 & 255, H2[3] & 255, H2[4] >> 24 & 255, H2[4] >> 16 & 255, H2[4] >> 8 & 255, H2[4] & 255];
}
var sha1_default = sha1;

// node_modules/uuid/dist/esm-browser/v5.js
var v5 = v35("v5", 80, sha1_default);

// node_modules/@medusajs/medusa-js/dist/index.mjs
var import_qs = __toESM(require_lib(), 1);
var import_qs2 = __toESM(require_lib(), 1);
var import_qs3 = __toESM(require_lib(), 1);
var import_qs4 = __toESM(require_lib(), 1);
var import_qs5 = __toESM(require_lib(), 1);
var import_qs6 = __toESM(require_lib(), 1);
var import_qs7 = __toESM(require_lib(), 1);
var import_qs8 = __toESM(require_lib(), 1);
var import_qs9 = __toESM(require_lib(), 1);
var import_qs10 = __toESM(require_lib(), 1);
var import_qs11 = __toESM(require_lib(), 1);
var import_qs12 = __toESM(require_lib(), 1);
var import_qs13 = __toESM(require_lib(), 1);
var import_qs14 = __toESM(require_lib(), 1);
var import_qs15 = __toESM(require_lib(), 1);
var import_qs16 = __toESM(require_lib(), 1);
var import_qs17 = __toESM(require_lib(), 1);
var import_qs18 = __toESM(require_lib(), 1);
var import_qs19 = __toESM(require_lib(), 1);
var import_qs20 = __toESM(require_lib(), 1);
var import_qs21 = __toESM(require_lib(), 1);
var import_qs22 = __toESM(require_lib(), 1);
var import_qs23 = __toESM(require_lib(), 1);
var import_qs24 = __toESM(require_lib(), 1);
var import_qs25 = __toESM(require_lib(), 1);
var import_qs26 = __toESM(require_lib(), 1);
var import_qs27 = __toESM(require_lib(), 1);
var import_qs28 = __toESM(require_lib(), 1);
var import_qs29 = __toESM(require_lib(), 1);
var import_qs30 = __toESM(require_lib(), 1);
var import_qs31 = __toESM(require_lib(), 1);
var import_qs32 = __toESM(require_lib(), 1);
var import_qs33 = __toESM(require_lib(), 1);
var import_qs34 = __toESM(require_lib(), 1);
var import_qs35 = __toESM(require_lib(), 1);
var import_qs36 = __toESM(require_lib(), 1);
var import_qs37 = __toESM(require_lib(), 1);
var import_qs38 = __toESM(require_lib(), 1);
var import_qs39 = __toESM(require_lib(), 1);
var import_qs40 = __toESM(require_lib(), 1);
var import_qs41 = __toESM(require_lib(), 1);
var import_qs42 = __toESM(require_lib(), 1);
var m = class extends Error {
  constructor() {
    super();
  }
  static factory(e) {
    switch (e) {
      case 0:
        return new A();
      case 2:
        return new q();
      case 1:
        return new y();
      case 3:
        return new S();
      case 4:
        return new T();
    }
  }
};
var A = class extends m {
};
var y = class extends m {
};
var q = class extends m {
};
var S = class extends m {
};
var T = class extends m {
};
var C = class {
  constructor() {
    this.publishableApiKey = null;
  }
  registerPublishableApiKey(e) {
    this.publishableApiKey = e;
  }
  getPublishableApiKey() {
    return this.publishableApiKey;
  }
};
var P = new C();
var O = class {
  constructor() {
    this.adminJwt = null;
    this.storeJwt = null;
  }
  registerJwt(e, s2) {
    if (!(typeof window > "u"))
      if (s2 === "admin")
        this.adminJwt = e;
      else if (s2 === "store")
        this.storeJwt = e;
      else
        throw new Error(`'domain' must be wither 'admin' or 'store' received ${s2}`);
  }
  getJwt(e) {
    if (!(typeof window > "u")) {
      if (e === "admin")
        return this.adminJwt;
      if (e === "store")
        return this.storeJwt;
      throw new Error(`'domain' must be wither 'admin' or 'store' received ${e}`);
    }
  }
};
var u = new O();
var Zs = { "/admin/auth": "POST", "/admin/users/password-token": "POST", "/admin/users/reset-password": "POST", "/admin/invites/accept": "POST" };
var es = { maxRetries: 0, baseUrl: "http://localhost:9000" };
var $ = class {
  constructor(e) {
    this.axiosClient = this.createClient({ ...es, ...e }), this.config = { ...es, ...e };
  }
  shouldRetryCondition(e, s2, t) {
    return s2 >= t ? false : !e.response || e.response.status === 409 || e.response.status > 500 && e.response.status <= 599;
  }
  normalizeHeaders(e) {
    return e && typeof e == "object" ? Object.keys(e).reduce((s2, t) => (s2[this.normalizeHeader(t)] = e[t], s2), {}) : e;
  }
  normalizeHeader(e) {
    return e.split("-").map((s2) => s2.charAt(0).toUpperCase() + s2.substr(1).toLowerCase()).join("-");
  }
  requiresAuthentication(e, s2) {
    return e.startsWith("/admin") && Zs[e] !== s2;
  }
  setHeaders(e, s2, t, r2 = {}) {
    let n2 = { Accept: "application/json", "Content-Type": "application/json" };
    this.config.apiKey && this.requiresAuthentication(t, s2) && (n2 = { ...n2, "x-medusa-access-token": this.config.apiKey });
    let a = t.includes("admin") ? "admin" : "store";
    u.getJwt(a) && (n2 = { ...n2, Authorization: `Bearer ${u.getJwt(a)}` });
    let d = this.config.publishableApiKey || P.getPublishableApiKey();
    return d && (n2["x-publishable-api-key"] = d), this.config.maxRetries > 0 && s2 === "POST" && (n2["Idempotency-Key"] = v4_default()), Object.assign({}, n2, this.normalizeHeaders(e), r2);
  }
  createClient(e) {
    let s2 = import_axios2.default.create({ baseURL: e.baseUrl, adapter: e.axiosAdapter });
    return r(s2), s2.defaults.raxConfig = { instance: s2, retry: e.maxRetries, backoffType: "exponential", shouldRetry: (t) => {
      let r2 = i(t);
      return r2 ? this.shouldRetryCondition(t, r2.currentRetryAttempt ?? 1, r2.retry ?? 3) : false;
    } }, s2;
  }
  async request(e, s2, t = {}, r2 = {}, n2 = {}) {
    n2 = { ...this.config.customHeaders, ...n2 };
    let a = { method: e, withCredentials: true, url: s2, json: true, headers: this.setHeaders(r2, e, s2, n2) };
    ["POST", "DELETE"].includes(e) && (a.data = t);
    let { data: d, ...Qs } = await this.axiosClient(a);
    return { ...d, response: Qs };
  }
};
var ss = $;
var i2 = class {
  constructor(e) {
    this.client = e;
  }
};
var E = class extends i2 {
  addAddress(e, s2 = {}) {
    let t = "/store/customers/me/addresses";
    return this.client.request("POST", t, e, {}, s2);
  }
  deleteAddress(e, s2 = {}) {
    let t = `/store/customers/me/addresses/${e}`;
    return this.client.request("DELETE", t, void 0, {}, s2);
  }
  updateAddress(e, s2, t = {}) {
    let r2 = `/store/customers/me/addresses/${e}`;
    return this.client.request("POST", r2, s2, {}, t);
  }
};
var L = E;
var x = class extends i2 {
  authenticate(e, s2 = {}) {
    let t = "/store/auth";
    return this.client.request("POST", t, e, {}, s2);
  }
  deleteSession(e = {}) {
    let s2 = "/store/auth";
    return this.client.request("DELETE", s2, {}, {}, e);
  }
  getSession(e = {}) {
    let s2 = "/store/auth";
    return this.client.request("GET", s2, void 0, {}, e);
  }
  exists(e, s2 = {}) {
    let t = `/store/auth/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  getToken(e, s2 = {}) {
    let t = "/store/auth/token";
    return this.client.request("POST", t, e, {}, s2).then((r2) => (u.registerJwt(r2.access_token, "store"), r2));
  }
};
var G = x;
var D = class extends i2 {
  create(e, s2, t = {}) {
    let r2 = `/store/carts/${e}/line-items`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  update(e, s2, t, r2 = {}) {
    let n2 = `/store/carts/${e}/line-items/${s2}`;
    return this.client.request("POST", n2, t, {}, r2);
  }
  delete(e, s2, t = {}) {
    let r2 = `/store/carts/${e}/line-items/${s2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
};
var b = D;
var v = class extends i2 {
  constructor() {
    super(...arguments);
    this.lineItems = new b(this.client);
  }
  addShippingMethod(s2, t, r2 = {}) {
    let n2 = `/store/carts/${s2}/shipping-methods`;
    return this.client.request("POST", n2, t, {}, r2);
  }
  complete(s2, t = {}) {
    let r2 = `/store/carts/${s2}/complete`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
  create(s2, t = {}) {
    let r2 = "/store/carts";
    return this.client.request("POST", r2, s2, {}, t);
  }
  createPaymentSessions(s2, t = {}) {
    let r2 = `/store/carts/${s2}/payment-sessions`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
  deleteDiscount(s2, t, r2 = {}) {
    let n2 = `/store/carts/${s2}/discounts/${t}`;
    return this.client.request("DELETE", n2, void 0, {}, r2);
  }
  deletePaymentSession(s2, t, r2 = {}) {
    let n2 = `/store/carts/${s2}/payment-sessions/${t}`;
    return this.client.request("DELETE", n2, void 0, {}, r2);
  }
  refreshPaymentSession(s2, t, r2 = {}) {
    let n2 = `/store/carts/${s2}/payment-sessions/${t}/refresh`;
    return this.client.request("POST", n2, void 0, {}, r2);
  }
  retrieve(s2, t = {}) {
    let r2 = `/store/carts/${s2}`;
    return this.client.request("GET", r2, void 0, {}, t);
  }
  setPaymentSession(s2, t, r2 = {}) {
    let n2 = `/store/carts/${s2}/payment-session`;
    return this.client.request("POST", n2, t, {}, r2);
  }
  update(s2, t, r2 = {}) {
    let n2 = `/store/carts/${s2}`;
    return this.client.request("POST", n2, t, {}, r2);
  }
  updatePaymentSession(s2, t, r2, n2 = {}) {
    let a = `/store/carts/${s2}/payment-sessions/${t}`;
    return this.client.request("POST", a, r2, {}, n2);
  }
};
var w = v;
var I = class extends i2 {
  retrieve(e, s2 = {}) {
    let t = `/store/collections/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  list(e, s2 = {}) {
    let t = "/store/collections";
    return e && (t = `/store/collections?${import_qs.default.stringify(e)}`), this.client.request("GET", t, void 0, {}, s2);
  }
};
var B = I;
var k = class extends i2 {
  list(e = {}) {
    let s2 = "/store/customers/me/payment-methods";
    return this.client.request("GET", s2, void 0, {}, e);
  }
};
var l = k;
var U = class extends i2 {
  constructor() {
    super(...arguments);
    this.paymentMethods = new l(this.client);
    this.addresses = new L(this.client);
  }
  create(s2, t = {}) {
    let r2 = "/store/customers";
    return this.client.request("POST", r2, s2, {}, t);
  }
  retrieve(s2 = {}) {
    let t = "/store/customers/me";
    return this.client.request("GET", t, void 0, {}, s2);
  }
  update(s2, t = {}) {
    let r2 = "/store/customers/me";
    return this.client.request("POST", r2, s2, {}, t);
  }
  listOrders(s2, t = {}) {
    let r2 = "/store/customers/me/orders";
    if (s2) {
      let n2 = import_qs2.default.stringify(s2);
      n2 && (r2 += `?${n2}`);
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  resetPassword(s2, t = {}) {
    let r2 = "/store/customers/password-reset";
    return this.client.request("POST", r2, s2, {}, t);
  }
  generatePasswordToken(s2, t = {}) {
    let r2 = "/store/customers/password-token";
    return this.client.request("POST", r2, s2, {}, t);
  }
};
var K = U;
var N = class extends i2 {
  retrieve(e, s2 = {}) {
    let t = `/store/gift-cards/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
};
var V = N;
var F = class extends i2 {
  retrieve(e, s2 = {}) {
    let t = `/store/order-edits/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  decline(e, s2, t = {}) {
    let r2 = `/store/order-edits/${e}/decline`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  complete(e, s2 = {}) {
    let t = `/store/order-edits/${e}/complete`;
    return this.client.request("POST", t, void 0, {}, s2);
  }
};
var J = F;
var M = class extends i2 {
  retrieve(e, s2 = {}) {
    let t = `/store/orders/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  retrieveByCartId(e, s2 = {}) {
    let t = `/store/orders/cart/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  lookupOrder(e, s2 = {}) {
    let t = "/store/orders?";
    return t = `/store/orders?${import_qs3.default.stringify(e)}`, this.client.request("GET", t, e, {}, s2);
  }
  requestCustomerOrders(e, s2 = {}) {
    let t = "/store/orders/batch/customer/token";
    return this.client.request("POST", t, e, {}, s2);
  }
  confirmRequest(e, s2 = {}) {
    let t = "/store/orders/customer/confirm";
    return this.client.request("POST", t, e, {}, s2);
  }
};
var z = M;
var H = class extends i2 {
  retrieve(e, s2, t = {}) {
    let r2 = `/store/payment-collections/${e}`;
    if (s2) {
      let n2 = import_qs4.default.stringify(s2);
      r2 += `?${n2}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  authorizePaymentSession(e, s2, t = {}) {
    let r2 = `/store/payment-collections/${e}/sessions/${s2}/authorize`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
  authorizePaymentSessionsBatch(e, s2, t = {}) {
    let r2 = `/store/payment-collections/${e}/sessions/batch/authorize`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  managePaymentSessionsBatch(e, s2, t = {}) {
    let r2 = `/store/payment-collections/${e}/sessions/batch`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  managePaymentSession(e, s2, t = {}) {
    let r2 = `/store/payment-collections/${e}/sessions`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  refreshPaymentSession(e, s2, t = {}) {
    let r2 = `/store/payment-collections/${e}/sessions/${s2}`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
};
var j = H;
var _ = class extends i2 {
  retrieve(e, s2, t = {}) {
    let r2 = `/store/product-categories/${e}`;
    if (s2) {
      let n2 = import_qs5.default.stringify(s2);
      r2 = `${r2}?${n2}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  list(e, s2 = {}) {
    let t = "/store/product-categories";
    if (e) {
      let r2 = import_qs5.default.stringify(e);
      t = `${t}?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, s2);
  }
};
var W = _;
var Q = class extends i2 {
  list(e, s2 = {}) {
    let t = "/store/product-tags";
    if (e) {
      let r2 = import_qs6.default.stringify(e);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, s2);
  }
};
var X = Q;
var Y = class extends i2 {
  list(e, s2 = {}) {
    let t = "/store/product-types";
    if (e) {
      let r2 = import_qs7.default.stringify(e);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, s2);
  }
};
var Z = Y;
var ee = class extends i2 {
  retrieve(e, s2 = {}) {
    let t = `/store/variants/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  list(e, s2 = {}) {
    let t = "/store/variants";
    if (e) {
      let r2 = import_qs8.default.stringify(e);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, s2);
  }
};
var se = ee;
var te = class extends i2 {
  constructor() {
    super(...arguments);
    this.variants = new se(this.client);
  }
  retrieve(s2, t = {}) {
    let r2 = `/store/products/${s2}`;
    return this.client.request("GET", r2, void 0, {}, t);
  }
  search(s2, t = {}) {
    let r2 = "/store/products/search";
    return this.client.request("POST", r2, s2, {}, t);
  }
  list(s2, t = {}) {
    let r2 = "/store/products";
    return s2 && (r2 = `/store/products?${import_qs9.default.stringify(s2)}`), this.client.request("GET", r2, void 0, {}, t);
  }
};
var re = te;
var ne = class extends i2 {
  list(e = {}) {
    let s2 = "/store/regions";
    return this.client.request("GET", s2, void 0, {}, e);
  }
  retrieve(e, s2 = {}) {
    let t = `/store/regions/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
};
var ie = ne;
var oe = class extends i2 {
  retrieve(e, s2 = {}) {
    let t = `/store/return-reasons/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  list(e = {}) {
    let s2 = "/store/return-reasons";
    return this.client.request("GET", s2, void 0, {}, e);
  }
};
var ae = oe;
var de = class extends i2 {
  create(e, s2 = {}) {
    let t = "/store/returns";
    return this.client.request("POST", t, e, {}, s2);
  }
};
var me = de;
var ce = class extends i2 {
  listCartOptions(e, s2 = {}) {
    let t = `/store/shipping-options/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  list(e, s2 = {}) {
    let t = "/store/shipping-options";
    return e && (t = `/store/shipping-options?${import_qs10.default.stringify(e)}`), this.client.request("GET", t, void 0, {}, s2);
  }
};
var ue = ce;
var pe = class extends i2 {
  create(e, s2 = {}) {
    let t = "/store/swaps";
    return this.client.request("POST", t, e, {}, s2);
  }
  retrieveByCartId(e, s2 = {}) {
    let t = `/store/swaps/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
};
var Re = pe;
var le = class extends i2 {
  getSession(e = {}) {
    let s2 = "/admin/auth";
    return this.client.request("GET", s2, void 0, {}, e);
  }
  deleteSession(e = {}) {
    let s2 = "/admin/auth";
    return this.client.request("DELETE", s2, void 0, {}, e);
  }
  createSession(e, s2 = {}) {
    let t = "/admin/auth";
    return this.client.request("POST", t, e, {}, s2);
  }
  getToken(e, s2 = {}) {
    let t = "/admin/auth/token";
    return this.client.request("POST", t, e, {}, s2).then((r2) => (u.registerJwt(r2.access_token, "admin"), r2));
  }
};
var rs = le;
function ns(o2) {
  let e = (s2) => {
    let t = {};
    return Object.keys(s2).reduce((r2, n2) => (s2[n2] === null ? r2[n2] = "null" : typeof s2[n2] == "object" ? r2[n2] = e(s2[n2]) : r2[n2] = s2[n2], r2), t), t;
  };
  return e(o2);
}
function g(o2) {
  let e = o2;
  return e.startsWith("/") || (e = `/${e}`), e.startsWith("/admin") || (e = `/admin${e}`), e;
}
var Pe = class extends i2 {
  create(e, s2 = {}) {
    let t = "/admin/batch-jobs";
    return this.client.request("POST", t, e, {}, s2);
  }
  list(e, s2 = {}) {
    let t = "/admin/batch-jobs";
    return e && (t = `/admin/batch-jobs?${import_qs11.default.stringify(ns(e))}`), this.client.request("GET", t, void 0, {}, s2);
  }
  cancel(e, s2 = {}) {
    let t = `/admin/batch-jobs/${e}/cancel`;
    return this.client.request("POST", t, void 0, {}, s2);
  }
  confirm(e, s2 = {}) {
    let t = `/admin/batch-jobs/${e}/confirm`;
    return this.client.request("POST", t, void 0, {}, s2);
  }
  retrieve(e, s2 = {}) {
    let t = `/admin/batch-jobs/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
};
var is = Pe;
var he = class extends i2 {
  create(e, s2 = {}) {
    let t = "/admin/collections";
    return this.client.request("POST", t, e, {}, s2);
  }
  update(e, s2, t = {}) {
    let r2 = `/admin/collections/${e}`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  delete(e, s2 = {}) {
    let t = `/admin/collections/${e}`;
    return this.client.request("DELETE", t, void 0, {}, s2);
  }
  retrieve(e, s2 = {}) {
    let t = `/admin/collections/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  list(e, s2 = {}) {
    let t = "/admin/collections";
    return e && (t = `/admin/collections?${import_qs12.default.stringify(e)}`), this.client.request("GET", t, void 0, {}, s2);
  }
  addProducts(e, s2, t = {}) {
    let r2 = `/admin/collections/${e}/products/batch`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  removeProducts(e, s2, t = {}) {
    let r2 = `/admin/collections/${e}/products/batch`;
    return this.client.request("DELETE", r2, s2, {}, t);
  }
};
var os = he;
var ge = class extends i2 {
  list(e, s2 = {}) {
    let t = "/admin/currencies";
    if (e) {
      let r2 = import_qs13.default.stringify(e);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, s2);
  }
  update(e, s2, t = {}) {
    let r2 = `/admin/currencies/${e}`;
    return this.client.request("POST", r2, s2, {}, t);
  }
};
var as = ge;
var fe = class extends i2 {
  get(e, s2, t, r2) {
    let n2 = g(e);
    if (s2) {
      let a = import_qs14.default.stringify(s2);
      n2 += `?${a}`;
    }
    return this.client.request("GET", n2, void 0, t, r2);
  }
  post(e, s2, t, r2) {
    let n2 = g(e);
    return this.client.request("POST", n2, s2, t, r2);
  }
  delete(e, s2, t) {
    let r2 = g(e);
    return this.client.request("DELETE", r2, void 0, s2, t);
  }
};
var ds = fe;
var ye = class extends i2 {
  create(e, s2 = {}) {
    let t = "/admin/customer-groups";
    return this.client.request("POST", t, e, {}, s2);
  }
  retrieve(e, s2, t = {}) {
    let r2 = `/admin/customer-groups/${e}`;
    if (s2) {
      let n2 = import_qs15.default.stringify(s2);
      r2 += `?${n2}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  update(e, s2, t = {}) {
    let r2 = `/admin/customer-groups/${e}`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  delete(e, s2 = {}) {
    let t = `/admin/customer-groups/${e}`;
    return this.client.request("DELETE", t, void 0, {}, s2);
  }
  list(e, s2 = {}) {
    let t = "/admin/customer-groups";
    return e && (t = `/admin/customer-groups?${import_qs15.default.stringify(e)}`), this.client.request("GET", t, void 0, {}, s2);
  }
  addCustomers(e, s2, t = {}) {
    let r2 = `/admin/customer-groups/${e}/customers/batch`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  removeCustomers(e, s2, t = {}) {
    let r2 = `/admin/customer-groups/${e}/customers/batch`;
    return this.client.request("DELETE", r2, s2, {}, t);
  }
  listCustomers(e, s2, t = {}) {
    let r2 = `/admin/customer-groups/${e}/customers`;
    if (s2) {
      let n2 = import_qs15.default.stringify(s2);
      r2 += `?${n2}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
};
var ms = ye;
var qe = class extends i2 {
  create(e, s2 = {}) {
    let t = "/admin/customers";
    return this.client.request("POST", t, e, {}, s2);
  }
  update(e, s2, t = {}) {
    let r2 = `/admin/customers/${e}`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  retrieve(e, s2 = {}) {
    let t = `/admin/customers/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  list(e, s2 = {}) {
    let t = "/admin/customers";
    return e && (t = `/admin/customers?${import_qs16.default.stringify(e)}`), this.client.request("GET", t, void 0, {}, s2);
  }
};
var cs = qe;
var Se = class extends i2 {
  addRegion(e, s2, t = {}) {
    let r2 = `/admin/discounts/${e}/regions/${s2}`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
  create(e, s2 = {}) {
    let t = "/admin/discounts";
    return this.client.request("POST", t, e, {}, s2);
  }
  update(e, s2, t = {}) {
    let r2 = `/admin/discounts/${e}`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  createDynamicCode(e, s2, t = {}) {
    let r2 = `/admin/discounts/${e}/dynamic-codes`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  delete(e, s2 = {}) {
    let t = `/admin/discounts/${e}`;
    return this.client.request("DELETE", t, void 0, {}, s2);
  }
  deleteDynamicCode(e, s2, t = {}) {
    let r2 = `/admin/discounts/${e}/dynamic-codes/${s2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  retrieve(e, s2, t = {}) {
    let r2 = `/admin/discounts/${e}`;
    if (s2) {
      let n2 = import_qs17.default.stringify(s2);
      r2 = `${r2}?${n2}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  retrieveByCode(e, s2 = {}) {
    let t = `/admin/discounts/code/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  list(e, s2 = {}) {
    let t = "/admin/discounts";
    if (e) {
      let r2 = import_qs17.default.stringify(e);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, s2);
  }
  removeRegion(e, s2, t = {}) {
    let r2 = `/admin/discounts/${e}/regions/${s2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  createCondition(e, s2, t = {}, r2 = {}) {
    let n2 = `/admin/discounts/${e}/conditions`;
    if (t) {
      let a = import_qs17.default.stringify(t);
      n2 += `?${a}`;
    }
    return this.client.request("POST", n2, s2, {}, r2);
  }
  updateCondition(e, s2, t, r2 = {}, n2 = {}) {
    let a = `/admin/discounts/${e}/conditions/${s2}`;
    if (r2) {
      let d = import_qs17.default.stringify(r2);
      a += `?${d}`;
    }
    return this.client.request("POST", a, t, {}, n2);
  }
  deleteCondition(e, s2, t = {}) {
    let r2 = `/admin/discounts/${e}/conditions/${s2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  getCondition(e, s2, t, r2 = {}) {
    let n2 = `/admin/discounts/${e}/conditions/${s2}`;
    if (t) {
      let a = import_qs17.default.stringify(t);
      n2 += `?${a}`;
    }
    return this.client.request("GET", n2, void 0, {}, r2);
  }
  addConditionResourceBatch(e, s2, t, r2, n2 = {}) {
    let a = `/admin/discounts/${e}/conditions/${s2}/batch`;
    if (r2) {
      let d = import_qs17.default.stringify(r2);
      a += `?${d}`;
    }
    return this.client.request("POST", a, t, {}, n2);
  }
  deleteConditionResourceBatch(e, s2, t, r2 = {}) {
    let n2 = `/admin/discounts/${e}/conditions/${s2}/batch`;
    return this.client.request("DELETE", n2, t, {}, r2);
  }
};
var us = Se;
var Te = class extends i2 {
  create(e, s2 = {}) {
    let t = "/admin/draft-orders";
    return this.client.request("POST", t, e, {}, s2);
  }
  addLineItem(e, s2, t = {}) {
    let r2 = `/admin/draft-orders/${e}/line-items`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  delete(e, s2 = {}) {
    let t = `/admin/draft-orders/${e}`;
    return this.client.request("DELETE", t, void 0, {}, s2);
  }
  removeLineItem(e, s2, t = {}) {
    let r2 = `/admin/draft-orders/${e}/line-items/${s2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  retrieve(e, s2 = {}) {
    let t = `/admin/draft-orders/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  list(e, s2 = {}) {
    let t = "/admin/draft-orders";
    return e && (t = `/admin/draft-orders?${import_qs18.default.stringify(e)}`), this.client.request("GET", t, void 0, {}, s2);
  }
  markPaid(e, s2 = {}) {
    let t = `/admin/draft-orders/${e}/pay`;
    return this.client.request("POST", t, {}, s2);
  }
  update(e, s2, t = {}) {
    let r2 = `/admin/draft-orders/${e}`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  updateLineItem(e, s2, t, r2 = {}) {
    let n2 = `/admin/draft-orders/${e}/line-items/${s2}`;
    return this.client.request("POST", n2, t, {}, r2);
  }
};
var ps = Te;
var Ce = class extends i2 {
  create(e, s2 = {}) {
    let t = "/admin/gift-cards";
    return this.client.request("POST", t, e, {}, s2);
  }
  update(e, s2, t = {}) {
    let r2 = `/admin/gift-cards/${e}`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  delete(e, s2 = {}) {
    let t = `/admin/gift-cards/${e}`;
    return this.client.request("DELETE", t, void 0, {}, s2);
  }
  retrieve(e, s2 = {}) {
    let t = `/admin/gift-cards/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  list(e, s2 = {}) {
    let t = "/admin/gift-cards/";
    return e && (t = `/admin/gift-cards?${import_qs19.default.stringify(e)}`), this.client.request("GET", t, void 0, {}, s2);
  }
};
var Rs = Ce;
var Oe = class extends i2 {
  retrieve(e, s2, t = {}) {
    let r2 = `/admin/inventory-items/${e}`;
    if (s2) {
      let n2 = import_qs20.default.stringify(s2);
      r2 += `?${n2}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  update(e, s2, t, r2 = {}) {
    let n2 = `/admin/inventory-items/${e}`;
    if (t) {
      let a = import_qs20.default.stringify(t);
      n2 += `?${a}`;
    }
    return this.client.request("POST", n2, s2, {}, r2);
  }
  delete(e, s2 = {}) {
    let t = `/admin/inventory-items/${e}`;
    return this.client.request("DELETE", t, void 0, {}, s2);
  }
  create(e, s2, t = {}) {
    let r2 = "/admin/inventory-items";
    if (s2) {
      let n2 = import_qs20.default.stringify(s2);
      r2 += `?${n2}`;
    }
    return this.client.request("POST", r2, e, {}, t);
  }
  list(e, s2 = {}) {
    let t = "/admin/inventory-items";
    if (e) {
      let r2 = import_qs20.default.stringify(e);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, s2);
  }
  updateLocationLevel(e, s2, t, r2, n2 = {}) {
    let a = `/admin/inventory-items/${e}/location-levels/${s2}`;
    if (r2) {
      let d = import_qs20.default.stringify(r2);
      a += `?${d}`;
    }
    return this.client.request("POST", a, t, {}, n2);
  }
  createLocationLevel(e, s2, t, r2 = {}) {
    let n2 = `/admin/inventory-items/${e}/location-levels`;
    if (t) {
      let a = import_qs20.default.stringify(t);
      n2 += `?${a}`;
    }
    return this.client.request("POST", n2, s2, {}, r2);
  }
  deleteLocationLevel(e, s2, t = {}) {
    let r2 = `/admin/inventory-items/${e}/location-levels/${s2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  listLocationLevels(e, s2, t = {}) {
    let r2 = `/admin/inventory-items/${e}/location-levels`;
    if (s2) {
      let n2 = import_qs20.default.stringify(s2);
      r2 += `?${n2}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
};
var ls = Oe;
var $e = class extends i2 {
  accept(e, s2 = {}) {
    let t = "/admin/invites/accept";
    return this.client.request("POST", t, e, {}, s2);
  }
  create(e, s2 = {}) {
    let t = "/admin/invites";
    return this.client.request("POST", t, e, {}, s2);
  }
  delete(e, s2 = {}) {
    let t = `/admin/invites/${e}`;
    return this.client.request("DELETE", t, void 0, {}, s2);
  }
  list(e = {}) {
    let s2 = "/admin/invites";
    return this.client.request("GET", s2, void 0, {}, e);
  }
  resend(e, s2 = {}) {
    let t = `/admin/invites/${e}/resend`;
    return this.client.request("POST", t, void 0, {}, s2);
  }
};
var Ps = $e;
var Ee = class extends i2 {
  create(e, s2 = {}) {
    let t = "/admin/notes";
    return this.client.request("POST", t, e, {}, s2);
  }
  update(e, s2, t = {}) {
    let r2 = `/admin/notes/${e}`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  delete(e, s2 = {}) {
    let t = `/admin/notes/${e}`;
    return this.client.request("DELETE", t, void 0, {}, s2);
  }
  retrieve(e, s2 = {}) {
    let t = `/admin/notes/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  list(e, s2 = {}) {
    let t = "/admin/notes/";
    return e && (t = `/admin/notes?${import_qs21.default.stringify(e)}`), this.client.request("GET", t, void 0, {}, s2);
  }
};
var hs = Ee;
var Le = class extends i2 {
  list(e, s2 = {}) {
    let t = "/admin/notifications";
    return e && (t = `/admin/notifications?${import_qs22.default.stringify(e)}`), this.client.request("GET", t, void 0, {}, s2);
  }
  resend(e, s2, t = {}) {
    let r2 = `/admin/notifications/${e}/resend`;
    return this.client.request("POST", r2, s2, {}, t);
  }
};
var gs = Le;
var xe = class extends i2 {
  retrieve(e, s2, t = {}) {
    let r2 = `/admin/order-edits/${e}`;
    if (s2) {
      let n2 = import_qs23.default.stringify(s2);
      r2 += `?${n2}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  list(e, s2 = {}) {
    let t = "/admin/order-edits";
    if (e) {
      let r2 = import_qs23.default.stringify(e);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, s2);
  }
  create(e, s2 = {}) {
    let t = "/admin/order-edits";
    return this.client.request("POST", t, e, {}, s2);
  }
  update(e, s2, t = {}) {
    let r2 = `/admin/order-edits/${e}`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  delete(e, s2 = {}) {
    let t = `/admin/order-edits/${e}`;
    return this.client.request("DELETE", t, void 0, {}, s2);
  }
  addLineItem(e, s2, t = {}) {
    let r2 = `/admin/order-edits/${e}/items`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  deleteItemChange(e, s2, t = {}) {
    let r2 = `/admin/order-edits/${e}/changes/${s2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  requestConfirmation(e, s2 = {}) {
    let t = `/admin/order-edits/${e}/request`;
    return this.client.request("POST", t, void 0, {}, s2);
  }
  cancel(e, s2 = {}) {
    let t = `/admin/order-edits/${e}/cancel`;
    return this.client.request("POST", t, void 0, {}, s2);
  }
  confirm(e, s2 = {}) {
    let t = `/admin/order-edits/${e}/confirm`;
    return this.client.request("POST", t, void 0, {}, s2);
  }
  updateLineItem(e, s2, t, r2 = {}) {
    let n2 = `/admin/order-edits/${e}/items/${s2}`;
    return this.client.request("POST", n2, t, {}, r2);
  }
  removeLineItem(e, s2, t = {}) {
    let r2 = `/admin/order-edits/${e}/items/${s2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
};
var As = xe;
var Ge = class extends i2 {
  update(e, s2, t = {}) {
    let r2 = `/admin/orders/${e}`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  retrieve(e, s2, t = {}) {
    let r2 = `/admin/orders/${e}`;
    if (s2) {
      let n2 = import_qs24.default.stringify(s2);
      r2 = `/admin/orders/${e}?${n2}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  list(e, s2 = {}) {
    let t = "/admin/orders";
    return e && (t = `/admin/orders?${import_qs24.default.stringify(e)}`), this.client.request("GET", t, void 0, {}, s2);
  }
  complete(e, s2 = {}) {
    let t = `/admin/orders/${e}/complete`;
    return this.client.request("POST", t, void 0, {}, s2);
  }
  capturePayment(e, s2 = {}) {
    let t = `/admin/orders/${e}/capture`;
    return this.client.request("POST", t, void 0, {}, s2);
  }
  refundPayment(e, s2, t = {}) {
    let r2 = `/admin/orders/${e}/refund`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  createFulfillment(e, s2, t = {}) {
    let r2 = `/admin/orders/${e}/fulfillment`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  cancelFulfillment(e, s2, t = {}) {
    let r2 = `/admin/orders/${e}/fulfillments/${s2}/cancel`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
  cancelSwapFulfillment(e, s2, t, r2 = {}) {
    let n2 = `/admin/orders/${e}/swaps/${s2}/fulfillments/${t}/cancel`;
    return this.client.request("POST", n2, void 0, {}, r2);
  }
  cancelClaimFulfillment(e, s2, t, r2 = {}) {
    let n2 = `/admin/orders/${e}/claims/${s2}/fulfillments/${t}/cancel`;
    return this.client.request("POST", n2, void 0, {}, r2);
  }
  createShipment(e, s2, t = {}) {
    let r2 = `/admin/orders/${e}/shipment`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  requestReturn(e, s2, t = {}) {
    let r2 = `/admin/orders/${e}/return`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  cancel(e, s2 = {}) {
    let t = `/admin/orders/${e}/cancel`;
    return this.client.request("POST", t, void 0, {}, s2);
  }
  addShippingMethod(e, s2, t = {}) {
    let r2 = `/admin/orders/${e}/shipping-methods`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  archive(e, s2 = {}) {
    let t = `/admin/orders/${e}/archive`;
    return this.client.request("POST", t, void 0, {}, s2);
  }
  createSwap(e, s2, t = {}) {
    let r2 = `/admin/orders/${e}/swaps`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  cancelSwap(e, s2, t = {}) {
    let r2 = `/admin/orders/${e}/swaps/${s2}/cancel`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
  fulfillSwap(e, s2, t, r2 = {}) {
    let n2 = `/admin/orders/${e}/swaps/${s2}/fulfillments`;
    return this.client.request("POST", n2, t, {}, r2);
  }
  createSwapShipment(e, s2, t, r2 = {}) {
    let n2 = `/admin/orders/${e}/swaps/${s2}/shipments`;
    return this.client.request("POST", n2, t, {}, r2);
  }
  processSwapPayment(e, s2, t = {}) {
    let r2 = `/admin/orders/${e}/swaps/${s2}/process-payment`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
  createClaim(e, s2, t = {}) {
    let r2 = `/admin/orders/${e}/claims`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  cancelClaim(e, s2, t = {}) {
    let r2 = `/admin/orders/${e}/claims/${s2}/cancel`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
  updateClaim(e, s2, t, r2 = {}) {
    let n2 = `/admin/orders/${e}/claims/${s2}`;
    return this.client.request("POST", n2, t, {}, r2);
  }
  fulfillClaim(e, s2, t, r2 = {}) {
    let n2 = `/admin/orders/${e}/claims/${s2}/fulfillments`;
    return this.client.request("POST", n2, t, {}, r2);
  }
  createClaimShipment(e, s2, t, r2 = {}) {
    let n2 = `/admin/orders/${e}/claims/${s2}/shipments`;
    return this.client.request("POST", n2, t, {}, r2);
  }
};
var qs = Ge;
var De = class extends i2 {
  retrieve(e, s2, t = {}) {
    let r2 = `/admin/payment-collections/${e}`;
    if (s2) {
      let n2 = import_qs25.default.stringify(s2);
      r2 += `?${n2}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  update(e, s2, t = {}) {
    let r2 = `/admin/payment-collections/${e}`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  delete(e, s2 = {}) {
    let t = `/admin/payment-collections/${e}`;
    return this.client.request("DELETE", t, void 0, {}, s2);
  }
  markAsAuthorized(e, s2 = {}) {
    let t = `/admin/payment-collections/${e}/authorize`;
    return this.client.request("POST", t, void 0, {}, s2);
  }
};
var Ss = De;
var be = class extends i2 {
  retrieve(e, s2, t = {}) {
    let r2 = `/admin/payments/${e}`;
    if (s2) {
      let n2 = import_qs26.default.stringify(s2);
      r2 = `/admin/payments/${e}?${n2}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  capturePayment(e, s2 = {}) {
    let t = `/admin/payments/${e}/capture`;
    return this.client.request("POST", t, void 0, {}, s2);
  }
  refundPayment(e, s2, t = {}) {
    let r2 = `/admin/payments/${e}/refund`;
    return this.client.request("POST", r2, s2, {}, t);
  }
};
var Ts = be;
var ve = class extends i2 {
  create(e, s2 = {}) {
    let t = "/admin/price-lists";
    return this.client.request("POST", t, e, {}, s2);
  }
  update(e, s2, t = {}) {
    let r2 = `/admin/price-lists/${e}`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  delete(e, s2 = {}) {
    let t = `/admin/price-lists/${e}`;
    return this.client.request("DELETE", t, void 0, {}, s2);
  }
  retrieve(e, s2 = {}) {
    let t = `/admin/price-lists/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  list(e, s2 = {}) {
    let t = "/admin/price-lists/";
    return e && (t = `/admin/price-lists?${import_qs27.default.stringify(e)}`), this.client.request("GET", t, void 0, {}, s2);
  }
  listProducts(e, s2, t = {}) {
    let r2 = `/admin/price-lists/${e}/products`;
    if (s2) {
      let n2 = import_qs27.default.stringify(s2);
      r2 = `/admin/price-lists/${e}/products?${n2}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  addPrices(e, s2, t = {}) {
    let r2 = `/admin/price-lists/${e}/prices/batch`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  deletePrices(e, s2, t = {}) {
    let r2 = `/admin/price-lists/${e}/prices/batch`;
    return this.client.request("DELETE", r2, s2, {}, t);
  }
  deleteProductPrices(e, s2, t = {}) {
    let r2 = `/admin/price-lists/${e}/products/${s2}/prices`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  deleteVariantPrices(e, s2, t = {}) {
    let r2 = `/admin/price-lists/${e}/variants/${s2}/prices`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  deleteProductsPrices(e, s2, t = {}) {
    let r2 = `/admin/price-lists/${e}/products/prices/batch`;
    return this.client.request("DELETE", r2, s2, {}, t);
  }
};
var Os = ve;
var we = class extends i2 {
  retrieve(e, s2, t = {}) {
    let r2 = `/admin/product-categories/${e}`;
    if (s2) {
      let n2 = import_qs28.default.stringify(s2);
      r2 = `${r2}?${n2}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  create(e, s2 = {}) {
    let t = "/admin/product-categories";
    return this.client.request("POST", t, e, {}, s2);
  }
  update(e, s2, t = {}) {
    let r2 = `/admin/product-categories/${e}`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  list(e, s2 = {}) {
    let t = "/admin/product-categories";
    if (e) {
      let r2 = import_qs28.default.stringify(e);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, s2);
  }
  delete(e, s2 = {}) {
    let t = `/admin/product-categories/${e}`;
    return this.client.request("DELETE", t, void 0, {}, s2);
  }
  removeProducts(e, s2, t = {}) {
    let r2 = `/admin/product-categories/${e}/products/batch`;
    return this.client.request("DELETE", r2, s2, {}, t);
  }
  addProducts(e, s2, t = {}) {
    let r2 = `/admin/product-categories/${e}/products/batch`;
    return this.client.request("POST", r2, s2, {}, t);
  }
};
var Es = we;
var Ie = class extends i2 {
  list(e) {
    let s2 = "/admin/product-tags";
    return e && (s2 = `/admin/product-tags?${import_qs29.default.stringify(e)}`), this.client.request("GET", s2);
  }
};
var Ls = Ie;
var Be = class extends i2 {
  list(e, s2 = {}) {
    let t = "/admin/product-types";
    if (e) {
      let r2 = import_qs30.default.stringify(e);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, s2);
  }
};
var xs = Be;
var ke = class extends i2 {
  create(e, s2 = {}) {
    let t = "/admin/products/";
    return this.client.request("POST", t, e, {}, s2);
  }
  retrieve(e, s2 = {}) {
    let t = `/admin/products/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  update(e, s2, t = {}) {
    let r2 = `/admin/products/${e}`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  delete(e, s2 = {}) {
    let t = `/admin/products/${e}`;
    return this.client.request("DELETE", t, void 0, {}, s2);
  }
  list(e, s2 = {}) {
    let t = "/admin/products";
    return e && (t = `/admin/products?${import_qs31.default.stringify(e)}`), this.client.request("GET", t, void 0, {}, s2);
  }
  listTypes(e = {}) {
    let s2 = "/admin/products/types";
    return this.client.request("GET", s2, void 0, {}, e);
  }
  listTags(e = {}) {
    let s2 = "/admin/products/tag-usage";
    return this.client.request("GET", s2, void 0, {}, e);
  }
  setMetadata(e, s2, t = {}) {
    let r2 = `/admin/products/${e}/metadata`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  createVariant(e, s2, t = {}) {
    let r2 = `/admin/products/${e}/variants`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  updateVariant(e, s2, t, r2 = {}) {
    let n2 = `/admin/products/${e}/variants/${s2}`;
    return this.client.request("POST", n2, t, {}, r2);
  }
  deleteVariant(e, s2, t = {}) {
    let r2 = `/admin/products/${e}/variants/${s2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  listVariants(e, s2, t = {}) {
    let r2 = `/admin/products/${e}/variants`;
    if (s2) {
      let n2 = import_qs31.default.stringify(s2);
      r2 = `/admin/products/${e}/variants?${n2}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  addOption(e, s2, t = {}) {
    let r2 = `/admin/products/${e}/options`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  updateOption(e, s2, t, r2 = {}) {
    let n2 = `/admin/products/${e}/options/${s2}`;
    return this.client.request("POST", n2, t, {}, r2);
  }
  deleteOption(e, s2, t = {}) {
    let r2 = `/admin/products/${e}/options/${s2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
};
var Ds = ke;
var Ue = class extends i2 {
  retrieve(e, s2 = {}) {
    let t = `/admin/publishable-api-keys/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  list(e, s2 = {}) {
    let t = "/admin/publishable-api-keys";
    if (e) {
      let r2 = import_qs32.default.stringify(e);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, s2);
  }
  create(e, s2 = {}) {
    let t = "/admin/publishable-api-keys";
    return this.client.request("POST", t, e, {}, s2);
  }
  update(e, s2, t = {}) {
    let r2 = `/admin/publishable-api-keys/${e}`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  delete(e, s2 = {}) {
    let t = `/admin/publishable-api-keys/${e}`;
    return this.client.request("DELETE", t, void 0, {}, s2);
  }
  revoke(e, s2 = {}) {
    let t = `/admin/publishable-api-keys/${e}/revoke`;
    return this.client.request("POST", t, {}, {}, s2);
  }
  addSalesChannelsBatch(e, s2, t = {}) {
    let r2 = `/admin/publishable-api-keys/${e}/sales-channels/batch`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  deleteSalesChannelsBatch(e, s2, t = {}) {
    let r2 = `/admin/publishable-api-keys/${e}/sales-channels/batch`;
    return this.client.request("DELETE", r2, s2, {}, t);
  }
  listSalesChannels(e, s2, t = {}) {
    let r2 = `/admin/publishable-api-keys/${e}/sales-channels`;
    if (s2) {
      let n2 = import_qs32.default.stringify(s2);
      r2 += `?${n2}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
};
var vs = Ue;
var Ke = class extends i2 {
  create(e, s2 = {}) {
    let t = "/admin/regions";
    return this.client.request("POST", t, e, {}, s2);
  }
  update(e, s2, t = {}) {
    let r2 = `/admin/regions/${e}`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  delete(e, s2 = {}) {
    let t = `/admin/regions/${e}`;
    return this.client.request("DELETE", t, void 0, {}, s2);
  }
  retrieve(e, s2, t = {}) {
    let r2 = `/admin/regions/${e}`;
    if (s2) {
      let n2 = import_qs33.default.stringify(s2);
      r2 = `/admin/regions/${e}?${n2}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  list(e, s2 = {}) {
    let t = "/admin/regions";
    return e && (t = `/admin/regions?${import_qs33.default.stringify(e)}`), this.client.request("GET", t, void 0, {}, s2);
  }
  addCountry(e, s2, t = {}) {
    let r2 = `/admin/regions/${e}/countries`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  deleteCountry(e, s2, t = {}) {
    let r2 = `/admin/regions/${e}/countries/${s2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  addFulfillmentProvider(e, s2, t = {}) {
    let r2 = `/admin/regions/${e}/fulfillment-providers`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  deleteFulfillmentProvider(e, s2, t = {}) {
    let r2 = `/admin/regions/${e}/fulfillment-providers/${s2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  retrieveFulfillmentOptions(e, s2 = {}) {
    let t = `/admin/regions/${e}/fulfillment-options`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  addPaymentProvider(e, s2, t = {}) {
    let r2 = `/admin/regions/${e}/payment-providers`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  deletePaymentProvider(e, s2, t = {}) {
    let r2 = `/admin/regions/${e}/payment-providers/${s2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
};
var Is = Ke;
var Ne = class extends i2 {
  retrieve(e, s2 = {}) {
    let t = `/admin/reservations/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  list(e, s2 = {}) {
    let t = "/admin/reservations";
    if (e) {
      let r2 = import_qs34.default.stringify(e);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, s2);
  }
  create(e, s2 = {}) {
    let t = "/admin/reservations";
    return this.client.request("POST", t, e, {}, s2);
  }
  update(e, s2, t = {}) {
    let r2 = `/admin/reservations/${e}`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  delete(e, s2 = {}) {
    let t = `/admin/reservations/${e}`;
    return this.client.request("DELETE", t, void 0, {}, s2);
  }
};
var Bs = Ne;
var Ve = class extends i2 {
  create(e, s2 = {}) {
    let t = "/admin/return-reasons";
    return this.client.request("POST", t, e, {}, s2);
  }
  update(e, s2, t = {}) {
    let r2 = `/admin/return-reasons/${e}`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  delete(e, s2 = {}) {
    let t = `/admin/return-reasons/${e}`;
    return this.client.request("DELETE", t, void 0, {}, s2);
  }
  retrieve(e, s2 = {}) {
    let t = `/admin/return-reasons/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  list(e = {}) {
    let s2 = "/admin/return-reasons";
    return this.client.request("GET", s2, void 0, {}, e);
  }
};
var ks = Ve;
var Fe = class extends i2 {
  cancel(e, s2 = {}) {
    let t = `/admin/returns/${e}/cancel`;
    return this.client.request("POST", t, void 0, {}, s2);
  }
  receive(e, s2, t = {}) {
    let r2 = `/admin/returns/${e}/receive`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  list(e, s2 = {}) {
    let t = "/admin/returns/";
    return e && (t = `/admin/returns?${import_qs35.default.stringify(e)}`), this.client.request("GET", t, void 0, {}, s2);
  }
};
var Us = Fe;
var Je = class extends i2 {
  retrieve(e, s2 = {}) {
    let t = `/admin/sales-channels/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  create(e, s2 = {}) {
    let t = "/admin/sales-channels";
    return this.client.request("POST", t, e, {}, s2);
  }
  update(e, s2, t = {}) {
    let r2 = `/admin/sales-channels/${e}`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  list(e, s2 = {}) {
    let t = "/admin/sales-channels";
    if (e) {
      let r2 = import_qs36.default.stringify(e);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, s2);
  }
  delete(e, s2 = {}) {
    let t = `/admin/sales-channels/${e}`;
    return this.client.request("DELETE", t, void 0, {}, s2);
  }
  removeProducts(e, s2, t = {}) {
    let r2 = `/admin/sales-channels/${e}/products/batch`;
    return this.client.request("DELETE", r2, s2, {}, t);
  }
  addProducts(e, s2, t = {}) {
    let r2 = `/admin/sales-channels/${e}/products/batch`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  addLocation(e, s2, t = {}) {
    let r2 = `/admin/sales-channels/${e}/stock-locations`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  removeLocation(e, s2, t = {}) {
    let r2 = `/admin/sales-channels/${e}/stock-locations`;
    return this.client.request("DELETE", r2, s2, {}, t);
  }
};
var Ks = Je;
var Me = class extends i2 {
  create(e, s2 = {}) {
    let t = "/admin/shipping-options";
    return this.client.request("POST", t, e, {}, s2);
  }
  update(e, s2, t = {}) {
    let r2 = `/admin/shipping-options/${e}`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  delete(e, s2 = {}) {
    let t = `/admin/shipping-options/${e}`;
    return this.client.request("DELETE", t, void 0, {}, s2);
  }
  retrieve(e, s2 = {}) {
    let t = `/admin/shipping-options/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  list(e, s2 = {}) {
    let t = "/admin/shipping-options";
    return e && (t = `/admin/shipping-options?${import_qs37.default.stringify(e)}`), this.client.request("GET", t, void 0, {}, s2);
  }
};
var Ns = Me;
var ze = class extends i2 {
  create(e, s2 = {}) {
    let t = "/admin/shipping-profiles/";
    return this.client.request("POST", t, e, {}, s2);
  }
  update(e, s2, t = {}) {
    let r2 = `/admin/shipping-profiles/${e}`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  delete(e, s2 = {}) {
    let t = `/admin/shipping-profiles/${e}`;
    return this.client.request("DELETE", t, void 0, {}, s2);
  }
  retrieve(e, s2 = {}) {
    let t = `/admin/shipping-profiles/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  list(e = {}) {
    let s2 = "/admin/shipping-profiles/";
    return this.client.request("GET", s2, void 0, {}, e);
  }
};
var Vs = ze;
var He = class extends i2 {
  create(e, s2 = {}) {
    let t = "/admin/stock-locations";
    return this.client.request("POST", t, e, {}, s2);
  }
  retrieve(e, s2 = {}) {
    let t = `/admin/stock-locations/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  update(e, s2, t = {}) {
    let r2 = `/admin/stock-locations/${e}`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  delete(e, s2 = {}) {
    let t = `/admin/stock-locations/${e}`;
    return this.client.request("DELETE", t, void 0, {}, s2);
  }
  list(e, s2 = {}) {
    let t = "/admin/stock-locations";
    if (e) {
      let r2 = import_qs38.default.stringify(e);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, s2);
  }
};
var Fs = He;
var je = class extends i2 {
  update(e, s2 = {}) {
    let t = "/admin/store/";
    return this.client.request("POST", t, e, {}, s2);
  }
  addCurrency(e, s2 = {}) {
    let t = `/admin/store/${e}`;
    return this.client.request("POST", t, void 0, {}, s2);
  }
  deleteCurrency(e, s2 = {}) {
    let t = `/admin/store/currencies/${e}`;
    return this.client.request("DELETE", t, void 0, {}, s2);
  }
  retrieve(e = {}) {
    let s2 = "/admin/store/";
    return this.client.request("GET", s2, void 0, {}, e);
  }
  listPaymentProviders(e = {}) {
    let s2 = "/admin/store/payment-providers";
    return this.client.request("GET", s2, void 0, {}, e);
  }
  listTaxProviders(e = {}) {
    let s2 = "/admin/store/tax-providers";
    return this.client.request("GET", s2, void 0, {}, e);
  }
};
var Js = je;
var _e = class extends i2 {
  retrieve(e, s2 = {}) {
    let t = `/admin/swaps/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  list(e, s2 = {}) {
    let t = "/admin/swaps/";
    return e && (t = `/admin/swaps?${import_qs39.default.stringify(e)}`), this.client.request("GET", t, void 0, {}, s2);
  }
};
var Ms = _e;
var We = class extends i2 {
  retrieve(e, s2, t = {}) {
    let r2 = `/admin/tax-rates/${e}`;
    if (s2) {
      let n2 = import_qs40.default.stringify(s2);
      r2 = `/admin/tax-rates/${e}?${n2}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  list(e, s2 = {}) {
    let t = "/admin/tax-rates";
    return e && (t = `/admin/tax-rates?${import_qs40.default.stringify(e)}`), this.client.request("GET", t, void 0, {}, s2);
  }
  create(e, s2, t = {}) {
    let r2 = "/admin/tax-rates";
    return s2 && (r2 = `/admin/tax-rates?${import_qs40.default.stringify(s2)}`), this.client.request("POST", r2, e, {}, t);
  }
  update(e, s2, t, r2 = {}) {
    let n2 = `/admin/tax-rates/${e}`;
    if (t) {
      let a = import_qs40.default.stringify(t);
      n2 = `/admin/tax-rates/${e}?${a}`;
    }
    return this.client.request("POST", n2, s2, {}, r2);
  }
  addProducts(e, s2, t, r2 = {}) {
    let n2 = `/admin/tax-rates/${e}/products/batch`;
    if (t) {
      let a = import_qs40.default.stringify(t);
      n2 = `/admin/tax-rates/${e}/products/batch?${a}`;
    }
    return this.client.request("POST", n2, s2, {}, r2);
  }
  addProductTypes(e, s2, t, r2 = {}) {
    let n2 = `/admin/tax-rates/${e}/product-types/batch`;
    if (t) {
      let a = import_qs40.default.stringify(t);
      n2 = `/admin/tax-rates/${e}/product-types/batch?${a}`;
    }
    return this.client.request("POST", n2, s2, {}, r2);
  }
  addShippingOptions(e, s2, t, r2 = {}) {
    let n2 = `/admin/tax-rates/${e}/shipping-options/batch`;
    if (t) {
      let a = import_qs40.default.stringify(t);
      n2 = `/admin/tax-rates/${e}/shipping-options/batch?${a}`;
    }
    return this.client.request("POST", n2, s2, {}, r2);
  }
  removeProducts(e, s2, t, r2 = {}) {
    let n2 = `/admin/tax-rates/${e}/products/batch`;
    if (t) {
      let a = import_qs40.default.stringify(t);
      n2 = `/admin/tax-rates/${e}/products/batch?${a}`;
    }
    return this.client.request("DELETE", n2, s2, {}, r2);
  }
  removeProductTypes(e, s2, t, r2 = {}) {
    let n2 = `/admin/tax-rates/${e}/product-types/batch`;
    if (t) {
      let a = import_qs40.default.stringify(t);
      n2 = `/admin/tax-rates/${e}/product-types/batch?${a}`;
    }
    return this.client.request("DELETE", n2, s2, {}, r2);
  }
  removeShippingOptions(e, s2, t, r2 = {}) {
    let n2 = `/admin/tax-rates/${e}/shipping-options/batch`;
    if (t) {
      let a = import_qs40.default.stringify(t);
      n2 = `/admin/tax-rates/${e}/shipping-options/batch?${a}`;
    }
    return this.client.request("DELETE", n2, s2, {}, r2);
  }
  delete(e, s2 = {}) {
    let t = `/admin/tax-rates/${e}`;
    return this.client.request("DELETE", t, void 0, {}, s2);
  }
};
var zs = We;
var Qe = class extends i2 {
  constructor() {
    super(...arguments);
    this.headers = { "Content-Type": "multipart/form-data" };
  }
  create(s2) {
    let t = "/admin/uploads", r2 = this._createPayload(s2);
    return this.client.request("POST", t, r2, {}, this.headers);
  }
  createProtected(s2) {
    let t = "/admin/uploads/protected", r2 = this._createPayload(s2);
    return this.client.request("POST", t, r2, {}, this.headers);
  }
  delete(s2, t = {}) {
    let r2 = "/admin/uploads";
    return this.client.request("DELETE", r2, s2, {}, t);
  }
  getPresignedDownloadUrl(s2, t = {}) {
    let r2 = "/admin/uploads/download-url";
    return this.client.request("POST", r2, s2, {}, t);
  }
  _createPayload(s2) {
    let t = new FormData();
    return Array.isArray(s2) ? s2.forEach((r2) => t.append("files", r2)) : t.append("files", s2), t;
  }
};
var Hs = Qe;
var Xe = class extends i2 {
  sendResetPasswordToken(e, s2 = {}) {
    let t = "/admin/users/password-token";
    return this.client.request("POST", t, e, {}, s2);
  }
  resetPassword(e, s2 = {}) {
    let t = "admin/users/reset-password";
    return this.client.request("POST", t, e, {}, s2);
  }
  retrieve(e, s2 = {}) {
    let t = `/admin/users/${e}`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
  create(e, s2 = {}) {
    let t = "/admin/users";
    return this.client.request("POST", t, e, {}, s2);
  }
  update(e, s2, t = {}) {
    let r2 = `/admin/users/${e}`;
    return this.client.request("POST", r2, s2, {}, t);
  }
  delete(e, s2 = {}) {
    let t = `/admin/users/${e}`;
    return this.client.request("DELETE", t, void 0, {}, s2);
  }
  list(e, s2 = {}) {
    let t = "/admin/users";
    if (e) {
      let r2 = import_qs41.default.stringify(e);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, s2);
  }
};
var js = Xe;
var Ye = class extends i2 {
  list(e, s2 = {}) {
    let t = "/admin/variants";
    return e && (t = `/admin/variants?${import_qs42.default.stringify(e)}`), this.client.request("GET", t, void 0, {}, s2);
  }
  retrieve(e, s2, t = {}) {
    let r2 = `/admin/variants/${e}`;
    return s2 && (r2 = `/admin/variants?${import_qs42.default.stringify(s2)}`), this.client.request("GET", r2, void 0, {}, t);
  }
  getInventory(e, s2 = {}) {
    let t = `/admin/variants/${e}/inventory`;
    return this.client.request("GET", t, void 0, {}, s2);
  }
};
var Ws = Ye;
var f3 = class extends i2 {
  constructor() {
    super(...arguments);
    this.auth = new rs(this.client);
    this.batchJobs = new is(this.client);
    this.customers = new cs(this.client);
    this.customerGroups = new ms(this.client);
    this.discounts = new us(this.client);
    this.currencies = new as(this.client);
    this.collections = new os(this.client);
    this.draftOrders = new ps(this.client);
    this.giftCards = new Rs(this.client);
    this.invites = new Ps(this.client);
    this.inventoryItems = new ls(this.client);
    this.notes = new hs(this.client);
    this.priceLists = new Os(this.client);
    this.products = new Ds(this.client);
    this.productTags = new Ls(this.client);
    this.productTypes = new xs(this.client);
    this.users = new js(this.client);
    this.returns = new Us(this.client);
    this.orders = new qs(this.client);
    this.orderEdits = new As(this.client);
    this.publishableApiKeys = new vs(this.client);
    this.returnReasons = new ks(this.client);
    this.variants = new Ws(this.client);
    this.salesChannels = new Ks(this.client);
    this.swaps = new Ms(this.client);
    this.shippingProfiles = new Vs(this.client);
    this.stockLocations = new Fs(this.client);
    this.store = new Js(this.client);
    this.shippingOptions = new Ns(this.client);
    this.regions = new Is(this.client);
    this.reservations = new Bs(this.client);
    this.notifications = new gs(this.client);
    this.taxRates = new zs(this.client);
    this.uploads = new Hs(this.client);
    this.paymentCollections = new Ss(this.client);
    this.payments = new Ts(this.client);
    this.productCategories = new Es(this.client);
    this.custom = new ds(this.client);
  }
};
var Ze = class {
  constructor(e) {
    this.client = new ss(e), this.admin = new f3(this.client), this.auth = new G(this.client), this.carts = new w(this.client), this.customers = new K(this.client), this.errors = new m(), this.orders = new z(this.client), this.orderEdits = new J(this.client), this.products = new re(this.client), this.productTypes = new Z(this.client), this.regions = new ie(this.client), this.returnReasons = new ae(this.client), this.returns = new me(this.client), this.shippingOptions = new ue(this.client), this.swaps = new Re(this.client), this.collections = new B(this.client), this.giftCards = new V(this.client), this.paymentMethods = new l(this.client), this.paymentCollections = new j(this.client), this.productTags = new X(this.client), this.productCategories = new W(this.client);
  }
  setPublishableKey(e) {
    P.registerPublishableApiKey(e);
  }
};
var ua = Ze;
export {
  L as AddressesResource,
  f3 as Admin,
  rs as AdminAuthResource,
  is as AdminBatchJobsResource,
  os as AdminCollectionsResource,
  as as AdminCurrenciesResource,
  ds as AdminCustomResource,
  ms as AdminCustomerGroupsResource,
  cs as AdminCustomersResource,
  us as AdminDiscountsResource,
  ps as AdminDraftOrdersResource,
  Rs as AdminGiftCardsResource,
  ls as AdminInventoryItemsResource,
  Ps as AdminInvitesResource,
  hs as AdminNotesResource,
  gs as AdminNotificationsResource,
  As as AdminOrderEditsResource,
  qs as AdminOrdersResource,
  Ss as AdminPaymentCollectionsResource,
  Ts as AdminPaymentsResource,
  Os as AdminPriceListResource,
  Es as AdminProductCategoriesResource,
  Ls as AdminProductTagsResource,
  xs as AdminProductTypesResource,
  Ds as AdminProductsResource,
  vs as AdminPublishableApiKeyResource,
  Is as AdminRegionsResource,
  Bs as AdminReservationsResource,
  ks as AdminReturnReasonsResource,
  Us as AdminReturnsResource,
  Ks as AdminSalesChannelsResource,
  Ns as AdminShippingOptionsResource,
  Vs as AdminShippingProfilesResource,
  Fs as AdminStockLocationsResource,
  Js as AdminStoresResource,
  Ms as AdminSwapsResource,
  zs as AdminTaxRatesResource,
  Hs as AdminUploadsResource,
  js as AdminUsersResource,
  Ws as AdminVariantsResource,
  G as AuthResource,
  i2 as BaseResource,
  w as CartsResource,
  ss as Client,
  B as CollectionsResource,
  K as CustomersResource,
  V as GiftCardsResource,
  P as KeyManager,
  b as LineItemsResource,
  m as MedusaError,
  J as OrderEditsResource,
  z as OrdersResource,
  j as PaymentCollectionsResource,
  l as PaymentMethodsResource,
  W as ProductCategoriesResource,
  X as ProductTagsResource,
  Z as ProductTypesResource,
  se as ProductVariantsResource,
  re as ProductsResource,
  ie as RegionsResource,
  ae as ReturnReasonsResource,
  me as ReturnsResource,
  ue as ShippingOptionsResource,
  Re as SwapsResource,
  ua as default
};
//# sourceMappingURL=@medusajs_medusa-js.js.map
